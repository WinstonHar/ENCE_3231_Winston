
2025_STM32F407_TestDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c24  08008c24  00009c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c40  08008c40  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c40  08008c40  00009c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c48  08008c48  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c48  08008c48  00009c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c4c  08008c4c  00009c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008c50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00001220  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000129c  2000129c  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a28  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038c4  00000000  00000000  0001ead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  00022398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d26  00000000  00000000  000234e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002346f  00000000  00000000  00024206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177e1  00000000  00000000  00047675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cba1c  00000000  00000000  0005ee56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a872  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004af0  00000000  00000000  0012a8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012f3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c0c 	.word	0x08008c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008c0c 	.word	0x08008c0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fc4d 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f84b 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f947 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f8b1 	bl	800066c <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f8dd 	bl	80006c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f90b 	bl	8000728 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000512:	f007 ff25 	bl	8008360 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  gResult = twice_square(5);
 8000516:	2005      	movs	r0, #5
 8000518:	f000 fa46 	bl	80009a8 <twice_square>
 800051c:	4603      	mov	r3, r0
 800051e:	4a1a      	ldr	r2, [pc, #104]	@ (8000588 <main+0x94>)
 8000520:	6013      	str	r3, [r2, #0]
  for (uint32_t i = 0; i<ARRAY_SIZE; i++){
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	e00a      	b.n	800053e <main+0x4a>
	  gResult_B[i] = twice_square(i);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f000 fa3d 	bl	80009a8 <twice_square>
 800052e:	4602      	mov	r2, r0
 8000530:	4916      	ldr	r1, [pc, #88]	@ (800058c <main+0x98>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uint32_t i = 0; i<ARRAY_SIZE; i++){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3301      	adds	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000544:	d3f0      	bcc.n	8000528 <main+0x34>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000546:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <main+0x9c>)
 800054c:	f000 ff99 	bl	8001482 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8000550:	20c8      	movs	r0, #200	@ 0xc8
 8000552:	f000 fc93 	bl	8000e7c <HAL_Delay>

	  if (HAL_GPIO_ReadPin(MY_BUTTON_GPIO_Port, MY_BUTTON_Pin)){
 8000556:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800055a:	480e      	ldr	r0, [pc, #56]	@ (8000594 <main+0xa0>)
 800055c:	f000 ff60 	bl	8001420 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <main+0x80>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800056c:	4808      	ldr	r0, [pc, #32]	@ (8000590 <main+0x9c>)
 800056e:	f000 ff6f 	bl	8001450 <HAL_GPIO_WritePin>
 8000572:	e005      	b.n	8000580 <main+0x8c>
	  }else{
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <main+0x9c>)
 800057c:	f000 ff68 	bl	8001450 <HAL_GPIO_WritePin>
	  }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000580:	f007 ff14 	bl	80083ac <MX_USB_HOST_Process>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000584:	e7df      	b.n	8000546 <main+0x52>
 8000586:	bf00      	nop
 8000588:	2000018c 	.word	0x2000018c
 800058c:	20000190 	.word	0x20000190
 8000590:	40020c00 	.word	0x40020c00
 8000594:	40020400 	.word	0x40020400

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f008 faa2 	bl	8008af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	@ (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000616:	2307      	movs	r3, #7
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fe62 	bl	80042e8 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800062a:	f000 f9cb 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800063e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000644:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	2105      	movs	r1, #5
 800064c:	4618      	mov	r0, r3
 800064e:	f004 f8c3 	bl	80047d8 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000658:	f000 f9b4 	bl	80009c4 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	@ 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_I2C1_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <MX_I2C1_Init+0x58>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C1_Init+0x50>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_I2C1_Init+0x50>)
 800068a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_I2C1_Init+0x50>)
 80006aa:	f003 f839 	bl	8003720 <HAL_I2C_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f000 f986 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000098 	.word	0x20000098
 80006c0:	40005400 	.word	0x40005400
 80006c4:	000186a0 	.word	0x000186a0

080006c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_I2S3_Init+0x54>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <MX_I2S3_Init+0x58>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2S3_Init+0x54>)
 80006d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_I2S3_Init+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <MX_I2S3_Init+0x54>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <MX_I2S3_Init+0x5c>)
 80006f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_I2S3_Init+0x54>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_I2S3_Init+0x54>)
 8000708:	f003 f94e 	bl	80039a8 <HAL_I2S_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000712:	f000 f957 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000ec 	.word	0x200000ec
 8000720:	40003c00 	.word	0x40003c00
 8000724:	00017700 	.word	0x00017700

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_SPI1_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_SPI1_Init+0x64>)
 800077a:	f004 fb7b 	bl	8004e74 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f91e 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000134 	.word	0x20000134
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b78      	ldr	r3, [pc, #480]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a77      	ldr	r2, [pc, #476]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b75      	ldr	r3, [pc, #468]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b71      	ldr	r3, [pc, #452]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a70      	ldr	r2, [pc, #448]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b6e      	ldr	r3, [pc, #440]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b6a      	ldr	r3, [pc, #424]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a69      	ldr	r2, [pc, #420]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b67      	ldr	r3, [pc, #412]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b63      	ldr	r3, [pc, #396]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a62      	ldr	r2, [pc, #392]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b60      	ldr	r3, [pc, #384]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b5c      	ldr	r3, [pc, #368]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a5b      	ldr	r2, [pc, #364]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b59      	ldr	r3, [pc, #356]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a54      	ldr	r2, [pc, #336]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b52      	ldr	r3, [pc, #328]	@ (8000990 <MX_GPIO_Init+0x1fc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	484f      	ldr	r0, [pc, #316]	@ (8000994 <MX_GPIO_Init+0x200>)
 8000858:	f000 fdfa 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	484d      	ldr	r0, [pc, #308]	@ (8000998 <MX_GPIO_Init+0x204>)
 8000862:	f000 fdf5 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800086c:	484b      	ldr	r0, [pc, #300]	@ (800099c <MX_GPIO_Init+0x208>)
 800086e:	f000 fdef 	bl	8001450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4842      	ldr	r0, [pc, #264]	@ (8000994 <MX_GPIO_Init+0x200>)
 800088a:	f000 fc2d 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <MX_GPIO_Init+0x204>)
 80008a6:	f000 fc1f 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4834      	ldr	r0, [pc, #208]	@ (8000998 <MX_GPIO_Init+0x204>)
 80008c6:	f000 fc0f 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4830      	ldr	r0, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0x20c>)
 80008e0:	f000 fc02 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <MX_GPIO_Init+0x210>)
 80008f8:	f000 fbf6 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4822      	ldr	r0, [pc, #136]	@ (80009a4 <MX_GPIO_Init+0x210>)
 800091a:	f000 fbe5 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MY_BUTTON_Pin */
  GPIO_InitStruct.Pin = MY_BUTTON_Pin;
 800091e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000928:	2302      	movs	r3, #2
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MY_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	481c      	ldr	r0, [pc, #112]	@ (80009a4 <MX_GPIO_Init+0x210>)
 8000934:	f000 fbd8 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000938:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800093c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	@ (800099c <MX_GPIO_Init+0x208>)
 8000952:	f000 fbc9 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_GPIO_Init+0x208>)
 800096a:	f000 fbbd 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000972:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_GPIO_Init+0x200>)
 8000984:	f000 fbb0 	bl	80010e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	bf00      	nop
 800098a:	3730      	adds	r7, #48	@ 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020400 	.word	0x40020400

080009a8 <twice_square>:
/**
  * @brief computes twice square of inputted value
  * @param value (inputted num)
  * @retval 2*value*value
  */
uint32_t twice_square(uint32_t value){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	return 2*value*value;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	fb03 f303 	mul.w	r3, r3, r3
 80009b6:	005b      	lsls	r3, r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 fb28 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7c:	f000 fb34 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <HAL_I2S_MspInit+0xf0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d15a      	bne.n	8000b96 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ae4:	23c0      	movs	r3, #192	@ 0xc0
 8000ae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 f87d 	bl	8004bf0 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000afc:	f7ff ff62 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b54:	2310      	movs	r3, #16
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b64:	2306      	movs	r3, #6
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <HAL_I2S_MspInit+0xf8>)
 8000b70:	f000 faba 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b74:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b86:	2306      	movs	r3, #6
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4806      	ldr	r0, [pc, #24]	@ (8000bac <HAL_I2S_MspInit+0xfc>)
 8000b92:	f000 faa9 	bl	80010e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b96:	bf00      	nop
 8000b98:	3738      	adds	r7, #56	@ 0x38
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40003c00 	.word	0x40003c00
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020800 	.word	0x40020800

08000bb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_SPI_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c0a:	23e0      	movs	r3, #224	@ 0xe0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_SPI_MspInit+0x8c>)
 8000c26:	f000 fa5f 	bl	80010e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 f8d1 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ca4:	4802      	ldr	r0, [pc, #8]	@ (8000cb0 <OTG_FS_IRQHandler+0x10>)
 8000ca6:	f000 fee7 	bl	8001a78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000d74 	.word	0x20000d74

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	@ (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f007 ff1c 	bl	8008b20 <__errno>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <_sbrk+0x64>)
 8000d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20020000 	.word	0x20020000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	20000990 	.word	0x20000990
 8000d1c:	200012a0 	.word	0x200012a0

08000d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	@ (8000d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f007 fedb 	bl	8008b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d76:	f7ff fbbd 	bl	80004f4 <main>
  bx  lr    
 8000d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d88:	08008c50 	.word	0x08008c50
  ldr r2, =_sbss
 8000d8c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d90:	2000129c 	.word	0x2000129c

08000d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <HAL_Init+0x40>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_Init+0x40>)
 8000dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	@ (8000dd8 <HAL_Init+0x40>)
 8000dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f94f 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fe00 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023c00 	.word	0x40023c00

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f967 	bl	80010ce <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e18:	f000 f92f 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	@ (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000994 	.word	0x20000994

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	@ (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000994 	.word	0x20000994

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	e16b      	b.n	80013dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	429a      	cmp	r2, r3
 800111e:	f040 815a 	bne.w	80013d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d005      	beq.n	800113a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001136:	2b02      	cmp	r3, #2
 8001138:	d130      	bne.n	800119c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 0201 	and.w	r2, r3, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d017      	beq.n	80011d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d123      	bne.n	800122c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	08da      	lsrs	r2, r3, #3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3208      	adds	r2, #8
 80011ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	220f      	movs	r2, #15
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	08da      	lsrs	r2, r3, #3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3208      	adds	r2, #8
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0203 	and.w	r2, r3, #3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80b4 	beq.w	80013d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	4a5f      	ldr	r2, [pc, #380]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127c:	6453      	str	r3, [r2, #68]	@ 0x44
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	4a5b      	ldr	r2, [pc, #364]	@ (80013f8 <HAL_GPIO_Init+0x310>)
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3302      	adds	r3, #2
 8001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	220f      	movs	r2, #15
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_GPIO_Init+0x314>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d02b      	beq.n	800130e <HAL_GPIO_Init+0x226>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a51      	ldr	r2, [pc, #324]	@ (8001400 <HAL_GPIO_Init+0x318>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d025      	beq.n	800130a <HAL_GPIO_Init+0x222>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a50      	ldr	r2, [pc, #320]	@ (8001404 <HAL_GPIO_Init+0x31c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d01f      	beq.n	8001306 <HAL_GPIO_Init+0x21e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001408 <HAL_GPIO_Init+0x320>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d019      	beq.n	8001302 <HAL_GPIO_Init+0x21a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4e      	ldr	r2, [pc, #312]	@ (800140c <HAL_GPIO_Init+0x324>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d013      	beq.n	80012fe <HAL_GPIO_Init+0x216>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001410 <HAL_GPIO_Init+0x328>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d00d      	beq.n	80012fa <HAL_GPIO_Init+0x212>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001414 <HAL_GPIO_Init+0x32c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d007      	beq.n	80012f6 <HAL_GPIO_Init+0x20e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001418 <HAL_GPIO_Init+0x330>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_GPIO_Init+0x20a>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00e      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f2:	2308      	movs	r3, #8
 80012f4:	e00c      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012f6:	2306      	movs	r3, #6
 80012f8:	e00a      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fa:	2305      	movs	r3, #5
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x228>
 80012fe:	2304      	movs	r3, #4
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x228>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x228>
 800130e:	2300      	movs	r3, #0
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	@ (80013f8 <HAL_GPIO_Init+0x310>)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001352:	4a32      	ldr	r2, [pc, #200]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001358:	4b30      	ldr	r3, [pc, #192]	@ (800141c <HAL_GPIO_Init+0x334>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800137c:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_GPIO_Init+0x334>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <HAL_GPIO_Init+0x334>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a6:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <HAL_GPIO_Init+0x334>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3301      	adds	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2b0f      	cmp	r3, #15
 80013e0:	f67f ae90 	bls.w	8001104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3724      	adds	r7, #36	@ 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020400 	.word	0x40020400
 8001404:	40020800 	.word	0x40020800
 8001408:	40020c00 	.word	0x40020c00
 800140c:	40021000 	.word	0x40021000
 8001410:	40021400 	.word	0x40021400
 8001414:	40021800 	.word	0x40021800
 8001418:	40021c00 	.word	0x40021c00
 800141c:	40013c00 	.word	0x40013c00

08001420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4013      	ands	r3, r2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	e001      	b.n	8001442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af02      	add	r7, sp, #8
 80014bc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e059      	b.n	800157c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f006 ff9a 	bl	800841c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2203      	movs	r2, #3
 80014ec:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f6:	d102      	bne.n	80014fe <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fdb4 	bl	8005070 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7c1a      	ldrb	r2, [r3, #16]
 8001510:	f88d 2000 	strb.w	r2, [sp]
 8001514:	3304      	adds	r3, #4
 8001516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001518:	f003 fd35 	bl	8004f86 <USB_CoreInit>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e026      	b.n	800157c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2101      	movs	r1, #1
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fdac 	bl	8005092 <USB_SetCurrentMode>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e017      	b.n	800157c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7c1a      	ldrb	r2, [r3, #16]
 8001554:	f88d 2000 	strb.w	r2, [sp]
 8001558:	3304      	adds	r3, #4
 800155a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155c:	f003 ff4e 	bl	80053fc <USB_HostInit>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e004      	b.n	800157c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08b      	sub	sp, #44	@ 0x2c
 8001588:	af04      	add	r7, sp, #16
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	70fb      	strb	r3, [r7, #3]
 8001596:	460b      	mov	r3, r1
 8001598:	70bb      	strb	r3, [r7, #2]
 800159a:	4613      	mov	r3, r2
 800159c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800159e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015a0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_HCD_HC_Init+0x2c>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e09d      	b.n	80016ec <HAL_HCD_HC_Init+0x168>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3319      	adds	r3, #25
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3314      	adds	r3, #20
 80015dc:	787a      	ldrb	r2, [r7, #1]
 80015de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015e0:	78fa      	ldrb	r2, [r7, #3]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	011b      	lsls	r3, r3, #4
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3315      	adds	r3, #21
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3326      	adds	r3, #38	@ 0x26
 8001604:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001608:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	78bb      	ldrb	r3, [r7, #2]
 800160e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001612:	b2d8      	uxtb	r0, r3
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	1a9b      	subs	r3, r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3316      	adds	r3, #22
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	4619      	mov	r1, r3
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fbc8 	bl	8001dc0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da0a      	bge.n	800164e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3317      	adds	r3, #23
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	e009      	b.n	8001662 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800164e:	78fa      	ldrb	r2, [r7, #3]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	3317      	adds	r3, #23
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f004 f82c 	bl	80056c4 <USB_GetHostSpeed>
 800166c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800166e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10b      	bne.n	800168e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_HCD_HC_Init+0x10a>
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d104      	bne.n	800168e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2bbc      	cmp	r3, #188	@ 0xbc
 8001688:	d901      	bls.n	800168e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800168a:	23bc      	movs	r3, #188	@ 0xbc
 800168c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3318      	adds	r3, #24
 800169e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016a4:	78fa      	ldrb	r2, [r7, #3]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	b298      	uxth	r0, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3328      	adds	r3, #40	@ 0x28
 80016b8:	4602      	mov	r2, r0
 80016ba:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	787c      	ldrb	r4, [r7, #1]
 80016c6:	78ba      	ldrb	r2, [r7, #2]
 80016c8:	78f9      	ldrb	r1, [r7, #3]
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4623      	mov	r3, r4
 80016da:	f004 f81b 	bl	8005714 <USB_HC_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_HCD_HC_Halt+0x1e>
 800170e:	2302      	movs	r3, #2
 8001710:	e00f      	b.n	8001732 <HAL_HCD_HC_Halt+0x3e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fbad 	bl	8005e82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001730:	7bfb      	ldrb	r3, [r7, #15]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	4608      	mov	r0, r1
 8001746:	4611      	mov	r1, r2
 8001748:	461a      	mov	r2, r3
 800174a:	4603      	mov	r3, r0
 800174c:	70fb      	strb	r3, [r7, #3]
 800174e:	460b      	mov	r3, r1
 8001750:	70bb      	strb	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	3317      	adds	r3, #23
 8001766:	78ba      	ldrb	r2, [r7, #2]
 8001768:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	3326      	adds	r3, #38	@ 0x26
 800177a:	787a      	ldrb	r2, [r7, #1]
 800177c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800177e:	7c3b      	ldrb	r3, [r7, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d114      	bne.n	80017ae <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	440b      	add	r3, r1
 8001792:	332a      	adds	r3, #42	@ 0x2a
 8001794:	2203      	movs	r2, #3
 8001796:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	3319      	adds	r3, #25
 80017a8:	7f3a      	ldrb	r2, [r7, #28]
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e009      	b.n	80017c2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	332a      	adds	r3, #42	@ 0x2a
 80017be:	2202      	movs	r2, #2
 80017c0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017c2:	787b      	ldrb	r3, [r7, #1]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	f200 8102 	bhi.w	80019ce <HAL_HCD_HC_SubmitRequest+0x292>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080019b9 	.word	0x080019b9
 80017d8:	080018a5 	.word	0x080018a5
 80017dc:	0800192f 	.word	0x0800192f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017e0:	7c3b      	ldrb	r3, [r7, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	f040 80f5 	bne.w	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d12d      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017ee:	8b3b      	ldrh	r3, [r7, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	333d      	adds	r3, #61	@ 0x3d
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	333d      	adds	r3, #61	@ 0x3d
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	332a      	adds	r3, #42	@ 0x2a
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001832:	e0ce      	b.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	332a      	adds	r3, #42	@ 0x2a
 8001844:	2202      	movs	r2, #2
 8001846:	701a      	strb	r2, [r3, #0]
      break;
 8001848:	e0c3      	b.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	331a      	adds	r3, #26
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	f040 80b8 	bne.w	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	333c      	adds	r3, #60	@ 0x3c
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10a      	bne.n	800188e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	332a      	adds	r3, #42	@ 0x2a
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
      break;
 800188c:	e0a1      	b.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	332a      	adds	r3, #42	@ 0x2a
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
      break;
 80018a2:	e096      	b.n	80019d2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a4:	78bb      	ldrb	r3, [r7, #2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d120      	bne.n	80018ec <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	333d      	adds	r3, #61	@ 0x3d
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	332a      	adds	r3, #42	@ 0x2a
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018d4:	e07e      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a9b      	subs	r3, r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	332a      	adds	r3, #42	@ 0x2a
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e073      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	333c      	adds	r3, #60	@ 0x3c
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10a      	bne.n	8001918 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	332a      	adds	r3, #42	@ 0x2a
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e05d      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001918:	78fa      	ldrb	r2, [r7, #3]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	1a9b      	subs	r3, r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	332a      	adds	r3, #42	@ 0x2a
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	e052      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800192e:	78bb      	ldrb	r3, [r7, #2]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d120      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	333d      	adds	r3, #61	@ 0x3d
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	332a      	adds	r3, #42	@ 0x2a
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800195e:	e039      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	1a9b      	subs	r3, r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	332a      	adds	r3, #42	@ 0x2a
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e02e      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001976:	78fa      	ldrb	r2, [r7, #3]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	1a9b      	subs	r3, r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	333c      	adds	r3, #60	@ 0x3c
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	332a      	adds	r3, #42	@ 0x2a
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
      break;
 80019a0:	e018      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a2:	78fa      	ldrb	r2, [r7, #3]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a9b      	subs	r3, r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	440b      	add	r3, r1
 80019b0:	332a      	adds	r3, #42	@ 0x2a
 80019b2:	2202      	movs	r2, #2
 80019b4:	701a      	strb	r2, [r3, #0]
      break;
 80019b6:	e00d      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fa      	ldrb	r2, [r7, #3]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	332a      	adds	r3, #42	@ 0x2a
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
      break;
 80019cc:	e002      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019d2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	332c      	adds	r3, #44	@ 0x2c
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	8b39      	ldrh	r1, [r7, #24]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4403      	add	r3, r0
 80019f8:	3334      	adds	r3, #52	@ 0x34
 80019fa:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	334c      	adds	r3, #76	@ 0x4c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3338      	adds	r3, #56	@ 0x38
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	3315      	adds	r3, #21
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	334d      	adds	r3, #77	@ 0x4d
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	4613      	mov	r3, r2
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3310      	adds	r3, #16
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	1d19      	adds	r1, r3, #4
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	799b      	ldrb	r3, [r3, #6]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f003 ff80 	bl	800596c <USB_HC_StartXfer>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 fc75 	bl	800537e <USB_GetMode>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	f040 80fb 	bne.w	8001c92 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fc38 	bl	8005316 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80f1 	beq.w	8001c90 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc2f 	bl	8005316 <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ac2:	d104      	bne.n	8001ace <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001acc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fc1f 	bl	8005316 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ae2:	d104      	bne.n	8001aee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc0f 	bl	8005316 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001afe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b02:	d104      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fbff 	bl	8005316 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d103      	bne.n	8001b2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fbf1 	bl	8005316 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b3e:	d120      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d113      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	6938      	ldr	r0, [r7, #16]
 8001b5e:	f003 fae4 	bl	800512a <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b62:	6938      	ldr	r0, [r7, #16]
 8001b64:	f003 fb13 	bl	800518e <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a5b      	ldrb	r3, [r3, #9]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d105      	bne.n	8001b7c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fd04 	bl	8005584 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f006 fccb 	bl	8008518 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fbc5 	bl	8005316 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b96:	d102      	bne.n	8001b9e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f001 fd4d 	bl	8003638 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fbb7 	bl	8005316 <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d106      	bne.n	8001bc0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f006 fc94 	bl	80084e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fba6 	bl	8005316 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bd4:	d139      	bne.n	8001c4a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 f940 	bl	8005e60 <USB_HC_ReadInterrupt>
 8001be0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e025      	b.n	8001c34 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d018      	beq.n	8001c2e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c12:	d106      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f905 	bl	8001e2a <HCD_HC_IN_IRQHandler>
 8001c20:	e005      	b.n	8001c2e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 ff67 	bl	8002afc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	3301      	adds	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	795b      	ldrb	r3, [r3, #5]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d3d3      	bcc.n	8001be8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 fb61 	bl	8005316 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d101      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x1ea>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_HCD_IRQHandler+0x1ec>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d014      	beq.n	8001c92 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0210 	bic.w	r2, r2, #16
 8001c76:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f001 fbfe 	bl	800347a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699a      	ldr	r2, [r3, #24]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0210 	orr.w	r2, r2, #16
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	e000      	b.n	8001c92 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c90:	bf00      	nop
    }
  }
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_HCD_Start+0x16>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e013      	b.n	8001cd6 <HAL_HCD_Start+0x3e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fcc8 	bl	8005652 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 f9c1 	bl	800504e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_HCD_Stop+0x16>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e00d      	b.n	8001d10 <HAL_HCD_Stop+0x32>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fa1b 	bl	800613c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 fc6a 	bl	80055fe <USB_ResetPort>
 8001d2a:	4603      	mov	r3, r0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	1a9b      	subs	r3, r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	334c      	adds	r3, #76	@ 0x4c
 8001d50:	781b      	ldrb	r3, [r3, #0]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3338      	adds	r3, #56	@ 0x38
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fcac 	bl	80056f2 <USB_GetCurrentFrame>
 8001d9a:	4603      	mov	r3, r0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f003 fc87 	bl	80056c4 <USB_GetHostSpeed>
 8001db6:	4603      	mov	r3, r0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	331a      	adds	r3, #26
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	331b      	adds	r3, #27
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001df4:	78fa      	ldrb	r2, [r7, #3]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3325      	adds	r3, #37	@ 0x25
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	3324      	adds	r3, #36	@ 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fa77 	bl	800533c <USB_ReadChInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11a      	bne.n	8001e8e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e64:	461a      	mov	r2, r3
 8001e66:	2304      	movs	r3, #4
 8001e68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	334d      	adds	r3, #77	@ 0x4d
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	78fa      	ldrb	r2, [r7, #3]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fffb 	bl	8005e82 <USB_HC_Halt>
 8001e8c:	e09e      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fa50 	bl	800533c <USB_ReadChInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea6:	d11b      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	334d      	adds	r3, #77	@ 0x4d
 8001ecc:	2208      	movs	r2, #8
 8001ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 ffd2 	bl	8005e82 <USB_HC_Halt>
 8001ede:	e075      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	78fa      	ldrb	r2, [r7, #3]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 fa27 	bl	800533c <USB_ReadChInterrupts>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d11a      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2308      	movs	r3, #8
 8001f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	334d      	adds	r3, #77	@ 0x4d
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 ffab 	bl	8005e82 <USB_HC_Halt>
 8001f2c:	e04e      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 fa00 	bl	800533c <USB_ReadChInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f46:	d11b      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334d      	adds	r3, #77	@ 0x4d
 8001f6c:	2209      	movs	r2, #9
 8001f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 ff82 	bl	8005e82 <USB_HC_Halt>
 8001f7e:	e025      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 f9d7 	bl	800533c <USB_ReadChInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b80      	cmp	r3, #128	@ 0x80
 8001f96:	d119      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	334d      	adds	r3, #77	@ 0x4d
 8001fba:	2207      	movs	r2, #7
 8001fbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 ff5b 	bl	8005e82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f003 f9b1 	bl	800533c <USB_ReadChInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe4:	d112      	bne.n	800200c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 ff47 	bl	8005e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	f000 bd75 	b.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f003 f991 	bl	800533c <USB_ReadChInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	f040 8128 	bne.w	8002276 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002032:	461a      	mov	r2, r3
 8002034:	2320      	movs	r3, #32
 8002036:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	331b      	adds	r3, #27
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d119      	bne.n	8002082 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800204e:	78fa      	ldrb	r2, [r7, #3]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	331b      	adds	r3, #27
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	0151      	lsls	r1, r2, #5
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	440a      	add	r2, r1
 8002078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800207c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002080:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	799b      	ldrb	r3, [r3, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01b      	beq.n	80020c2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3330      	adds	r3, #48	@ 0x30
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	1ac9      	subs	r1, r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4403      	add	r3, r0
 80020be:	3338      	adds	r3, #56	@ 0x38
 80020c0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	1a9b      	subs	r3, r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	334d      	adds	r3, #77	@ 0x4d
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3344      	adds	r3, #68	@ 0x44
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2301      	movs	r3, #1
 80020fa:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3326      	adds	r3, #38	@ 0x26
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3326      	adds	r3, #38	@ 0x26
 8002122:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002124:	2b02      	cmp	r3, #2
 8002126:	d110      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fea6 	bl	8005e82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4413      	add	r3, r2
 800213e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002142:	461a      	mov	r2, r3
 8002144:	2310      	movs	r3, #16
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	e03d      	b.n	80021c6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3326      	adds	r3, #38	@ 0x26
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d00a      	beq.n	8002176 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a9b      	subs	r3, r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3326      	adds	r3, #38	@ 0x26
 8002170:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002172:	2b01      	cmp	r3, #1
 8002174:	d127      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002176:	78fb      	ldrb	r3, [r7, #3]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	0151      	lsls	r1, r2, #5
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	440a      	add	r2, r1
 800218c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002194:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	334c      	adds	r3, #76	@ 0x4c
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	334c      	adds	r3, #76	@ 0x4c
 80021ba:	781a      	ldrb	r2, [r3, #0]
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f006 f9b7 	bl	8008534 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	799b      	ldrb	r3, [r3, #6]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d13b      	bne.n	8002246 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3338      	adds	r3, #56	@ 0x38
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4403      	add	r3, r0
 80021ee:	3328      	adds	r3, #40	@ 0x28
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	440b      	add	r3, r1
 80021f4:	1e59      	subs	r1, r3, #1
 80021f6:	78fa      	ldrb	r2, [r7, #3]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4403      	add	r3, r0
 8002204:	3328      	adds	r3, #40	@ 0x28
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	fbb1 f3f3 	udiv	r3, r1, r3
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8470 	beq.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	333c      	adds	r3, #60	@ 0x3c
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2d8      	uxtb	r0, r3
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	333c      	adds	r3, #60	@ 0x3c
 800223e:	4602      	mov	r2, r0
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	f000 bc58 	b.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	333c      	adds	r3, #60	@ 0x3c
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2d8      	uxtb	r0, r3
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	011b      	lsls	r3, r3, #4
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	333c      	adds	r3, #60	@ 0x3c
 800226e:	4602      	mov	r2, r0
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	f000 bc40 	b.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f003 f85c 	bl	800533c <USB_ReadChInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b20      	cmp	r3, #32
 800228c:	d131      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2320      	movs	r3, #32
 800229e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	331a      	adds	r3, #26
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	f040 841f 	bne.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	331b      	adds	r3, #27
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	334d      	adds	r3, #77	@ 0x4d
 80022dc:	2203      	movs	r2, #3
 80022de:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 fdca 	bl	8005e82 <USB_HC_Halt>
 80022ee:	f000 bc02 	b.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f81e 	bl	800533c <USB_ReadChInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	f040 8305 	bne.w	8002916 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002318:	461a      	mov	r2, r3
 800231a:	2302      	movs	r3, #2
 800231c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	334d      	adds	r3, #77	@ 0x4d
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d114      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	334d      	adds	r3, #77	@ 0x4d
 8002344:	2202      	movs	r2, #2
 8002346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	334c      	adds	r3, #76	@ 0x4c
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e2cc      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800235e:	78fa      	ldrb	r2, [r7, #3]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	334d      	adds	r3, #77	@ 0x4d
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d114      	bne.n	800239e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	334d      	adds	r3, #77	@ 0x4d
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	@ 0x4c
 8002398:	2205      	movs	r2, #5
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	e2ac      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334d      	adds	r3, #77	@ 0x4d
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d00b      	beq.n	80023cc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334d      	adds	r3, #77	@ 0x4d
 80023c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023c6:	2b09      	cmp	r3, #9
 80023c8:	f040 80a6 	bne.w	8002518 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334d      	adds	r3, #77	@ 0x4d
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3344      	adds	r3, #68	@ 0x44
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1c59      	adds	r1, r3, #1
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4403      	add	r3, r0
 8002400:	3344      	adds	r3, #68	@ 0x44
 8002402:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3344      	adds	r3, #68	@ 0x44
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d943      	bls.n	80024a2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800241a:	78fa      	ldrb	r2, [r7, #3]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3344      	adds	r3, #68	@ 0x44
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	331a      	adds	r3, #26
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d123      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	331b      	adds	r3, #27
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	331c      	adds	r3, #28
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	0151      	lsls	r1, r2, #5
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	440a      	add	r2, r1
 8002482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	334c      	adds	r3, #76	@ 0x4c
 800249c:	2204      	movs	r2, #4
 800249e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024a0:	e229      	b.n	80028f6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	334c      	adds	r3, #76	@ 0x4c
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3326      	adds	r3, #38	@ 0x26
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3326      	adds	r3, #38	@ 0x26
 80024dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024de:	2b02      	cmp	r3, #2
 80024e0:	f040 8209 	bne.w	80028f6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002502:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002516:	e1ee      	b.n	80028f6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	334d      	adds	r3, #77	@ 0x4d
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b05      	cmp	r3, #5
 800252c:	f040 80c8 	bne.w	80026c0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334d      	adds	r3, #77	@ 0x4d
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002544:	78fa      	ldrb	r2, [r7, #3]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	331b      	adds	r3, #27
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	f040 81ce 	bne.w	80028f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3326      	adds	r3, #38	@ 0x26
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d16b      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002572:	78fa      	ldrb	r2, [r7, #3]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3348      	adds	r3, #72	@ 0x48
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c59      	adds	r1, r3, #1
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4403      	add	r3, r0
 8002592:	3348      	adds	r3, #72	@ 0x48
 8002594:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3348      	adds	r3, #72	@ 0x48
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d943      	bls.n	8002634 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3348      	adds	r3, #72	@ 0x48
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	331b      	adds	r3, #27
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3344      	adds	r3, #68	@ 0x44
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d809      	bhi.n	80025fe <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	331c      	adds	r3, #28
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	440a      	add	r2, r1
 8002614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	334c      	adds	r3, #76	@ 0x4c
 800262e:	2204      	movs	r2, #4
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e014      	b.n	800265e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334c      	adds	r3, #76	@ 0x4c
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e009      	b.n	800265e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334c      	adds	r3, #76	@ 0x4c
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3326      	adds	r3, #38	@ 0x26
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3326      	adds	r3, #38	@ 0x26
 8002684:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002686:	2b02      	cmp	r3, #2
 8002688:	f040 8136 	bne.w	80028f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026a2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026aa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e11b      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	334d      	adds	r3, #77	@ 0x4d
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	f040 8081 	bne.w	80027da <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334d      	adds	r3, #77	@ 0x4d
 80026e8:	2202      	movs	r2, #2
 80026ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	331b      	adds	r3, #27
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f040 80fa 	bne.w	80028f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	334c      	adds	r3, #76	@ 0x4c
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	78fa      	ldrb	r2, [r7, #3]
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	440a      	add	r2, r1
 800272e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002736:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002756:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002772:	f023 0320 	bic.w	r3, r3, #32
 8002776:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3326      	adds	r3, #38	@ 0x26
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3326      	adds	r3, #38	@ 0x26
 800279e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f040 80a9 	bne.w	80028f8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	e08e      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	334d      	adds	r3, #77	@ 0x4d
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d143      	bne.n	8002878 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	334d      	adds	r3, #77	@ 0x4d
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	@ 0x4c
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3326      	adds	r3, #38	@ 0x26
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3326      	adds	r3, #38	@ 0x26
 800283e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002840:	2b02      	cmp	r3, #2
 8002842:	d159      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800285a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002862:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e03f      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d126      	bne.n	80028dc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	334d      	adds	r3, #77	@ 0x4d
 800289e:	2202      	movs	r2, #2
 80028a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3344      	adds	r3, #68	@ 0x44
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c59      	adds	r1, r3, #1
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4403      	add	r3, r0
 80028c2:	3344      	adds	r3, #68	@ 0x44
 80028c4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	334c      	adds	r3, #76	@ 0x4c
 80028d6:	2204      	movs	r2, #4
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	e00d      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	f000 8100 	beq.w	8002af4 <HCD_HC_IN_IRQHandler+0xcca>
 80028f4:	e000      	b.n	80028f8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	334c      	adds	r3, #76	@ 0x4c
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f005 fe10 	bl	8008534 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002914:	e0ef      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fd0c 	bl	800533c <USB_ReadChInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292a:	2b40      	cmp	r3, #64	@ 0x40
 800292c:	d12f      	bne.n	800298e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	2340      	movs	r3, #64	@ 0x40
 800293e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	334d      	adds	r3, #77	@ 0x4d
 8002950:	2205      	movs	r2, #5
 8002952:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	331a      	adds	r3, #26
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3344      	adds	r3, #68	@ 0x44
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f003 fa7b 	bl	8005e82 <USB_HC_Halt>
 800298c:	e0b3      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fcd0 	bl	800533c <USB_ReadChInterrupts>
 800299c:	4603      	mov	r3, r0
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	f040 80a7 	bne.w	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3326      	adds	r3, #38	@ 0x26
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d11b      	bne.n	80029f6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	334d      	adds	r3, #77	@ 0x4d
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fa47 	bl	8005e82 <USB_HC_Halt>
 80029f4:	e03f      	b.n	8002a76 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3326      	adds	r3, #38	@ 0x26
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3326      	adds	r3, #38	@ 0x26
 8002a1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d129      	bne.n	8002a76 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3344      	adds	r3, #68	@ 0x44
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	799b      	ldrb	r3, [r3, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	331b      	adds	r3, #27
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d110      	bne.n	8002a76 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334d      	adds	r3, #77	@ 0x4d
 8002a64:	2204      	movs	r2, #4
 8002a66:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fa06 	bl	8005e82 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	331b      	adds	r3, #27
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d129      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	011b      	lsls	r3, r3, #4
 8002a94:	1a9b      	subs	r3, r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	331b      	adds	r3, #27
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	0151      	lsls	r1, r2, #5
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002abe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ada:	f043 0320 	orr.w	r3, r3, #32
 8002ade:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2310      	movs	r3, #16
 8002af0:	6093      	str	r3, [r2, #8]
 8002af2:	e000      	b.n	8002af6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002af4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fc0e 	bl	800533c <USB_ReadChInterrupts>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d11b      	bne.n	8002b62 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b36:	461a      	mov	r2, r3
 8002b38:	2304      	movs	r3, #4
 8002b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334d      	adds	r3, #77	@ 0x4d
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 f992 	bl	8005e82 <USB_HC_Halt>
 8002b5e:	f000 bc89 	b.w	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fbe6 	bl	800533c <USB_ReadChInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	f040 8082 	bne.w	8002c80 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3319      	adds	r3, #25
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d124      	bne.n	8002bee <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3319      	adds	r3, #25
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	@ 0x4c
 8002bc8:	2202      	movs	r2, #2
 8002bca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	334d      	adds	r3, #77	@ 0x4d
 8002bdc:	2203      	movs	r2, #3
 8002bde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 f94a 	bl	8005e82 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	331a      	adds	r3, #26
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 8437 	bne.w	8003474 <HCD_HC_OUT_IRQHandler+0x978>
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	331b      	adds	r3, #27
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 842b 	bne.w	8003474 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3326      	adds	r3, #38	@ 0x26
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d009      	beq.n	8002c48 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	331b      	adds	r3, #27
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	@ 0x4d
 8002c58:	2203      	movs	r2, #3
 8002c5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 f90c 	bl	8005e82 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	3344      	adds	r3, #68	@ 0x44
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e3f9      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f002 fb57 	bl	800533c <USB_ReadChInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c98:	d111      	bne.n	8002cbe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 f8e3 	bl	8005e82 <USB_HC_Halt>
 8002cbc:	e3da      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 fb38 	bl	800533c <USB_ReadChInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d168      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3344      	adds	r3, #68	@ 0x44
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f002 fb22 	bl	800533c <USB_ReadChInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfe:	2b40      	cmp	r3, #64	@ 0x40
 8002d00:	d112      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3319      	adds	r3, #25
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	2340      	movs	r3, #64	@ 0x40
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	331b      	adds	r3, #27
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d019      	beq.n	8002d72 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	331b      	adds	r3, #27
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	0151      	lsls	r1, r2, #5
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	440a      	add	r2, r1
 8002d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d70:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2301      	movs	r3, #1
 8002d82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334d      	adds	r3, #77	@ 0x4d
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 f86e 	bl	8005e82 <USB_HC_Halt>
 8002da6:	e365      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f002 fac3 	bl	800533c <USB_ReadChInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b40      	cmp	r3, #64	@ 0x40
 8002dbe:	d139      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	334d      	adds	r3, #77	@ 0x4d
 8002dd0:	2205      	movs	r2, #5
 8002dd2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	331a      	adds	r3, #26
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3319      	adds	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3344      	adds	r3, #68	@ 0x44
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 f831 	bl	8005e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2340      	movs	r3, #64	@ 0x40
 8002e30:	6093      	str	r3, [r2, #8]
 8002e32:	e31f      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fa7d 	bl	800533c <USB_ReadChInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d11a      	bne.n	8002e82 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	334d      	adds	r3, #77	@ 0x4d
 8002e6e:	2206      	movs	r2, #6
 8002e70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 f801 	bl	8005e82 <USB_HC_Halt>
 8002e80:	e2f8      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f002 fa56 	bl	800533c <USB_ReadChInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d144      	bne.n	8002f24 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3344      	adds	r3, #68	@ 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	334d      	adds	r3, #77	@ 0x4d
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3319      	adds	r3, #25
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d114      	bne.n	8002f02 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3319      	adds	r3, #25
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 ffb9 	bl	8005e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2310      	movs	r3, #16
 8002f20:	6093      	str	r3, [r2, #8]
 8002f22:	e2a7      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fa05 	bl	800533c <USB_ReadChInterrupts>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f38:	2b80      	cmp	r3, #128	@ 0x80
 8002f3a:	f040 8083 	bne.w	8003044 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	799b      	ldrb	r3, [r3, #6]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d111      	bne.n	8002f6a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	334d      	adds	r3, #77	@ 0x4d
 8002f56:	2207      	movs	r2, #7
 8002f58:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 ff8d 	bl	8005e82 <USB_HC_Halt>
 8002f68:	e062      	b.n	8003030 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3344      	adds	r3, #68	@ 0x44
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	1c59      	adds	r1, r3, #1
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4403      	add	r3, r0
 8002f8a:	3344      	adds	r3, #68	@ 0x44
 8002f8c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3344      	adds	r3, #68	@ 0x44
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d922      	bls.n	8002fea <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3344      	adds	r3, #68	@ 0x44
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334c      	adds	r3, #76	@ 0x4c
 8002fc8:	2204      	movs	r2, #4
 8002fca:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	334c      	adds	r3, #76	@ 0x4c
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f005 faa6 	bl	8008534 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fe8:	e022      	b.n	8003030 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	334c      	adds	r3, #76	@ 0x4c
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4413      	add	r3, r2
 8003006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003014:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800301c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800303c:	461a      	mov	r2, r3
 800303e:	2380      	movs	r3, #128	@ 0x80
 8003040:	6093      	str	r3, [r2, #8]
 8003042:	e217      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f002 f975 	bl	800533c <USB_ReadChInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305c:	d11b      	bne.n	8003096 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	334d      	adds	r3, #77	@ 0x4d
 800306e:	2209      	movs	r2, #9
 8003070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f002 ff01 	bl	8005e82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4413      	add	r3, r2
 8003088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308c:	461a      	mov	r2, r3
 800308e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003092:	6093      	str	r3, [r2, #8]
 8003094:	e1ee      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 f94c 	bl	800533c <USB_ReadChInterrupts>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	f040 81df 	bne.w	800346e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	2302      	movs	r3, #2
 80030c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	334d      	adds	r3, #77	@ 0x4d
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	f040 8093 	bne.w	8003200 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334d      	adds	r3, #77	@ 0x4d
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334c      	adds	r3, #76	@ 0x4c
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3326      	adds	r3, #38	@ 0x26
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d00b      	beq.n	8003130 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3326      	adds	r3, #38	@ 0x26
 8003128:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	f040 8190 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	799b      	ldrb	r3, [r3, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d115      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	333d      	adds	r3, #61	@ 0x3d
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	f083 0301 	eor.w	r3, r3, #1
 8003150:	b2d8      	uxtb	r0, r3
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	333d      	adds	r3, #61	@ 0x3d
 8003160:	4602      	mov	r2, r0
 8003162:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	799b      	ldrb	r3, [r3, #6]
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 8171 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3334      	adds	r3, #52	@ 0x34
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8165 	beq.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3334      	adds	r3, #52	@ 0x34
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4403      	add	r3, r0
 80031a6:	3328      	adds	r3, #40	@ 0x28
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	440b      	add	r3, r1
 80031ac:	1e59      	subs	r1, r3, #1
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4403      	add	r3, r0
 80031bc:	3328      	adds	r3, #40	@ 0x28
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 813f 	beq.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	333d      	adds	r3, #61	@ 0x3d
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2d8      	uxtb	r0, r3
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	333d      	adds	r3, #61	@ 0x3d
 80031fa:	4602      	mov	r2, r0
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e127      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334d      	adds	r3, #77	@ 0x4d
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d120      	bne.n	8003258 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334d      	adds	r3, #77	@ 0x4d
 8003226:	2202      	movs	r2, #2
 8003228:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	331b      	adds	r3, #27
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 8107 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e0fb      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	@ 0x4d
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b04      	cmp	r3, #4
 800326c:	d13a      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	334c      	adds	r3, #76	@ 0x4c
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	331b      	adds	r3, #27
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 80d1 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	331b      	adds	r3, #27
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	0151      	lsls	r1, r2, #5
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	440a      	add	r2, r1
 80032d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032e0:	6053      	str	r3, [r2, #4]
 80032e2:	e0b5      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d114      	bne.n	8003324 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	334d      	adds	r3, #77	@ 0x4d
 800330a:	2202      	movs	r2, #2
 800330c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	334c      	adds	r3, #76	@ 0x4c
 800331e:	2202      	movs	r2, #2
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e095      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	334d      	adds	r3, #77	@ 0x4d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d114      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	2202      	movs	r2, #2
 800334c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	@ 0x4c
 800335e:	2205      	movs	r2, #5
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e075      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b07      	cmp	r3, #7
 8003378:	d00a      	beq.n	8003390 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334d      	adds	r3, #77	@ 0x4d
 800338a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800338c:	2b09      	cmp	r3, #9
 800338e:	d170      	bne.n	8003472 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3344      	adds	r3, #68	@ 0x44
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4403      	add	r3, r0
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	3344      	adds	r3, #68	@ 0x44
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d914      	bls.n	8003408 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	3344      	adds	r3, #68	@ 0x44
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334c      	adds	r3, #76	@ 0x4c
 8003402:	2204      	movs	r2, #4
 8003404:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003406:	e022      	b.n	800344e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	334c      	adds	r3, #76	@ 0x4c
 8003418:	2202      	movs	r2, #2
 800341a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003432:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800343a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800344e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	334c      	adds	r3, #76	@ 0x4c
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f005 f864 	bl	8008534 <HAL_HCD_HC_NotifyURBChange_Callback>
 800346c:	e002      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003472:	bf00      	nop
  }
}
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b08a      	sub	sp, #40	@ 0x28
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	0c5b      	lsrs	r3, r3, #17
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d004      	beq.n	80034c0 <HCD_RXQLVL_IRQHandler+0x46>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	f000 80b6 	beq.w	800362a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034be:	e0b7      	b.n	8003630 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80b3 	beq.w	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	332c      	adds	r3, #44	@ 0x2c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80a7 	beq.w	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3338      	adds	r3, #56	@ 0x38
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	18d1      	adds	r1, r2, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	3334      	adds	r3, #52	@ 0x34
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4299      	cmp	r1, r3
 800350a:	f200 8083 	bhi.w	8003614 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	332c      	adds	r3, #44	@ 0x2c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	b292      	uxth	r2, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f001 fe9c 	bl	8005266 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	332c      	adds	r3, #44	@ 0x2c
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	332c      	adds	r3, #44	@ 0x2c
 8003554:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3338      	adds	r3, #56	@ 0x38
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	18d1      	adds	r1, r2, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4403      	add	r3, r0
 800357a:	3338      	adds	r3, #56	@ 0x38
 800357c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	0cdb      	lsrs	r3, r3, #19
 800358e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003592:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3328      	adds	r3, #40	@ 0x28
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d13f      	bne.n	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03c      	beq.n	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	333c      	adds	r3, #60	@ 0x3c
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	333c      	adds	r3, #60	@ 0x3c
 800360e:	4602      	mov	r2, r0
 8003610:	701a      	strb	r2, [r3, #0]
      break;
 8003612:	e00c      	b.n	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4613      	mov	r3, r2
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	334c      	adds	r3, #76	@ 0x4c
 8003624:	2204      	movs	r2, #4
 8003626:	701a      	strb	r2, [r3, #0]
      break;
 8003628:	e001      	b.n	800362e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800362e:	bf00      	nop
  }
}
 8003630:	bf00      	nop
 8003632:	3728      	adds	r7, #40	@ 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003664:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b02      	cmp	r3, #2
 800366e:	d10b      	bne.n	8003688 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d102      	bne.n	8003680 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f004 ff3e 	bl	80084fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b08      	cmp	r3, #8
 8003690:	d132      	bne.n	80036f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f043 0308 	orr.w	r3, r3, #8
 8003698:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d126      	bne.n	80036f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7a5b      	ldrb	r3, [r3, #9]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d113      	bne.n	80036d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036b6:	d106      	bne.n	80036c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2102      	movs	r1, #2
 80036be:	4618      	mov	r0, r3
 80036c0:	f001 ff60 	bl	8005584 <USB_InitFSLSPClkSel>
 80036c4:	e011      	b.n	80036ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2101      	movs	r1, #1
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 ff59 	bl	8005584 <USB_InitFSLSPClkSel>
 80036d2:	e00a      	b.n	80036ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	79db      	ldrb	r3, [r3, #7]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036e2:	461a      	mov	r2, r3
 80036e4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f004 ff30 	bl	8008550 <HAL_HCD_PortEnabled_Callback>
 80036f0:	e002      	b.n	80036f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f004 ff3a 	bl	800856c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d103      	bne.n	800370a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f043 0320 	orr.w	r3, r3, #32
 8003708:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6013      	str	r3, [r2, #0]
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
	...

08003720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e12b      	b.n	800398a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd f96a 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	@ 0x24
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003784:	f001 fa20 	bl	8004bc8 <HAL_RCC_GetPCLK1Freq>
 8003788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a81      	ldr	r2, [pc, #516]	@ (8003994 <HAL_I2C_Init+0x274>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d807      	bhi.n	80037a4 <HAL_I2C_Init+0x84>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a80      	ldr	r2, [pc, #512]	@ (8003998 <HAL_I2C_Init+0x278>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e006      	b.n	80037b2 <HAL_I2C_Init+0x92>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a7d      	ldr	r2, [pc, #500]	@ (800399c <HAL_I2C_Init+0x27c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0e7      	b.n	800398a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a78      	ldr	r2, [pc, #480]	@ (80039a0 <HAL_I2C_Init+0x280>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0c9b      	lsrs	r3, r3, #18
 80037c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003994 <HAL_I2C_Init+0x274>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d802      	bhi.n	80037f4 <HAL_I2C_Init+0xd4>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3301      	adds	r3, #1
 80037f2:	e009      	b.n	8003808 <HAL_I2C_Init+0xe8>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4a69      	ldr	r2, [pc, #420]	@ (80039a4 <HAL_I2C_Init+0x284>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	3301      	adds	r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800381a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	495c      	ldr	r1, [pc, #368]	@ (8003994 <HAL_I2C_Init+0x274>)
 8003824:	428b      	cmp	r3, r1
 8003826:	d819      	bhi.n	800385c <HAL_I2C_Init+0x13c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e59      	subs	r1, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fbb1 f3f3 	udiv	r3, r1, r3
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800383c:	400b      	ands	r3, r1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_I2C_Init+0x138>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e59      	subs	r1, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	e051      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 8003858:	2304      	movs	r3, #4
 800385a:	e04f      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <HAL_I2C_Init+0x168>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e012      	b.n	80038ae <HAL_I2C_Init+0x18e>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Init+0x196>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e022      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <HAL_I2C_Init+0x1bc>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1e58      	subs	r0, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	440b      	add	r3, r1
 80038cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038da:	e00f      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	6809      	ldr	r1, [r1, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800392a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6911      	ldr	r1, [r2, #16]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	000186a0 	.word	0x000186a0
 8003998:	001e847f 	.word	0x001e847f
 800399c:	003d08ff 	.word	0x003d08ff
 80039a0:	431bde83 	.word	0x431bde83
 80039a4:	10624dd3 	.word	0x10624dd3

080039a8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e128      	b.n	8003c0c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a90      	ldr	r2, [pc, #576]	@ (8003c14 <HAL_I2S_Init+0x26c>)
 80039d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fd f86b 	bl	8000ab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039f0:	f023 030f 	bic.w	r3, r3, #15
 80039f4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2202      	movs	r2, #2
 80039fc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d060      	beq.n	8003ac8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a0e:	2310      	movs	r3, #16
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e001      	b.n	8003a18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a14:	2320      	movs	r3, #32
 8003a16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d802      	bhi.n	8003a26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a26:	2001      	movs	r0, #1
 8003a28:	f001 f9c4 	bl	8004db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a2c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a36:	d125      	bne.n	8003a84 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	461a      	mov	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	3305      	adds	r3, #5
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e01f      	b.n	8003aa2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	461a      	mov	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	3305      	adds	r3, #5
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e00e      	b.n	8003aa2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c18 <HAL_I2S_Init+0x270>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e003      	b.n	8003ad0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d902      	bls.n	8003adc <HAL_I2S_Init+0x134>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2bff      	cmp	r3, #255	@ 0xff
 8003ada:	d907      	bls.n	8003aec <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	f043 0210 	orr.w	r2, r3, #16
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e08f      	b.n	8003c0c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	ea42 0103 	orr.w	r1, r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b0a:	f023 030f 	bic.w	r3, r3, #15
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6851      	ldr	r1, [r2, #4]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6892      	ldr	r2, [r2, #8]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68d2      	ldr	r2, [r2, #12]
 8003b1c:	4311      	orrs	r1, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6992      	ldr	r2, [r2, #24]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d161      	bne.n	8003bfc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a38      	ldr	r2, [pc, #224]	@ (8003c1c <HAL_I2S_Init+0x274>)
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a37      	ldr	r2, [pc, #220]	@ (8003c20 <HAL_I2S_Init+0x278>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_I2S_Init+0x1a4>
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_I2S_Init+0x27c>)
 8003b4a:	e001      	b.n	8003b50 <HAL_I2S_Init+0x1a8>
 8003b4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	4932      	ldr	r1, [pc, #200]	@ (8003c20 <HAL_I2S_Init+0x278>)
 8003b58:	428a      	cmp	r2, r1
 8003b5a:	d101      	bne.n	8003b60 <HAL_I2S_Init+0x1b8>
 8003b5c:	4a31      	ldr	r2, [pc, #196]	@ (8003c24 <HAL_I2S_Init+0x27c>)
 8003b5e:	e001      	b.n	8003b64 <HAL_I2S_Init+0x1bc>
 8003b60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b64:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b68:	f023 030f 	bic.w	r3, r3, #15
 8003b6c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <HAL_I2S_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_I2S_Init+0x1d4>
 8003b78:	4b2a      	ldr	r3, [pc, #168]	@ (8003c24 <HAL_I2S_Init+0x27c>)
 8003b7a:	e001      	b.n	8003b80 <HAL_I2S_Init+0x1d8>
 8003b7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b80:	2202      	movs	r2, #2
 8003b82:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a25      	ldr	r2, [pc, #148]	@ (8003c20 <HAL_I2S_Init+0x278>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2S_Init+0x1ea>
 8003b8e:	4b25      	ldr	r3, [pc, #148]	@ (8003c24 <HAL_I2S_Init+0x27c>)
 8003b90:	e001      	b.n	8003b96 <HAL_I2S_Init+0x1ee>
 8003b92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba2:	d003      	beq.n	8003bac <HAL_I2S_Init+0x204>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e001      	b.n	8003bb8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	897b      	ldrh	r3, [r7, #10]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003be4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0d      	ldr	r2, [pc, #52]	@ (8003c20 <HAL_I2S_Init+0x278>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2S_Init+0x24c>
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <HAL_I2S_Init+0x27c>)
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2S_Init+0x250>
 8003bf4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bf8:	897a      	ldrh	r2, [r7, #10]
 8003bfa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08003d1f 	.word	0x08003d1f
 8003c18:	cccccccd 	.word	0xcccccccd
 8003c1c:	08003e35 	.word	0x08003e35
 8003c20:	40003800 	.word	0x40003800
 8003c24:	40003400 	.word	0x40003400

08003c28 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ca8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffb8 	bl	8003c28 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	b292      	uxth	r2, r2
 8003cd4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10e      	bne.n	8003d16 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff93 	bl	8003c3c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d13a      	bne.n	8003db0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d109      	bne.n	8003d58 <I2S_IRQHandler+0x3a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d102      	bne.n	8003d58 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffb4 	bl	8003cc0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b40      	cmp	r3, #64	@ 0x40
 8003d60:	d126      	bne.n	8003db0 <I2S_IRQHandler+0x92>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d11f      	bne.n	8003db0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f043 0202 	orr.w	r2, r3, #2
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff50 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d136      	bne.n	8003e2a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d109      	bne.n	8003dda <I2S_IRQHandler+0xbc>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b80      	cmp	r3, #128	@ 0x80
 8003dd2:	d102      	bne.n	8003dda <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff45 	bl	8003c64 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d122      	bne.n	8003e2a <I2S_IRQHandler+0x10c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d11b      	bne.n	8003e2a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e00:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ff13 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a92      	ldr	r2, [pc, #584]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e4e:	4b92      	ldr	r3, [pc, #584]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e50:	e001      	b.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a8b      	ldr	r2, [pc, #556]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e6e:	e001      	b.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e80:	d004      	beq.n	8003e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 8099 	bne.w	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f925 	bl	80040f0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d107      	bne.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f9c8 	bl	8004250 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d13a      	bne.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d035      	beq.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ede:	4b6e      	ldr	r3, [pc, #440]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee0:	e001      	b.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ee2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4969      	ldr	r1, [pc, #420]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eee:	428b      	cmp	r3, r1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ef2:	4b69      	ldr	r3, [pc, #420]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef4:	e001      	b.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003efe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f0e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f10:	2300      	movs	r3, #0
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f043 0202 	orr.w	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff fe88 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	f040 80c3 	bne.w	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80bd 	beq.w	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f66:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a49      	ldr	r2, [pc, #292]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f72:	4b49      	ldr	r3, [pc, #292]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f74:	e001      	b.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4944      	ldr	r1, [pc, #272]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d101      	bne.n	8003f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f86:	4b44      	ldr	r3, [pc, #272]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f88:	e001      	b.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f8e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f92:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f94:	2300      	movs	r3, #0
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
 8003fa0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fe4a 	bl	8003c50 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fbc:	e089      	b.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d107      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8be 	bl	8004154 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8fd 	bl	80041ec <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b40      	cmp	r3, #64	@ 0x40
 8003ffa:	d12f      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02a      	beq.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004014:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1e      	ldr	r2, [pc, #120]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004022:	e001      	b.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4919      	ldr	r1, [pc, #100]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004030:	428b      	cmp	r3, r1
 8004032:	d101      	bne.n	8004038 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004034:	4b18      	ldr	r3, [pc, #96]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004036:	e001      	b.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004038:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004040:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fdfa 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0308 	and.w	r3, r3, #8
 8004062:	2b08      	cmp	r3, #8
 8004064:	d136      	bne.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d031      	beq.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4902      	ldr	r1, [pc, #8]	@ (8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408a:	428b      	cmp	r3, r1
 800408c:	d106      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800408e:	4b02      	ldr	r3, [pc, #8]	@ (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004090:	e006      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004092:	bf00      	nop
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400
 800409c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040a4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff fdc0 	bl	8003c50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040d0:	e000      	b.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d2:	bf00      	nop
}
 80040d4:	bf00      	nop
 80040d6:	3720      	adds	r7, #32
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fc:	1c99      	adds	r1, r3, #2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6251      	str	r1, [r2, #36]	@ 0x24
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004130:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ffc9 	bl	80040dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	1c99      	adds	r1, r3, #2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6251      	str	r1, [r2, #36]	@ 0x24
 8004166:	8819      	ldrh	r1, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x90>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <I2SEx_TxISR_I2SExt+0x22>
 8004172:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <I2SEx_TxISR_I2SExt+0x94>)
 8004174:	e001      	b.n	800417a <I2SEx_TxISR_I2SExt+0x26>
 8004176:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800417a:	460a      	mov	r2, r1
 800417c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d121      	bne.n	80041da <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a12      	ldr	r2, [pc, #72]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x90>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <I2SEx_TxISR_I2SExt+0x50>
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <I2SEx_TxISR_I2SExt+0x94>)
 80041a2:	e001      	b.n	80041a8 <I2SEx_TxISR_I2SExt+0x54>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	490d      	ldr	r1, [pc, #52]	@ (80041e4 <I2SEx_TxISR_I2SExt+0x90>)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d101      	bne.n	80041b8 <I2SEx_TxISR_I2SExt+0x64>
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <I2SEx_TxISR_I2SExt+0x94>)
 80041b6:	e001      	b.n	80041bc <I2SEx_TxISR_I2SExt+0x68>
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff81 	bl	80040dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40003800 	.word	0x40003800
 80041e8:	40003400 	.word	0x40003400

080041ec <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68d8      	ldr	r0, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	1c99      	adds	r1, r3, #2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004204:	b282      	uxth	r2, r0
 8004206:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d113      	bne.n	8004248 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800422e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff ff4a 	bl	80040dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x90>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <I2SEx_RxISR_I2SExt+0x16>
 8004262:	4b20      	ldr	r3, [pc, #128]	@ (80042e4 <I2SEx_RxISR_I2SExt+0x94>)
 8004264:	e001      	b.n	800426a <I2SEx_RxISR_I2SExt+0x1a>
 8004266:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800426a:	68d8      	ldr	r0, [r3, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	1c99      	adds	r1, r3, #2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004276:	b282      	uxth	r2, r0
 8004278:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d121      	bne.n	80042d6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a12      	ldr	r2, [pc, #72]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x90>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <I2SEx_RxISR_I2SExt+0x50>
 800429c:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <I2SEx_RxISR_I2SExt+0x94>)
 800429e:	e001      	b.n	80042a4 <I2SEx_RxISR_I2SExt+0x54>
 80042a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	490d      	ldr	r1, [pc, #52]	@ (80042e0 <I2SEx_RxISR_I2SExt+0x90>)
 80042ac:	428b      	cmp	r3, r1
 80042ae:	d101      	bne.n	80042b4 <I2SEx_RxISR_I2SExt+0x64>
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <I2SEx_RxISR_I2SExt+0x94>)
 80042b2:	e001      	b.n	80042b8 <I2SEx_RxISR_I2SExt+0x68>
 80042b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042bc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d106      	bne.n	80042d6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ff03 	bl	80040dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d6:	bf00      	nop
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40003800 	.word	0x40003800
 80042e4:	40003400 	.word	0x40003400

080042e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e267      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d075      	beq.n	80043f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004306:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00c      	beq.n	800432c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004312:	4b85      	ldr	r3, [pc, #532]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800431a:	2b08      	cmp	r3, #8
 800431c:	d112      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800431e:	4b82      	ldr	r3, [pc, #520]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432a:	d10b      	bne.n	8004344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432c:	4b7e      	ldr	r3, [pc, #504]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d05b      	beq.n	80043f0 <HAL_RCC_OscConfig+0x108>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d157      	bne.n	80043f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e242      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800434c:	d106      	bne.n	800435c <HAL_RCC_OscConfig+0x74>
 800434e:	4b76      	ldr	r3, [pc, #472]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a75      	ldr	r2, [pc, #468]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e01d      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004364:	d10c      	bne.n	8004380 <HAL_RCC_OscConfig+0x98>
 8004366:	4b70      	ldr	r3, [pc, #448]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a6f      	ldr	r2, [pc, #444]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800436c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	4b6d      	ldr	r3, [pc, #436]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6c      	ldr	r2, [pc, #432]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e00b      	b.n	8004398 <HAL_RCC_OscConfig+0xb0>
 8004380:	4b69      	ldr	r3, [pc, #420]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a68      	ldr	r2, [pc, #416]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4b66      	ldr	r3, [pc, #408]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a65      	ldr	r2, [pc, #404]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d013      	beq.n	80043c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc fd60 	bl	8000e64 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fc fd5c 	bl	8000e64 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e207      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0xc0>
 80043c6:	e014      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fc fd4c 	bl	8000e64 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fc fd48 	bl	8000e64 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	@ 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e1f3      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	4b51      	ldr	r3, [pc, #324]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0xe8>
 80043ee:	e000      	b.n	80043f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d063      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 030c 	and.w	r3, r3, #12
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440a:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004412:	2b08      	cmp	r3, #8
 8004414:	d11c      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004416:	4b44      	ldr	r3, [pc, #272]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d116      	bne.n	8004450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004422:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d001      	beq.n	800443a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e1c7      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800443a:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4937      	ldr	r1, [pc, #220]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	e03a      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004458:	4b34      	ldr	r3, [pc, #208]	@ (800452c <HAL_RCC_OscConfig+0x244>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fc fd01 	bl	8000e64 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004466:	f7fc fcfd 	bl	8000e64 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e1a8      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004478:	4b2b      	ldr	r3, [pc, #172]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b28      	ldr	r3, [pc, #160]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4925      	ldr	r1, [pc, #148]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
 8004498:	e015      	b.n	80044c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800449a:	4b24      	ldr	r3, [pc, #144]	@ (800452c <HAL_RCC_OscConfig+0x244>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fc fce0 	bl	8000e64 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a8:	f7fc fcdc 	bl	8000e64 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e187      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d036      	beq.n	8004540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044da:	4b15      	ldr	r3, [pc, #84]	@ (8004530 <HAL_RCC_OscConfig+0x248>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e0:	f7fc fcc0 	bl	8000e64 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e8:	f7fc fcbc 	bl	8000e64 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e167      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004528 <HAL_RCC_OscConfig+0x240>)
 80044fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0x200>
 8004506:	e01b      	b.n	8004540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004508:	4b09      	ldr	r3, [pc, #36]	@ (8004530 <HAL_RCC_OscConfig+0x248>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450e:	f7fc fca9 	bl	8000e64 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004514:	e00e      	b.n	8004534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004516:	f7fc fca5 	bl	8000e64 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d907      	bls.n	8004534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e150      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
 8004528:	40023800 	.word	0x40023800
 800452c:	42470000 	.word	0x42470000
 8004530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b88      	ldr	r3, [pc, #544]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ea      	bne.n	8004516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8097 	beq.w	800467c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b81      	ldr	r3, [pc, #516]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	4b7d      	ldr	r3, [pc, #500]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	4a7c      	ldr	r2, [pc, #496]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456c:	6413      	str	r3, [r2, #64]	@ 0x40
 800456e:	4b7a      	ldr	r3, [pc, #488]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004576:	60bb      	str	r3, [r7, #8]
 8004578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b77      	ldr	r3, [pc, #476]	@ (800475c <HAL_RCC_OscConfig+0x474>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d118      	bne.n	80045bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800458a:	4b74      	ldr	r3, [pc, #464]	@ (800475c <HAL_RCC_OscConfig+0x474>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a73      	ldr	r2, [pc, #460]	@ (800475c <HAL_RCC_OscConfig+0x474>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fc fc65 	bl	8000e64 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fc fc61 	bl	8000e64 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e10c      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b0:	4b6a      	ldr	r3, [pc, #424]	@ (800475c <HAL_RCC_OscConfig+0x474>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_OscConfig+0x2ea>
 80045c4:	4b64      	ldr	r3, [pc, #400]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c8:	4a63      	ldr	r2, [pc, #396]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d0:	e01c      	b.n	800460c <HAL_RCC_OscConfig+0x324>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCC_OscConfig+0x30c>
 80045da:	4b5f      	ldr	r3, [pc, #380]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	4a5e      	ldr	r2, [pc, #376]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f2:	e00b      	b.n	800460c <HAL_RCC_OscConfig+0x324>
 80045f4:	4b58      	ldr	r3, [pc, #352]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f8:	4a57      	ldr	r2, [pc, #348]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80045fa:	f023 0301 	bic.w	r3, r3, #1
 80045fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004600:	4b55      	ldr	r3, [pc, #340]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004604:	4a54      	ldr	r2, [pc, #336]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004606:	f023 0304 	bic.w	r3, r3, #4
 800460a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d015      	beq.n	8004640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fc fc26 	bl	8000e64 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fc fc22 	bl	8000e64 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0cb      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004632:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <HAL_RCC_OscConfig+0x334>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fc fc10 	bl	8000e64 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fc fc0c 	bl	8000e64 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0b5      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800465e:	4b3e      	ldr	r3, [pc, #248]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b39      	ldr	r3, [pc, #228]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	4a38      	ldr	r2, [pc, #224]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80a1 	beq.w	80047c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004686:	4b34      	ldr	r3, [pc, #208]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b08      	cmp	r3, #8
 8004690:	d05c      	beq.n	800474c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d141      	bne.n	800471e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469a:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_OscConfig+0x478>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fc fbe0 	bl	8000e64 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fc fbdc 	bl	8000e64 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e087      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	4b27      	ldr	r3, [pc, #156]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	3b01      	subs	r3, #1
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	491b      	ldr	r1, [pc, #108]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x478>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f6:	f7fc fbb5 	bl	8000e64 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fc fbb1 	bl	8000e64 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e05c      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004710:	4b11      	ldr	r3, [pc, #68]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x416>
 800471c:	e054      	b.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <HAL_RCC_OscConfig+0x478>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fc fb9e 	bl	8000e64 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fc fb9a 	bl	8000e64 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e045      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <HAL_RCC_OscConfig+0x470>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x444>
 800474a:	e03d      	b.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e038      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004764:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <HAL_RCC_OscConfig+0x4ec>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d028      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d121      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	429a      	cmp	r2, r3
 800478c:	d11a      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004794:	4013      	ands	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800479a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800

080047d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0cc      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ec:	4b68      	ldr	r3, [pc, #416]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d90c      	bls.n	8004814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b65      	ldr	r3, [pc, #404]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b63      	ldr	r3, [pc, #396]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b8      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d005      	beq.n	8004838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800482c:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a58      	ldr	r2, [pc, #352]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004844:	4b53      	ldr	r3, [pc, #332]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	4a52      	ldr	r2, [pc, #328]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800484e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004850:	4b50      	ldr	r3, [pc, #320]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	494d      	ldr	r1, [pc, #308]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d044      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	4b47      	ldr	r3, [pc, #284]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d119      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e07f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d003      	beq.n	8004896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004892:	2b03      	cmp	r3, #3
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004896:	4b3f      	ldr	r3, [pc, #252]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e06f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e067      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4934      	ldr	r1, [pc, #208]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c8:	f7fc facc 	bl	8000e64 <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fc fac8 	bl	8000e64 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e04f      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 020c 	and.w	r2, r3, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1eb      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048f8:	4b25      	ldr	r3, [pc, #148]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d20c      	bcs.n	8004920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b22      	ldr	r3, [pc, #136]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b20      	ldr	r3, [pc, #128]	@ (8004990 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e032      	b.n	8004986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d008      	beq.n	800493e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800492c:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4916      	ldr	r1, [pc, #88]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800494a:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	490e      	ldr	r1, [pc, #56]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800495e:	f000 f821 	bl	80049a4 <HAL_RCC_GetSysClockFreq>
 8004962:	4602      	mov	r2, r0
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	490a      	ldr	r1, [pc, #40]	@ (8004998 <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	5ccb      	ldrb	r3, [r1, r3]
 8004972:	fa22 f303 	lsr.w	r3, r2, r3
 8004976:	4a09      	ldr	r2, [pc, #36]	@ (800499c <HAL_RCC_ClockConfig+0x1c4>)
 8004978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800497a:	4b09      	ldr	r3, [pc, #36]	@ (80049a0 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7fc fa2c 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023c00 	.word	0x40023c00
 8004994:	40023800 	.word	0x40023800
 8004998:	08008c28 	.word	0x08008c28
 800499c:	20000000 	.word	0x20000000
 80049a0:	20000004 	.word	0x20000004

080049a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a8:	b094      	sub	sp, #80	@ 0x50
 80049aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049bc:	4b79      	ldr	r3, [pc, #484]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d00d      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x40>
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	f200 80e1 	bhi.w	8004b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x34>
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d003      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0x3a>
 80049d6:	e0db      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d8:	4b73      	ldr	r3, [pc, #460]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049dc:	e0db      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049de:	4b73      	ldr	r3, [pc, #460]	@ (8004bac <HAL_RCC_GetSysClockFreq+0x208>)
 80049e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049e2:	e0d8      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049e4:	4b6f      	ldr	r3, [pc, #444]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d063      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	099b      	lsrs	r3, r3, #6
 8004a00:	2200      	movs	r2, #0
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0e:	2300      	movs	r3, #0
 8004a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a16:	4622      	mov	r2, r4
 8004a18:	462b      	mov	r3, r5
 8004a1a:	f04f 0000 	mov.w	r0, #0
 8004a1e:	f04f 0100 	mov.w	r1, #0
 8004a22:	0159      	lsls	r1, r3, #5
 8004a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a28:	0150      	lsls	r0, r2, #5
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4621      	mov	r1, r4
 8004a30:	1a51      	subs	r1, r2, r1
 8004a32:	6139      	str	r1, [r7, #16]
 8004a34:	4629      	mov	r1, r5
 8004a36:	eb63 0301 	sbc.w	r3, r3, r1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a48:	4659      	mov	r1, fp
 8004a4a:	018b      	lsls	r3, r1, #6
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a52:	4651      	mov	r1, sl
 8004a54:	018a      	lsls	r2, r1, #6
 8004a56:	4651      	mov	r1, sl
 8004a58:	ebb2 0801 	subs.w	r8, r2, r1
 8004a5c:	4659      	mov	r1, fp
 8004a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a76:	4690      	mov	r8, r2
 8004a78:	4699      	mov	r9, r3
 8004a7a:	4623      	mov	r3, r4
 8004a7c:	eb18 0303 	adds.w	r3, r8, r3
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	462b      	mov	r3, r5
 8004a84:	eb49 0303 	adc.w	r3, r9, r3
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a96:	4629      	mov	r1, r5
 8004a98:	024b      	lsls	r3, r1, #9
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	024a      	lsls	r2, r1, #9
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aaa:	2200      	movs	r2, #0
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ab4:	f7fb fb88 	bl	80001c8 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4613      	mov	r3, r2
 8004abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ac0:	e058      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	4b38      	ldr	r3, [pc, #224]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	4611      	mov	r1, r2
 8004ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ad2:	623b      	str	r3, [r7, #32]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004adc:	4642      	mov	r2, r8
 8004ade:	464b      	mov	r3, r9
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	0159      	lsls	r1, r3, #5
 8004aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aee:	0150      	lsls	r0, r2, #5
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4641      	mov	r1, r8
 8004af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b14:	ebb2 040a 	subs.w	r4, r2, sl
 8004b18:	eb63 050b 	sbc.w	r5, r3, fp
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	00eb      	lsls	r3, r5, #3
 8004b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2a:	00e2      	lsls	r2, r4, #3
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	461d      	mov	r5, r3
 8004b30:	4643      	mov	r3, r8
 8004b32:	18e3      	adds	r3, r4, r3
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	464b      	mov	r3, r9
 8004b38:	eb45 0303 	adc.w	r3, r5, r3
 8004b3c:	607b      	str	r3, [r7, #4]
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	028b      	lsls	r3, r1, #10
 8004b4e:	4621      	mov	r1, r4
 8004b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b54:	4621      	mov	r1, r4
 8004b56:	028a      	lsls	r2, r1, #10
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b5e:	2200      	movs	r2, #0
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	61fa      	str	r2, [r7, #28]
 8004b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b68:	f7fb fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	3301      	adds	r3, #1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3750      	adds	r7, #80	@ 0x50
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400
 8004bac:	007a1200 	.word	0x007a1200

08004bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb4:	4b03      	ldr	r3, [pc, #12]	@ (8004bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000000 	.word	0x20000000

08004bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bcc:	f7ff fff0 	bl	8004bb0 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	@ (8004be8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0a9b      	lsrs	r3, r3, #10
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4903      	ldr	r1, [pc, #12]	@ (8004bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bde:	5ccb      	ldrb	r3, [r1, r3]
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	08008c38 	.word	0x08008c38

08004bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c18:	4b62      	ldr	r3, [pc, #392]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f7fc f921 	bl	8000e64 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fc f91d 	bl	8000e64 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0b0      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	4b5b      	ldr	r3, [pc, #364]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	019a      	lsls	r2, r3, #6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	071b      	lsls	r3, r3, #28
 8004c50:	4955      	ldr	r1, [pc, #340]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c58:	4b52      	ldr	r3, [pc, #328]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fc f901 	bl	8000e64 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fc f8fd 	bl	8000e64 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e090      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	4b4b      	ldr	r3, [pc, #300]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8083 	beq.w	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b44      	ldr	r3, [pc, #272]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	4a43      	ldr	r2, [pc, #268]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca2:	4b41      	ldr	r3, [pc, #260]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cae:	4b3f      	ldr	r3, [pc, #252]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fc f8d3 	bl	8000e64 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fc f8cf 	bl	8000e64 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e062      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd4:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce0:	4b31      	ldr	r3, [pc, #196]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d08:	4b29      	ldr	r3, [pc, #164]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d0e:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d14:	4a24      	ldr	r2, [pc, #144]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1a:	4b23      	ldr	r3, [pc, #140]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d114      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fc f89d 	bl	8000e64 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fc f899 	bl	8000e64 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e02a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b18      	ldr	r3, [pc, #96]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d72:	490d      	ldr	r1, [pc, #52]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	4905      	ldr	r1, [pc, #20]	@ (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	42470068 	.word	0x42470068
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42470e40 	.word	0x42470e40

08004db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d13f      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dd2:	4b24      	ldr	r3, [pc, #144]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dda:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d006      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004de8:	d12f      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dec:	617b      	str	r3, [r7, #20]
          break;
 8004dee:	e02f      	b.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004df0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dfc:	d108      	bne.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dfe:	4b19      	ldr	r3, [pc, #100]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e06:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	e007      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e26:	099b      	lsrs	r3, r3, #6
 8004e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	fb02 f303 	mul.w	r3, r2, r3
 8004e32:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3a:	0f1b      	lsrs	r3, r3, #28
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	617b      	str	r3, [r7, #20]
          break;
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
          break;
 8004e4e:	bf00      	nop
        }
      }
      break;
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e52:	bf00      	nop
    }
  }
  return frequency;
 8004e54:	697b      	ldr	r3, [r7, #20]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	00bb8000 	.word	0x00bb8000
 8004e6c:	007a1200 	.word	0x007a1200
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e07b      	b.n	8004f7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e96:	d009      	beq.n	8004eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	61da      	str	r2, [r3, #28]
 8004e9e:	e005      	b.n	8004eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fe72 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	ea42 0103 	orr.w	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	f003 0104 	and.w	r1, r3, #4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	f003 0210 	and.w	r2, r3, #16
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f86:	b084      	sub	sp, #16
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	f107 001c 	add.w	r0, r7, #28
 8004f94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d123      	bne.n	8004fe8 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d105      	bne.n	8004fdc <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f9dc 	bl	800539a <USB_CoreReset>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	73fb      	strb	r3, [r7, #15]
 8004fe6:	e01b      	b.n	8005020 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9d0 	bl	800539a <USB_CoreReset>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ffe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38
 8005012:	e005      	b.n	8005020 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005020:	7fbb      	ldrb	r3, [r7, #30]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d10b      	bne.n	800503e <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f043 0206 	orr.w	r2, r3, #6
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f043 0220 	orr.w	r2, r3, #32
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800504a:	b004      	add	sp, #16
 800504c:	4770      	bx	lr

0800504e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f023 0201 	bic.w	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d115      	bne.n	80050e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c0:	200a      	movs	r0, #10
 80050c2:	f7fb fedb 	bl	8000e7c <HAL_Delay>
      ms += 10U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	330a      	adds	r3, #10
 80050ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f956 	bl	800537e <USB_GetMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d01e      	beq.n	8005116 <USB_SetCurrentMode+0x84>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2bc7      	cmp	r3, #199	@ 0xc7
 80050dc:	d9f0      	bls.n	80050c0 <USB_SetCurrentMode+0x2e>
 80050de:	e01a      	b.n	8005116 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d115      	bne.n	8005112 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050f2:	200a      	movs	r0, #10
 80050f4:	f7fb fec2 	bl	8000e7c <HAL_Delay>
      ms += 10U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	330a      	adds	r3, #10
 80050fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f93d 	bl	800537e <USB_GetMode>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <USB_SetCurrentMode+0x84>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2bc7      	cmp	r3, #199	@ 0xc7
 800510e:	d9f0      	bls.n	80050f2 <USB_SetCurrentMode+0x60>
 8005110:	e001      	b.n	8005116 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e005      	b.n	8005122 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2bc8      	cmp	r3, #200	@ 0xc8
 800511a:	d101      	bne.n	8005120 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005144:	d901      	bls.n	800514a <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e01b      	b.n	8005182 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	daf2      	bge.n	8005138 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516e:	d901      	bls.n	8005174 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e006      	b.n	8005182 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b20      	cmp	r3, #32
 800517e:	d0f0      	beq.n	8005162 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800518e:	b480      	push	{r7}
 8005190:	b085      	sub	sp, #20
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051a6:	d901      	bls.n	80051ac <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e018      	b.n	80051de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	daf2      	bge.n	800519a <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2210      	movs	r2, #16
 80051bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ca:	d901      	bls.n	80051d0 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e006      	b.n	80051de <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d0f0      	beq.n	80051be <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b089      	sub	sp, #36	@ 0x24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	4611      	mov	r1, r2
 80051f6:	461a      	mov	r2, r3
 80051f8:	460b      	mov	r3, r1
 80051fa:	71fb      	strb	r3, [r7, #7]
 80051fc:	4613      	mov	r3, r2
 80051fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005208:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800520c:	2b00      	cmp	r3, #0
 800520e:	d123      	bne.n	8005258 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005210:	88bb      	ldrh	r3, [r7, #4]
 8005212:	3303      	adds	r3, #3
 8005214:	089b      	lsrs	r3, r3, #2
 8005216:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e018      	b.n	8005250 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	031a      	lsls	r2, r3, #12
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	4413      	add	r3, r2
 8005226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522a:	461a      	mov	r2, r3
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3301      	adds	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3301      	adds	r3, #1
 8005242:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	3301      	adds	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	3301      	adds	r3, #1
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	429a      	cmp	r2, r3
 8005256:	d3e2      	bcc.n	800521e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	@ 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005266:	b480      	push	{r7}
 8005268:	b08b      	sub	sp, #44	@ 0x2c
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	4613      	mov	r3, r2
 8005272:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	089b      	lsrs	r3, r3, #2
 8005280:	b29b      	uxth	r3, r3
 8005282:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005284:	88fb      	ldrh	r3, [r7, #6]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800528c:	2300      	movs	r3, #0
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	e014      	b.n	80052bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	601a      	str	r2, [r3, #0]
    pDest++;
 800529e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a0:	3301      	adds	r3, #1
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	3301      	adds	r3, #1
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	3301      	adds	r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	3301      	adds	r3, #1
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	3301      	adds	r3, #1
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	6a3a      	ldr	r2, [r7, #32]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3e6      	bcc.n	8005292 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052c4:	8bfb      	ldrh	r3, [r7, #30]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d4:	461a      	mov	r2, r3
 80052d6:	f107 0310 	add.w	r3, r7, #16
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	701a      	strb	r2, [r3, #0]
      i++;
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	3301      	adds	r3, #1
 80052f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052fc:	8bfb      	ldrh	r3, [r7, #30]
 80052fe:	3b01      	subs	r3, #1
 8005300:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005302:	8bfb      	ldrh	r3, [r7, #30]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ea      	bne.n	80052de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800530a:	4618      	mov	r0, r3
 800530c:	372c      	adds	r7, #44	@ 0x2c
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4013      	ands	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800535c:	78fb      	ldrb	r3, [r7, #3]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005370:	68bb      	ldr	r3, [r7, #8]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0301 	and.w	r3, r3, #1
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b2:	d901      	bls.n	80053b8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e01b      	b.n	80053f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	daf2      	bge.n	80053a6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f043 0201 	orr.w	r2, r3, #1
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053dc:	d901      	bls.n	80053e2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e006      	b.n	80053f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d0f0      	beq.n	80053d0 <USB_CoreReset+0x36>

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053fc:	b084      	sub	sp, #16
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800540a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005426:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d119      	bne.n	8005486 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10a      	bne.n	8005470 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e014      	b.n	800549a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800547e:	f023 0304 	bic.w	r3, r3, #4
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e009      	b.n	800549a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800549a:	2110      	movs	r1, #16
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fe44 	bl	800512a <USB_FlushTxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fe6e 	bl	800518e <USB_FlushRxFifo>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e015      	b.n	80054ee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ce:	461a      	mov	r2, r3
 80054d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054d4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054e2:	461a      	mov	r2, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3301      	adds	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054f2:	461a      	mov	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d3e3      	bcc.n	80054c2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005506:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <USB_HostInit+0x170>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10b      	bne.n	8005528 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005516:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a15      	ldr	r2, [pc, #84]	@ (8005570 <USB_HostInit+0x174>)
 800551c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a14      	ldr	r2, [pc, #80]	@ (8005574 <USB_HostInit+0x178>)
 8005522:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005526:	e009      	b.n	800553c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2280      	movs	r2, #128	@ 0x80
 800552c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <USB_HostInit+0x17c>)
 8005532:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a11      	ldr	r2, [pc, #68]	@ (800557c <USB_HostInit+0x180>)
 8005538:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005540:	2b00      	cmp	r3, #0
 8005542:	d105      	bne.n	8005550 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <USB_HostInit+0x184>)
 8005556:	4313      	orrs	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005568:	b004      	add	sp, #16
 800556a:	4770      	bx	lr
 800556c:	40040000 	.word	0x40040000
 8005570:	01000200 	.word	0x01000200
 8005574:	00e00300 	.word	0x00e00300
 8005578:	00600080 	.word	0x00600080
 800557c:	004000e0 	.word	0x004000e0
 8005580:	a3200008 	.word	0xa3200008

08005584 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055cc:	461a      	mov	r2, r3
 80055ce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80055d2:	6053      	str	r3, [r2, #4]
 80055d4:	e00c      	b.n	80055f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d107      	bne.n	80055ec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055e2:	461a      	mov	r2, r3
 80055e4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	e001      	b.n	80055f0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800561e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800562c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800562e:	2064      	movs	r0, #100	@ 0x64
 8005630:	f7fb fc24 	bl	8000e7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800563c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005640:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005642:	200a      	movs	r0, #10
 8005644:	f7fb fc1a 	bl	8000e7c <HAL_Delay>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
 800565a:	460b      	mov	r3, r1
 800565c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005676:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <USB_DriveVbus+0x44>
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d106      	bne.n	8005696 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005694:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a0:	d109      	bne.n	80056b6 <USB_DriveVbus+0x64>
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056b4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0c5b      	lsrs	r3, r3, #17
 80056e2:	f003 0303 	and.w	r3, r3, #3
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	b29b      	uxth	r3, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	4603      	mov	r3, r0
 8005724:	70fb      	strb	r3, [r7, #3]
 8005726:	460b      	mov	r3, r1
 8005728:	70bb      	strb	r3, [r7, #2]
 800572a:	4613      	mov	r3, r2
 800572c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005742:	461a      	mov	r2, r3
 8005744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005748:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800574a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800574e:	2b03      	cmp	r3, #3
 8005750:	d87c      	bhi.n	800584c <USB_HC_Init+0x138>
 8005752:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <USB_HC_Init+0x44>)
 8005754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005758:	08005769 	.word	0x08005769
 800575c:	0800580f 	.word	0x0800580f
 8005760:	08005769 	.word	0x08005769
 8005764:	080057d1 	.word	0x080057d1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005774:	461a      	mov	r2, r3
 8005776:	f240 439d 	movw	r3, #1181	@ 0x49d
 800577a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800577c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da10      	bge.n	80057a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	440a      	add	r2, r1
 800579a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800579e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057a2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80057a4:	e055      	b.n	8005852 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a6f      	ldr	r2, [pc, #444]	@ (8005968 <USB_HC_Init+0x254>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d151      	bne.n	8005852 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057cc:	60d3      	str	r3, [r2, #12]
      break;
 80057ce:	e040      	b.n	8005852 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057d0:	78fb      	ldrb	r3, [r7, #3]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057dc:	461a      	mov	r2, r3
 80057de:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da34      	bge.n	8005856 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	440a      	add	r2, r1
 8005802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800580c:	e023      	b.n	8005856 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800581a:	461a      	mov	r2, r3
 800581c:	f240 2325 	movw	r3, #549	@ 0x225
 8005820:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005822:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005826:	2b00      	cmp	r3, #0
 8005828:	da17      	bge.n	800585a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	440a      	add	r2, r1
 8005840:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005844:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005848:	60d3      	str	r3, [r2, #12]
      }
      break;
 800584a:	e006      	b.n	800585a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	77fb      	strb	r3, [r7, #31]
      break;
 8005850:	e004      	b.n	800585c <USB_HC_Init+0x148>
      break;
 8005852:	bf00      	nop
 8005854:	e002      	b.n	800585c <USB_HC_Init+0x148>
      break;
 8005856:	bf00      	nop
 8005858:	e000      	b.n	800585c <USB_HC_Init+0x148>
      break;
 800585a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005868:	461a      	mov	r2, r3
 800586a:	2300      	movs	r3, #0
 800586c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4413      	add	r3, r2
 8005876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	440a      	add	r2, r1
 8005884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	2101      	movs	r1, #1
 800589e:	fa01 f303 	lsl.w	r3, r1, r3
 80058a2:	6939      	ldr	r1, [r7, #16]
 80058a4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80058a8:	4313      	orrs	r3, r2
 80058aa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da03      	bge.n	80058c8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e001      	b.n	80058cc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fef9 	bl	80056c4 <USB_GetHostSpeed>
 80058d2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d106      	bne.n	80058ea <USB_HC_Init+0x1d6>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d003      	beq.n	80058ea <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e001      	b.n	80058ee <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058ee:	787b      	ldrb	r3, [r7, #1]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058f6:	78bb      	ldrb	r3, [r7, #2]
 80058f8:	02db      	lsls	r3, r3, #11
 80058fa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058fe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005900:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005904:	049b      	lsls	r3, r3, #18
 8005906:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800590a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800590c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800590e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005912:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	431a      	orrs	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800591c:	78fa      	ldrb	r2, [r7, #3]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	440a      	add	r2, r1
 8005924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005928:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800592c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800592e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005932:	2b03      	cmp	r3, #3
 8005934:	d003      	beq.n	800593e <USB_HC_Init+0x22a>
 8005936:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d10f      	bne.n	800595e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	0151      	lsls	r1, r2, #5
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	440a      	add	r2, r1
 8005954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800595c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800595e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40040000 	.word	0x40040000

0800596c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08c      	sub	sp, #48	@ 0x30
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005988:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b04 <USB_HC_StartXfer+0x198>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d12f      	bne.n	80059f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d11c      	bne.n	80059d2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	7c9b      	ldrb	r3, [r3, #18]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d003      	beq.n	80059a8 <USB_HC_StartXfer+0x3c>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	7c9b      	ldrb	r3, [r3, #18]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d124      	bne.n	80059f2 <USB_HC_StartXfer+0x86>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	799b      	ldrb	r3, [r3, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d120      	bne.n	80059f2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ce:	60d3      	str	r3, [r2, #12]
 80059d0:	e00f      	b.n	80059f2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	791b      	ldrb	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <USB_HC_StartXfer+0x86>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	795b      	ldrb	r3, [r3, #5]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	4619      	mov	r1, r3
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fb6b 	bl	80060c4 <USB_DoPing>
        return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e232      	b.n	8005e58 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	799b      	ldrb	r3, [r3, #6]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d158      	bne.n	8005aac <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059fa:	2301      	movs	r3, #1
 80059fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	78db      	ldrb	r3, [r3, #3]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d007      	beq.n	8005a16 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	8a92      	ldrh	r2, [r2, #20]
 8005a0c:	fb03 f202 	mul.w	r2, r3, r2
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	61da      	str	r2, [r3, #28]
 8005a14:	e07c      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	7c9b      	ldrb	r3, [r3, #18]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d130      	bne.n	8005a80 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	2bbc      	cmp	r3, #188	@ 0xbc
 8005a24:	d918      	bls.n	8005a58 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	8a9b      	ldrh	r3, [r3, #20]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d003      	beq.n	8005a48 <USB_HC_StartXfer+0xdc>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d103      	bne.n	8005a50 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e05f      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2201      	movs	r2, #1
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	e05b      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d007      	beq.n	8005a78 <USB_HC_StartXfer+0x10c>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d003      	beq.n	8005a78 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2204      	movs	r2, #4
 8005a74:	60da      	str	r2, [r3, #12]
 8005a76:	e04b      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	60da      	str	r2, [r3, #12]
 8005a7e:	e047      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d10d      	bne.n	8005aa2 <USB_HC_StartXfer+0x136>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	8a92      	ldrh	r2, [r2, #20]
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d907      	bls.n	8005aa2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	8a92      	ldrh	r2, [r2, #20]
 8005a98:	fb03 f202 	mul.w	r2, r3, r2
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	61da      	str	r2, [r3, #28]
 8005aa0:	e036      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	61da      	str	r2, [r3, #28]
 8005aaa:	e031      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d018      	beq.n	8005ae6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	8a92      	ldrh	r2, [r2, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	8a92      	ldrh	r2, [r2, #20]
 8005ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005aca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005acc:	8b7b      	ldrh	r3, [r7, #26]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d90b      	bls.n	8005aea <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	8a92      	ldrh	r2, [r2, #20]
 8005adc:	fb03 f202 	mul.w	r2, r3, r2
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61da      	str	r2, [r3, #28]
 8005ae4:	e001      	b.n	8005aea <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	78db      	ldrb	r3, [r3, #3]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005af2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	8a92      	ldrh	r2, [r2, #20]
 8005af8:	fb03 f202 	mul.w	r2, r3, r2
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61da      	str	r2, [r3, #28]
 8005b00:	e006      	b.n	8005b10 <USB_HC_StartXfer+0x1a4>
 8005b02:	bf00      	nop
 8005b04:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b1a:	04d9      	lsls	r1, r3, #19
 8005b1c:	4ba3      	ldr	r3, [pc, #652]	@ (8005dac <USB_HC_StartXfer+0x440>)
 8005b1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	7d9b      	ldrb	r3, [r3, #22]
 8005b26:	075b      	lsls	r3, r3, #29
 8005b28:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b2c:	69f9      	ldr	r1, [r7, #28]
 8005b2e:	0148      	lsls	r0, r1, #5
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	4401      	add	r1, r0
 8005b34:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b3c:	79fb      	ldrb	r3, [r7, #7]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	6999      	ldr	r1, [r3, #24]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	460a      	mov	r2, r1
 8005b54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf0c      	ite	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	2300      	movne	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b88:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	7e7b      	ldrb	r3, [r7, #25]
 8005b9e:	075b      	lsls	r3, r3, #29
 8005ba0:	69f9      	ldr	r1, [r7, #28]
 8005ba2:	0148      	lsls	r0, r1, #5
 8005ba4:	6a39      	ldr	r1, [r7, #32]
 8005ba6:	4401      	add	r1, r0
 8005ba8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	799b      	ldrb	r3, [r3, #6]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80c3 	bne.w	8005d40 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	7c5b      	ldrb	r3, [r3, #17]
 8005bbe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bd6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bf2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	79db      	ldrb	r3, [r3, #7]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d123      	bne.n	8005c48 <USB_HC_StartXfer+0x2dc>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	78db      	ldrb	r3, [r3, #3]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d11f      	bne.n	8005c48 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c26:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	0151      	lsls	r1, r2, #5
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	440a      	add	r2, r1
 8005c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c46:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	7c9b      	ldrb	r3, [r3, #18]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d003      	beq.n	8005c58 <USB_HC_StartXfer+0x2ec>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	7c9b      	ldrb	r3, [r3, #18]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d117      	bne.n	8005c88 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d113      	bne.n	8005c88 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	78db      	ldrb	r3, [r3, #3]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10f      	bne.n	8005c88 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c86:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	7c9b      	ldrb	r3, [r3, #18]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d162      	bne.n	8005d56 <USB_HC_StartXfer+0x3ea>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	78db      	ldrb	r3, [r3, #3]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d15e      	bne.n	8005d56 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d858      	bhi.n	8005d54 <USB_HC_StartXfer+0x3e8>
 8005ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca8 <USB_HC_StartXfer+0x33c>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005cdb 	.word	0x08005cdb
 8005cb0:	08005cfd 	.word	0x08005cfd
 8005cb4:	08005d1f 	.word	0x08005d1f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	6a3a      	ldr	r2, [r7, #32]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd6:	6053      	str	r3, [r2, #4]
          break;
 8005cd8:	e03d      	b.n	8005d56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	6a3a      	ldr	r2, [r7, #32]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cf4:	f043 030e 	orr.w	r3, r3, #14
 8005cf8:	6053      	str	r3, [r2, #4]
          break;
 8005cfa:	e02c      	b.n	8005d56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d1a:	6053      	str	r3, [r2, #4]
          break;
 8005d1c:	e01b      	b.n	8005d56 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	69fa      	ldr	r2, [r7, #28]
 8005d2e:	0151      	lsls	r1, r2, #5
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	440a      	add	r2, r1
 8005d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d3c:	6053      	str	r3, [r2, #4]
          break;
 8005d3e:	e00a      	b.n	8005d56 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6053      	str	r3, [r2, #4]
 8005d52:	e000      	b.n	8005d56 <USB_HC_StartXfer+0x3ea>
          break;
 8005d54:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d6c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	e003      	b.n	8005d88 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d86:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d8e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e055      	b.n	8005e58 <USB_HC_StartXfer+0x4ec>
 8005dac:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d14e      	bne.n	8005e56 <USB_HC_StartXfer+0x4ea>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d04a      	beq.n	8005e56 <USB_HC_StartXfer+0x4ea>
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	79db      	ldrb	r3, [r3, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d146      	bne.n	8005e56 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	7c9b      	ldrb	r3, [r3, #18]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d831      	bhi.n	8005e34 <USB_HC_StartXfer+0x4c8>
 8005dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd8 <USB_HC_StartXfer+0x46c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005de9 	.word	0x08005de9
 8005de4:	08005e0d 	.word	0x08005e0d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	3303      	adds	r3, #3
 8005dee:	089b      	lsrs	r3, r3, #2
 8005df0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005df2:	8afa      	ldrh	r2, [r7, #22]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d91c      	bls.n	8005e38 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f043 0220 	orr.w	r2, r3, #32
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e0a:	e015      	b.n	8005e38 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	3303      	adds	r3, #3
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e16:	8afa      	ldrh	r2, [r7, #22]
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d90a      	bls.n	8005e3c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e32:	e003      	b.n	8005e3c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005e34:	bf00      	nop
 8005e36:	e002      	b.n	8005e3e <USB_HC_StartXfer+0x4d2>
        break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <USB_HC_StartXfer+0x4d2>
        break;
 8005e3c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6999      	ldr	r1, [r3, #24]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	785a      	ldrb	r2, [r3, #1]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	9000      	str	r0, [sp, #0]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff f9ca 	bl	80051ea <USB_WritePacket>
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3728      	adds	r7, #40	@ 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	b29b      	uxth	r3, r3
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b089      	sub	sp, #36	@ 0x24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e92:	78fb      	ldrb	r3, [r7, #3]
 8005e94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0c9b      	lsrs	r3, r3, #18
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	0fdb      	lsrs	r3, r3, #31
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	0fdb      	lsrs	r3, r3, #31
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d10d      	bne.n	8005f04 <USB_HC_Halt+0x82>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <USB_HC_Halt+0x82>
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d002      	beq.n	8005f00 <USB_HC_Halt+0x7e>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d101      	bne.n	8005f04 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	e0d8      	b.n	80060b6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <USB_HC_Halt+0x8e>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d173      	bne.n	8005ff8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f2e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d14a      	bne.n	8005fd2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d133      	bne.n	8005fb0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f66:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f86:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f94:	d82e      	bhi.n	8005ff4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fac:	d0ec      	beq.n	8005f88 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fae:	e081      	b.n	80060b4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fd0:	e070      	b.n	80060b4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ff2:	e05f      	b.n	80060b4 <USB_HC_Halt+0x232>
            break;
 8005ff4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ff6:	e05d      	b.n	80060b4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	440a      	add	r2, r1
 800600e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006012:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006016:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d133      	bne.n	8006090 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	0151      	lsls	r1, r2, #5
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	440a      	add	r2, r1
 800603e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006046:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	440a      	add	r2, r1
 800605e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006062:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006066:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3301      	adds	r3, #1
 800606c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006074:	d81d      	bhi.n	80060b2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800608c:	d0ec      	beq.n	8006068 <USB_HC_Halt+0x1e6>
 800608e:	e011      	b.n	80060b4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e000      	b.n	80060b4 <USB_HC_Halt+0x232>
          break;
 80060b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3724      	adds	r7, #36	@ 0x24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060d8:	2301      	movs	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	04da      	lsls	r2, r3, #19
 80060e0:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <USB_DoPing+0x74>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800610c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006114:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006122:	461a      	mov	r2, r3
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	1ff80000 	.word	0x1ff80000

0800613c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fe ff8d 	bl	8005070 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006156:	2110      	movs	r1, #16
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fe ffe6 	bl	800512a <USB_FlushTxFifo>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f810 	bl	800518e <USB_FlushRxFifo>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006178:	2300      	movs	r3, #0
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e01f      	b.n	80061be <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006194:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800619c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061b2:	461a      	mov	r2, r3
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3301      	adds	r3, #1
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b0f      	cmp	r3, #15
 80061c2:	d9dc      	bls.n	800617e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061c4:	2300      	movs	r3, #0
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	e034      	b.n	8006234 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006210:	d80c      	bhi.n	800622c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006228:	d0ec      	beq.n	8006204 <USB_StopHost+0xc8>
 800622a:	e000      	b.n	800622e <USB_StopHost+0xf2>
        break;
 800622c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3301      	adds	r3, #1
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	d9c7      	bls.n	80061ca <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006240:	461a      	mov	r2, r3
 8006242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006246:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800624e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fe fefc 	bl	800504e <USB_EnableGlobalInt>

  return ret;
 8006256:	7ffb      	ldrb	r3, [r7, #31]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b089      	sub	sp, #36	@ 0x24
 8006264:	af04      	add	r7, sp, #16
 8006266:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006268:	2301      	movs	r3, #1
 800626a:	2202      	movs	r2, #2
 800626c:	2102      	movs	r1, #2
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fc85 	bl	8006b7e <USBH_FindInterface>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	2bff      	cmp	r3, #255	@ 0xff
 800627c:	d002      	beq.n	8006284 <USBH_CDC_InterfaceInit+0x24>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d901      	bls.n	8006288 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006284:	2302      	movs	r3, #2
 8006286:	e13d      	b.n	8006504 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fc5a 	bl	8006b46 <USBH_SelectInterface>
 8006292:	4603      	mov	r3, r0
 8006294:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800629c:	2302      	movs	r3, #2
 800629e:	e131      	b.n	8006504 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80062a6:	2050      	movs	r0, #80	@ 0x50
 80062a8:	f002 fb64 	bl	8008974 <malloc>
 80062ac:	4603      	mov	r3, r0
 80062ae:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062c0:	2302      	movs	r3, #2
 80062c2:	e11f      	b.n	8006504 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062c4:	2250      	movs	r2, #80	@ 0x50
 80062c6:	2100      	movs	r1, #0
 80062c8:	68b8      	ldr	r0, [r7, #8]
 80062ca:	f002 fc11 	bl	8008af0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	211a      	movs	r1, #26
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	4413      	add	r3, r2
 80062da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da15      	bge.n	8006312 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	211a      	movs	r1, #26
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062f6:	781a      	ldrb	r2, [r3, #0]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	211a      	movs	r1, #26
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800630c:	881a      	ldrh	r2, [r3, #0]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 ffbe 	bl	800829a <USBH_AllocPipe>
 800631e:	4603      	mov	r3, r0
 8006320:	461a      	mov	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	7819      	ldrb	r1, [r3, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	7858      	ldrb	r0, [r3, #1]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	8952      	ldrh	r2, [r2, #10]
 800633e:	9202      	str	r2, [sp, #8]
 8006340:	2203      	movs	r2, #3
 8006342:	9201      	str	r2, [sp, #4]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	4623      	mov	r3, r4
 8006348:	4602      	mov	r2, r0
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 ff76 	bl	800823c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2200      	movs	r2, #0
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 fa85 	bl	8008868 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	210a      	movs	r1, #10
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fc0a 	bl	8006b7e <USBH_FindInterface>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	2bff      	cmp	r3, #255	@ 0xff
 8006372:	d002      	beq.n	800637a <USBH_CDC_InterfaceInit+0x11a>
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d901      	bls.n	800637e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800637a:	2302      	movs	r3, #2
 800637c:	e0c2      	b.n	8006504 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	211a      	movs	r1, #26
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	4413      	add	r3, r2
 800638a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b25b      	sxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	da16      	bge.n	80063c4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	211a      	movs	r1, #26
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	211a      	movs	r1, #26
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063bc:	881a      	ldrh	r2, [r3, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	835a      	strh	r2, [r3, #26]
 80063c2:	e015      	b.n	80063f0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	211a      	movs	r1, #26
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	211a      	movs	r1, #26
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063ea:	881a      	ldrh	r2, [r3, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	211a      	movs	r1, #26
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b25b      	sxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	da16      	bge.n	8006436 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	211a      	movs	r1, #26
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	4413      	add	r3, r2
 8006414:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006418:	781a      	ldrb	r2, [r3, #0]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	211a      	movs	r1, #26
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	4413      	add	r3, r2
 800642a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800642e:	881a      	ldrh	r2, [r3, #0]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	835a      	strh	r2, [r3, #26]
 8006434:	e015      	b.n	8006462 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	211a      	movs	r1, #26
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	211a      	movs	r1, #26
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	4413      	add	r3, r2
 8006458:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800645c:	881a      	ldrh	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7b9b      	ldrb	r3, [r3, #14]
 8006466:	4619      	mov	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 ff16 	bl	800829a <USBH_AllocPipe>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	7bdb      	ldrb	r3, [r3, #15]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 ff0c 	bl	800829a <USBH_AllocPipe>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	7b59      	ldrb	r1, [r3, #13]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	7b98      	ldrb	r0, [r3, #14]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	8b12      	ldrh	r2, [r2, #24]
 80064a2:	9202      	str	r2, [sp, #8]
 80064a4:	2202      	movs	r2, #2
 80064a6:	9201      	str	r2, [sp, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	4623      	mov	r3, r4
 80064ac:	4602      	mov	r2, r0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fec4 	bl	800823c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	7b19      	ldrb	r1, [r3, #12]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	7bd8      	ldrb	r0, [r3, #15]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	8b52      	ldrh	r2, [r2, #26]
 80064cc:	9202      	str	r2, [sp, #8]
 80064ce:	2202      	movs	r2, #2
 80064d0:	9201      	str	r2, [sp, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4623      	mov	r3, r4
 80064d6:	4602      	mov	r2, r0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 feaf 	bl	800823c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	7b5b      	ldrb	r3, [r3, #13]
 80064ea:	2200      	movs	r2, #0
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f002 f9ba 	bl	8008868 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	7b1b      	ldrb	r3, [r3, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f002 f9b3 	bl	8008868 <USBH_LL_SetToggle>

  return USBH_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bd90      	pop	{r4, r7, pc}

0800650c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fea4 	bl	800827a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fecf 	bl	80082dc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7b1b      	ldrb	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	7b1b      	ldrb	r3, [r3, #12]
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fe91 	bl	800827a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7b1b      	ldrb	r3, [r3, #12]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f001 febc 	bl	80082dc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	7b5b      	ldrb	r3, [r3, #13]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	7b5b      	ldrb	r3, [r3, #13]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fe7e 	bl	800827a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	7b5b      	ldrb	r3, [r3, #13]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fea9 	bl	80082dc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f002 f9ed 	bl	8008984 <free>
    phost->pActiveClass->pData = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065b0:	2200      	movs	r2, #0
 80065b2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b084      	sub	sp, #16
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3340      	adds	r3, #64	@ 0x40
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8b1 	bl	800673e <GetLineCoding>
 80065dc:	4603      	mov	r3, r0
 80065de:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065e0:	7afb      	ldrb	r3, [r7, #11]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065ec:	2102      	movs	r1, #2
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065f2:	7afb      	ldrb	r3, [r7, #11]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006604:	2301      	movs	r3, #1
 8006606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800661c:	2b04      	cmp	r3, #4
 800661e:	d877      	bhi.n	8006710 <USBH_CDC_Process+0x114>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <USBH_CDC_Process+0x2c>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	0800663d 	.word	0x0800663d
 800662c:	08006643 	.word	0x08006643
 8006630:	08006673 	.word	0x08006673
 8006634:	080066e7 	.word	0x080066e7
 8006638:	080066f5 	.word	0x080066f5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]
      break;
 8006640:	e06d      	b.n	800671e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006646:	4619      	mov	r1, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f897 	bl	800677c <SetLineCoding>
 800664e:	4603      	mov	r3, r0
 8006650:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d104      	bne.n	8006662 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006660:	e058      	b.n	8006714 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d055      	beq.n	8006714 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	2204      	movs	r2, #4
 800666c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006670:	e050      	b.n	8006714 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	3340      	adds	r3, #64	@ 0x40
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f860 	bl	800673e <GetLineCoding>
 800667e:	4603      	mov	r3, r0
 8006680:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d126      	bne.n	80066d6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669a:	791b      	ldrb	r3, [r3, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	d13b      	bne.n	8006718 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066aa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d133      	bne.n	8006718 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066bc:	429a      	cmp	r2, r3
 80066be:	d12b      	bne.n	8006718 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066c8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d124      	bne.n	8006718 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f958 	bl	8006984 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066d4:	e020      	b.n	8006718 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d01d      	beq.n	8006718 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2204      	movs	r2, #4
 80066e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066e4:	e018      	b.n	8006718 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f867 	bl	80067ba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8da 	bl	80068a6 <CDC_ProcessReception>
      break;
 80066f2:	e014      	b.n	800671e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f001 f81a 	bl	8007730 <USBH_ClrFeature>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006700:	7bbb      	ldrb	r3, [r7, #14]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800670e:	e005      	b.n	800671c <USBH_CDC_Process+0x120>

    default:
      break;
 8006710:	bf00      	nop
 8006712:	e004      	b.n	800671e <USBH_CDC_Process+0x122>
      break;
 8006714:	bf00      	nop
 8006716:	e002      	b.n	800671e <USBH_CDC_Process+0x122>
      break;
 8006718:	bf00      	nop
 800671a:	e000      	b.n	800671e <USBH_CDC_Process+0x122>
      break;
 800671c:	bf00      	nop

  }

  return status;
 800671e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	22a1      	movs	r2, #161	@ 0xa1
 800674c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2221      	movs	r2, #33	@ 0x21
 8006752:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2207      	movs	r2, #7
 8006764:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2207      	movs	r2, #7
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fb14 	bl	8007d9a <USBH_CtlReq>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2221      	movs	r2, #33	@ 0x21
 800678a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2220      	movs	r2, #32
 8006790:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2207      	movs	r2, #7
 80067a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2207      	movs	r2, #7
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 faf5 	bl	8007d9a <USBH_CtlReq>
 80067b0:	4603      	mov	r3, r0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b086      	sub	sp, #24
 80067be:	af02      	add	r7, sp, #8
 80067c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d002      	beq.n	80067e0 <CDC_ProcessTransmission+0x26>
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d023      	beq.n	8006826 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067de:	e05e      	b.n	800689e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	8b12      	ldrh	r2, [r2, #24]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d90b      	bls.n	8006804 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	69d9      	ldr	r1, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8b1a      	ldrh	r2, [r3, #24]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	7b5b      	ldrb	r3, [r3, #13]
 80067f8:	2001      	movs	r0, #1
 80067fa:	9000      	str	r0, [sp, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fcda 	bl	80081b6 <USBH_BulkSendData>
 8006802:	e00b      	b.n	800681c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	7b5b      	ldrb	r3, [r3, #13]
 8006812:	2001      	movs	r0, #1
 8006814:	9000      	str	r0, [sp, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fccd 	bl	80081b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006824:	e03b      	b.n	800689e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	7b5b      	ldrb	r3, [r3, #13]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fff1 	bl	8008814 <USBH_LL_GetURBState>
 8006832:	4603      	mov	r3, r0
 8006834:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d128      	bne.n	800688e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	8b12      	ldrh	r2, [r2, #24]
 8006844:	4293      	cmp	r3, r2
 8006846:	d90e      	bls.n	8006866 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	8b12      	ldrh	r2, [r2, #24]
 8006850:	1a9a      	subs	r2, r3, r2
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	8b12      	ldrh	r2, [r2, #24]
 800685e:	441a      	add	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	61da      	str	r2, [r3, #28]
 8006864:	e002      	b.n	800686c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800687c:	e00e      	b.n	800689c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f868 	bl	800695c <USBH_CDC_TransmitCallback>
      break;
 800688c:	e006      	b.n	800689c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d103      	bne.n	800689c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800689c:	bf00      	nop
  }
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d002      	beq.n	80068cc <CDC_ProcessReception+0x26>
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d00e      	beq.n	80068e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068ca:	e043      	b.n	8006954 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6a19      	ldr	r1, [r3, #32]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	8b5a      	ldrh	r2, [r3, #26]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	7b1b      	ldrb	r3, [r3, #12]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fc91 	bl	8008200 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2204      	movs	r2, #4
 80068e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068e6:	e035      	b.n	8006954 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f001 ff90 	bl	8008814 <USBH_LL_GetURBState>
 80068f4:	4603      	mov	r3, r0
 80068f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068f8:	7cfb      	ldrb	r3, [r7, #19]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d129      	bne.n	8006952 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	7b1b      	ldrb	r3, [r3, #12]
 8006902:	4619      	mov	r1, r3
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fef3 	bl	80086f0 <USBH_LL_GetLastXferSize>
 800690a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	429a      	cmp	r2, r3
 8006914:	d016      	beq.n	8006944 <CDC_ProcessReception+0x9e>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	8b5b      	ldrh	r3, [r3, #26]
 800691a:	461a      	mov	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4293      	cmp	r3, r2
 8006920:	d110      	bne.n	8006944 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	1ad2      	subs	r2, r2, r3
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	441a      	add	r2, r3
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2203      	movs	r2, #3
 800693e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006942:	e006      	b.n	8006952 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f80f 	bl	8006970 <USBH_CDC_ReceiveCallback>
      break;
 8006952:	bf00      	nop
  }
}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80069ac:	2302      	movs	r3, #2
 80069ae:	e029      	b.n	8006a04 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	79fa      	ldrb	r2, [r7, #7]
 80069b4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f81f 	bl	8006a0c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f001 fdc3 	bl	8008588 <USBH_LL_Init>

  return USBH_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e009      	b.n	8006a32 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	33e0      	adds	r3, #224	@ 0xe0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	2200      	movs	r2, #0
 8006a2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b0f      	cmp	r3, #15
 8006a36:	d9f2      	bls.n	8006a1e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	e009      	b.n	8006a52 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a48:	2200      	movs	r2, #0
 8006a4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a58:	d3f1      	bcc.n	8006a3e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2240      	movs	r2, #64	@ 0x40
 8006a7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	331c      	adds	r3, #28
 8006aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 f81d 	bl	8008af0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 f814 	bl	8008af0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006ace:	2212      	movs	r2, #18
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 f80c 	bl	8008af0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ade:	223e      	movs	r2, #62	@ 0x3e
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f002 f804 	bl	8008af0 <memset>

  return USBH_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10e      	bne.n	8006b2e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b16:	1c59      	adds	r1, r3, #1
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	33de      	adds	r3, #222	@ 0xde
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e004      	b.n	8006b38 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	e001      	b.n	8006b38 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b34:	2302      	movs	r3, #2
 8006b36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b5c:	78fa      	ldrb	r2, [r7, #3]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d204      	bcs.n	8006b6c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b6a:	e001      	b.n	8006b70 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b087      	sub	sp, #28
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	70fb      	strb	r3, [r7, #3]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70bb      	strb	r3, [r7, #2]
 8006b94:	4613      	mov	r3, r2
 8006b96:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ba6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ba8:	e025      	b.n	8006bf6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	221a      	movs	r2, #26
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3302      	adds	r3, #2
 8006bba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	795b      	ldrb	r3, [r3, #5]
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d002      	beq.n	8006bcc <USBH_FindInterface+0x4e>
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	2bff      	cmp	r3, #255	@ 0xff
 8006bca:	d111      	bne.n	8006bf0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bd0:	78ba      	ldrb	r2, [r7, #2]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d002      	beq.n	8006bdc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bd6:	78bb      	ldrb	r3, [r7, #2]
 8006bd8:	2bff      	cmp	r3, #255	@ 0xff
 8006bda:	d109      	bne.n	8006bf0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006be0:	787a      	ldrb	r2, [r7, #1]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d002      	beq.n	8006bec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006be6:	787b      	ldrb	r3, [r7, #1]
 8006be8:	2bff      	cmp	r3, #255	@ 0xff
 8006bea:	d101      	bne.n	8006bf0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	e006      	b.n	8006bfe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bf0:	7dfb      	ldrb	r3, [r7, #23]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d9d6      	bls.n	8006baa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bfc:	23ff      	movs	r3, #255	@ 0xff
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fcf4 	bl	8008600 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c18:	2101      	movs	r1, #1
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 fe0d 	bl	800883a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af04      	add	r7, sp, #16
 8006c32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d102      	bne.n	8006c4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b0b      	cmp	r3, #11
 8006c56:	f200 81bb 	bhi.w	8006fd0 <USBH_Process+0x3a4>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <USBH_Process+0x34>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006cc3 	.word	0x08006cc3
 8006c68:	08006d2b 	.word	0x08006d2b
 8006c6c:	08006f6b 	.word	0x08006f6b
 8006c70:	08006fd1 	.word	0x08006fd1
 8006c74:	08006dcb 	.word	0x08006dcb
 8006c78:	08006f11 	.word	0x08006f11
 8006c7c:	08006e01 	.word	0x08006e01
 8006c80:	08006e21 	.word	0x08006e21
 8006c84:	08006e3f 	.word	0x08006e3f
 8006c88:	08006e83 	.word	0x08006e83
 8006c8c:	08006f53 	.word	0x08006f53
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 819b 	beq.w	8006fd4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ca4:	20c8      	movs	r0, #200	@ 0xc8
 8006ca6:	f001 fe12 	bl	80088ce <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fd05 	bl	80086ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cc0:	e188      	b.n	8006fd4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d107      	bne.n	8006cdc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cda:	e18a      	b.n	8006ff2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ce6:	d914      	bls.n	8006d12 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d903      	bls.n	8006d0a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	220d      	movs	r2, #13
 8006d06:	701a      	strb	r2, [r3, #0]
      break;
 8006d08:	e173      	b.n	8006ff2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	701a      	strb	r2, [r3, #0]
      break;
 8006d10:	e16f      	b.n	8006ff2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d18:	f103 020a 	add.w	r2, r3, #10
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006d22:	200a      	movs	r0, #10
 8006d24:	f001 fdd3 	bl	80088ce <USBH_Delay>
      break;
 8006d28:	e163      	b.n	8006ff2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d3a:	2104      	movs	r1, #4
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d40:	2064      	movs	r0, #100	@ 0x64
 8006d42:	f001 fdc4 	bl	80088ce <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fc90 	bl	800866c <USBH_LL_GetSpeed>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2205      	movs	r2, #5
 8006d5a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fa9b 	bl	800829a <USBH_AllocPipe>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fa93 	bl	800829a <USBH_AllocPipe>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7919      	ldrb	r1, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d90:	9202      	str	r2, [sp, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	9201      	str	r2, [sp, #4]
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2280      	movs	r2, #128	@ 0x80
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fa4d 	bl	800823c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7959      	ldrb	r1, [r3, #5]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006db6:	9202      	str	r2, [sp, #8]
 8006db8:	2200      	movs	r2, #0
 8006dba:	9201      	str	r2, [sp, #4]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f001 fa3a 	bl	800823c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dc8:	e113      	b.n	8006ff2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f916 	bl	8006ffc <USBH_HandleEnum>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 80fd 	bne.w	8006fd8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d103      	bne.n	8006df8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2208      	movs	r2, #8
 8006df4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006df6:	e0ef      	b.n	8006fd8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2207      	movs	r2, #7
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e0eb      	b.n	8006fd8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80e8 	beq.w	8006fdc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e12:	2101      	movs	r1, #1
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e1e:	e0dd      	b.n	8006fdc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc3a 	bl	80076a2 <USBH_SetCfg>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 80d5 	bne.w	8006fe0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2209      	movs	r2, #9
 8006e3a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e3c:	e0d0      	b.n	8006fe0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d016      	beq.n	8006e7a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fc4a 	bl	80076e8 <USBH_SetFeature>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d103      	bne.n	8006e68 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	220a      	movs	r2, #10
 8006e64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e66:	e0bd      	b.n	8006fe4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	f040 80b9 	bne.w	8006fe4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	220a      	movs	r2, #10
 8006e76:	701a      	strb	r2, [r3, #0]
      break;
 8006e78:	e0b4      	b.n	8006fe4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	701a      	strb	r2, [r3, #0]
      break;
 8006e80:	e0b0      	b.n	8006fe4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80ad 	beq.w	8006fe8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
 8006e9a:	e016      	b.n	8006eca <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e9c:	7bfa      	ldrb	r2, [r7, #15]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32de      	adds	r2, #222	@ 0xde
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	791a      	ldrb	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d108      	bne.n	8006ec4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	32de      	adds	r2, #222	@ 0xde
 8006eb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006ec2:	e005      	b.n	8006ed0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	73fb      	strb	r3, [r7, #15]
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0e5      	beq.n	8006e9c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2206      	movs	r2, #6
 8006ef0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ef8:	2103      	movs	r1, #3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006efe:	e073      	b.n	8006fe8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	220d      	movs	r2, #13
 8006f04:	701a      	strb	r2, [r3, #0]
      break;
 8006f06:	e06f      	b.n	8006fe8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	220d      	movs	r2, #13
 8006f0c:	701a      	strb	r2, [r3, #0]
      break;
 8006f0e:	e06b      	b.n	8006fe8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d017      	beq.n	8006f4a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d103      	bne.n	8006f3a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	220b      	movs	r2, #11
 8006f36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f38:	e058      	b.n	8006fec <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d154      	bne.n	8006fec <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	220d      	movs	r2, #13
 8006f46:	701a      	strb	r2, [r3, #0]
      break;
 8006f48:	e050      	b.n	8006fec <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	220d      	movs	r2, #13
 8006f4e:	701a      	strb	r2, [r3, #0]
      break;
 8006f50:	e04c      	b.n	8006fec <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d049      	beq.n	8006ff0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
      }
      break;
 8006f68:	e042      	b.n	8006ff0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fd4a 	bl	8006a0c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fa6:	2105      	movs	r1, #5
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d107      	bne.n	8006fc8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fe22 	bl	8006c0a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fc6:	e014      	b.n	8006ff2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fb19 	bl	8008600 <USBH_LL_Start>
      break;
 8006fce:	e010      	b.n	8006ff2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e00e      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e00c      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e00a      	b.n	8006ff2 <USBH_Process+0x3c6>
    break;
 8006fdc:	bf00      	nop
 8006fde:	e008      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e006      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e004      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e002      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006fec:	bf00      	nop
 8006fee:	e000      	b.n	8006ff2 <USBH_Process+0x3c6>
      break;
 8006ff0:	bf00      	nop
  }
  return USBH_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af04      	add	r7, sp, #16
 8007002:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007008:	2301      	movs	r3, #1
 800700a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b07      	cmp	r3, #7
 8007012:	f200 81bd 	bhi.w	8007390 <USBH_HandleEnum+0x394>
 8007016:	a201      	add	r2, pc, #4	@ (adr r2, 800701c <USBH_HandleEnum+0x20>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	0800703d 	.word	0x0800703d
 8007020:	080070f7 	.word	0x080070f7
 8007024:	08007161 	.word	0x08007161
 8007028:	080071eb 	.word	0x080071eb
 800702c:	08007255 	.word	0x08007255
 8007030:	080072c5 	.word	0x080072c5
 8007034:	0800730b 	.word	0x0800730b
 8007038:	08007351 	.word	0x08007351
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800703c:	2108      	movs	r1, #8
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa4c 	bl	80074dc <USBH_Get_DevDesc>
 8007044:	4603      	mov	r3, r0
 8007046:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d12e      	bne.n	80070ac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7919      	ldrb	r1, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007072:	9202      	str	r2, [sp, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	9201      	str	r2, [sp, #4]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4603      	mov	r3, r0
 800707c:	2280      	movs	r2, #128	@ 0x80
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f8dc 	bl	800823c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	7959      	ldrb	r1, [r3, #5]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007098:	9202      	str	r2, [sp, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	9201      	str	r2, [sp, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4603      	mov	r3, r0
 80070a2:	2200      	movs	r2, #0
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f8c9 	bl	800823c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070aa:	e173      	b.n	8007394 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	f040 8170 	bne.w	8007394 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ba:	3301      	adds	r3, #1
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d903      	bls.n	80070d6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	220d      	movs	r2, #13
 80070d2:	701a      	strb	r2, [r3, #0]
      break;
 80070d4:	e15e      	b.n	8007394 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	795b      	ldrb	r3, [r3, #5]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f8fd 	bl	80082dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 f8f7 	bl	80082dc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
      break;
 80070f4:	e14e      	b.n	8007394 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070f6:	2112      	movs	r1, #18
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f9ef 	bl	80074dc <USBH_Get_DevDesc>
 80070fe:	4603      	mov	r3, r0
 8007100:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d103      	bne.n	8007110 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800710e:	e143      	b.n	8007398 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b03      	cmp	r3, #3
 8007114:	f040 8140 	bne.w	8007398 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800712e:	2b03      	cmp	r3, #3
 8007130:	d903      	bls.n	800713a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	220d      	movs	r2, #13
 8007136:	701a      	strb	r2, [r3, #0]
      break;
 8007138:	e12e      	b.n	8007398 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	795b      	ldrb	r3, [r3, #5]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 f8cb 	bl	80082dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	791b      	ldrb	r3, [r3, #4]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f8c5 	bl	80082dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	701a      	strb	r2, [r3, #0]
      break;
 800715e:	e11b      	b.n	8007398 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007160:	2101      	movs	r1, #1
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa79 	bl	800765a <USBH_SetAddress>
 8007168:	4603      	mov	r3, r0
 800716a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d130      	bne.n	80071d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007172:	2002      	movs	r0, #2
 8007174:	f001 fbab 	bl	80088ce <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2203      	movs	r2, #3
 8007184:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	7919      	ldrb	r1, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800719a:	9202      	str	r2, [sp, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	9201      	str	r2, [sp, #4]
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4603      	mov	r3, r0
 80071a4:	2280      	movs	r2, #128	@ 0x80
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f848 	bl	800823c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7959      	ldrb	r1, [r3, #5]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071c0:	9202      	str	r2, [sp, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	9201      	str	r2, [sp, #4]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	2200      	movs	r2, #0
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 f835 	bl	800823c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071d2:	e0e3      	b.n	800739c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	f040 80e0 	bne.w	800739c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	220d      	movs	r2, #13
 80071e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	705a      	strb	r2, [r3, #1]
      break;
 80071e8:	e0d8      	b.n	800739c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071ea:	2109      	movs	r1, #9
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f9a1 	bl	8007534 <USBH_Get_CfgDesc>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d103      	bne.n	8007204 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2204      	movs	r2, #4
 8007200:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007202:	e0cd      	b.n	80073a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2b03      	cmp	r3, #3
 8007208:	f040 80ca 	bne.w	80073a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007212:	3301      	adds	r3, #1
 8007214:	b2da      	uxtb	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007222:	2b03      	cmp	r3, #3
 8007224:	d903      	bls.n	800722e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	220d      	movs	r2, #13
 800722a:	701a      	strb	r2, [r3, #0]
      break;
 800722c:	e0b8      	b.n	80073a0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	795b      	ldrb	r3, [r3, #5]
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 f851 	bl	80082dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	791b      	ldrb	r3, [r3, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f84b 	bl	80082dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
      break;
 8007252:	e0a5      	b.n	80073a0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f969 	bl	8007534 <USBH_Get_CfgDesc>
 8007262:	4603      	mov	r3, r0
 8007264:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007266:	7bbb      	ldrb	r3, [r7, #14]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2205      	movs	r2, #5
 8007270:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007272:	e097      	b.n	80073a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b03      	cmp	r3, #3
 8007278:	f040 8094 	bne.w	80073a4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007282:	3301      	adds	r3, #1
 8007284:	b2da      	uxtb	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007292:	2b03      	cmp	r3, #3
 8007294:	d903      	bls.n	800729e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	220d      	movs	r2, #13
 800729a:	701a      	strb	r2, [r3, #0]
      break;
 800729c:	e082      	b.n	80073a4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	795b      	ldrb	r3, [r3, #5]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 f819 	bl	80082dc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f813 	bl	80082dc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
      break;
 80072c2:	e06f      	b.n	80073a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072da:	23ff      	movs	r3, #255	@ 0xff
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f953 	bl	8007588 <USBH_Get_StringDesc>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2206      	movs	r2, #6
 80072f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072f2:	e059      	b.n	80073a8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d156      	bne.n	80073a8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2206      	movs	r2, #6
 80072fe:	705a      	strb	r2, [r3, #1]
      break;
 8007300:	e052      	b.n	80073a8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2206      	movs	r2, #6
 8007306:	705a      	strb	r2, [r3, #1]
      break;
 8007308:	e04e      	b.n	80073a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007310:	2b00      	cmp	r3, #0
 8007312:	d019      	beq.n	8007348 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007320:	23ff      	movs	r3, #255	@ 0xff
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f930 	bl	8007588 <USBH_Get_StringDesc>
 8007328:	4603      	mov	r3, r0
 800732a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2207      	movs	r2, #7
 8007336:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007338:	e038      	b.n	80073ac <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800733a:	7bbb      	ldrb	r3, [r7, #14]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d135      	bne.n	80073ac <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2207      	movs	r2, #7
 8007344:	705a      	strb	r2, [r3, #1]
      break;
 8007346:	e031      	b.n	80073ac <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2207      	movs	r2, #7
 800734c:	705a      	strb	r2, [r3, #1]
      break;
 800734e:	e02d      	b.n	80073ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007356:	2b00      	cmp	r3, #0
 8007358:	d017      	beq.n	800738a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007366:	23ff      	movs	r3, #255	@ 0xff
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f90d 	bl	8007588 <USBH_Get_StringDesc>
 800736e:	4603      	mov	r3, r0
 8007370:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d102      	bne.n	800737e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800737c:	e018      	b.n	80073b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d115      	bne.n	80073b0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]
      break;
 8007388:	e012      	b.n	80073b0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
      break;
 800738e:	e00f      	b.n	80073b0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007390:	bf00      	nop
 8007392:	e00e      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 8007394:	bf00      	nop
 8007396:	e00c      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 8007398:	bf00      	nop
 800739a:	e00a      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 800739c:	bf00      	nop
 800739e:	e008      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 80073a0:	bf00      	nop
 80073a2:	e006      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 80073a4:	bf00      	nop
 80073a6:	e004      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 80073a8:	bf00      	nop
 80073aa:	e002      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 80073ac:	bf00      	nop
 80073ae:	e000      	b.n	80073b2 <USBH_HandleEnum+0x3b6>
      break;
 80073b0:	bf00      	nop
  }
  return Status;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f804 	bl	80073fe <USBH_HandleSof>
}
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b0b      	cmp	r3, #11
 800740e:	d10a      	bne.n	8007426 <USBH_HandleSof+0x28>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
  }
}
 8007426:	bf00      	nop
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800743e:	bf00      	nop
}
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800745a:	bf00      	nop
}
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007466:	b480      	push	{r7}
 8007468:	b083      	sub	sp, #12
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f8be 	bl	8008636 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 ff0b 	bl	80082dc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	795b      	ldrb	r3, [r3, #5]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 ff05 	bl	80082dc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074e8:	887b      	ldrh	r3, [r7, #2]
 80074ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ee:	d901      	bls.n	80074f4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e01b      	b.n	800752c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4613      	mov	r3, r2
 8007500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f872 	bl	80075f0 <USBH_GetDescriptor>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800751c:	887a      	ldrh	r2, [r7, #2]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f929 	bl	8007778 <USBH_ParseDevDesc>
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	331c      	adds	r3, #28
 8007544:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800754c:	d901      	bls.n	8007552 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800754e:	2303      	movs	r3, #3
 8007550:	e016      	b.n	8007580 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007552:	887b      	ldrh	r3, [r7, #2]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f846 	bl	80075f0 <USBH_GetDescriptor>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800756e:	887b      	ldrh	r3, [r7, #2]
 8007570:	461a      	mov	r2, r3
 8007572:	68b9      	ldr	r1, [r7, #8]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f9af 	bl	80078d8 <USBH_ParseCfgDesc>
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800757e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	607a      	str	r2, [r7, #4]
 8007592:	461a      	mov	r2, r3
 8007594:	460b      	mov	r3, r1
 8007596:	72fb      	strb	r3, [r7, #11]
 8007598:	4613      	mov	r3, r2
 800759a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800759c:	893b      	ldrh	r3, [r7, #8]
 800759e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a2:	d802      	bhi.n	80075aa <USBH_Get_StringDesc+0x22>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e01c      	b.n	80075e8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80075ae:	7afb      	ldrb	r3, [r7, #11]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80075b6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80075be:	893b      	ldrh	r3, [r7, #8]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	460b      	mov	r3, r1
 80075c4:	2100      	movs	r1, #0
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f812 	bl	80075f0 <USBH_GetDescriptor>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d107      	bne.n	80075e6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075dc:	893a      	ldrh	r2, [r7, #8]
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fb8d 	bl	8007d00 <USBH_ParseStringDesc>
  }

  return status;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3718      	adds	r7, #24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	72fb      	strb	r3, [r7, #11]
 80075fe:	4613      	mov	r3, r2
 8007600:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	789b      	ldrb	r3, [r3, #2]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d11c      	bne.n	8007644 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007610:	b2da      	uxtb	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2206      	movs	r2, #6
 800761a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	893a      	ldrh	r2, [r7, #8]
 8007620:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007622:	893b      	ldrh	r3, [r7, #8]
 8007624:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800762c:	d104      	bne.n	8007638 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f240 4209 	movw	r2, #1033	@ 0x409
 8007634:	829a      	strh	r2, [r3, #20]
 8007636:	e002      	b.n	800763e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8b3a      	ldrh	r2, [r7, #24]
 8007642:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007644:	8b3b      	ldrh	r3, [r7, #24]
 8007646:	461a      	mov	r2, r3
 8007648:	6879      	ldr	r1, [r7, #4]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fba5 	bl	8007d9a <USBH_CtlReq>
 8007650:	4603      	mov	r3, r0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	789b      	ldrb	r3, [r3, #2]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10f      	bne.n	800768e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2205      	movs	r2, #5
 8007678:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fb81 	bl	8007d9a <USBH_CtlReq>
 8007698:	4603      	mov	r3, r0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	789b      	ldrb	r3, [r3, #2]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10e      	bne.n	80076d4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2209      	movs	r2, #9
 80076c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	887a      	ldrh	r2, [r7, #2]
 80076c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb5e 	bl	8007d9a <USBH_CtlReq>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	789b      	ldrb	r3, [r3, #2]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10f      	bne.n	800771c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2203      	movs	r2, #3
 8007706:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb3a 	bl	8007d9a <USBH_CtlReq>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	789b      	ldrb	r3, [r3, #2]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10f      	bne.n	8007764 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007764:	2200      	movs	r2, #0
 8007766:	2100      	movs	r1, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb16 	bl	8007d9a <USBH_CtlReq>
 800776e:	4603      	mov	r3, r0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800778c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007798:	2302      	movs	r3, #2
 800779a:	e094      	b.n	80078c6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	785a      	ldrb	r2, [r3, #1]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3302      	adds	r3, #2
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3303      	adds	r3, #3
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	b29b      	uxth	r3, r3
 80077be:	4313      	orrs	r3, r2
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	791a      	ldrb	r2, [r3, #4]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	795a      	ldrb	r2, [r3, #5]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	799a      	ldrb	r2, [r3, #6]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	79da      	ldrb	r2, [r3, #7]
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d004      	beq.n	80077fa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d11b      	bne.n	8007832 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	79db      	ldrb	r3, [r3, #7]
 80077fe:	2b20      	cmp	r3, #32
 8007800:	dc0f      	bgt.n	8007822 <USBH_ParseDevDesc+0xaa>
 8007802:	2b08      	cmp	r3, #8
 8007804:	db0f      	blt.n	8007826 <USBH_ParseDevDesc+0xae>
 8007806:	3b08      	subs	r3, #8
 8007808:	4a32      	ldr	r2, [pc, #200]	@ (80078d4 <USBH_ParseDevDesc+0x15c>)
 800780a:	fa22 f303 	lsr.w	r3, r2, r3
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2301      	movne	r3, #1
 8007818:	2300      	moveq	r3, #0
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <USBH_ParseDevDesc+0xb6>
 8007820:	e001      	b.n	8007826 <USBH_ParseDevDesc+0xae>
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d003      	beq.n	800782e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2208      	movs	r2, #8
 800782a:	71da      	strb	r2, [r3, #7]
        break;
 800782c:	e000      	b.n	8007830 <USBH_ParseDevDesc+0xb8>
        break;
 800782e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007830:	e00e      	b.n	8007850 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007838:	2b02      	cmp	r3, #2
 800783a:	d107      	bne.n	800784c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	79db      	ldrb	r3, [r3, #7]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d005      	beq.n	8007850 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2208      	movs	r2, #8
 8007848:	71da      	strb	r2, [r3, #7]
 800784a:	e001      	b.n	8007850 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800784c:	2303      	movs	r3, #3
 800784e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	2b08      	cmp	r3, #8
 8007854:	d936      	bls.n	80078c4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3308      	adds	r3, #8
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3309      	adds	r3, #9
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	4313      	orrs	r3, r2
 800786a:	b29a      	uxth	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	330a      	adds	r3, #10
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	330b      	adds	r3, #11
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	b29b      	uxth	r3, r3
 8007882:	4313      	orrs	r3, r2
 8007884:	b29a      	uxth	r2, r3
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	330c      	adds	r3, #12
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	330d      	adds	r3, #13
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	b29b      	uxth	r3, r3
 800789c:	4313      	orrs	r3, r2
 800789e:	b29a      	uxth	r2, r3
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7b9a      	ldrb	r2, [r3, #14]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7bda      	ldrb	r2, [r3, #15]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	7c1a      	ldrb	r2, [r3, #16]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	7c5a      	ldrb	r2, [r3, #17]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	01000101 	.word	0x01000101

080078d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	@ 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007906:	2302      	movs	r3, #2
 8007908:	e0da      	b.n	8007ac0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800790e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b09      	cmp	r3, #9
 8007914:	d002      	beq.n	800791c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	2209      	movs	r2, #9
 800791a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	785a      	ldrb	r2, [r3, #1]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	3302      	adds	r3, #2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3303      	adds	r3, #3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007946:	bf28      	it	cs
 8007948:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800794c:	b29a      	uxth	r2, r3
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	791a      	ldrb	r2, [r3, #4]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	795a      	ldrb	r2, [r3, #5]
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	799a      	ldrb	r2, [r3, #6]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	79da      	ldrb	r2, [r3, #7]
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	7a1a      	ldrb	r2, [r3, #8]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b09      	cmp	r3, #9
 800797e:	f240 809d 	bls.w	8007abc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007982:	2309      	movs	r3, #9
 8007984:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800798a:	e081      	b.n	8007a90 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800798c:	f107 0316 	add.w	r3, r7, #22
 8007990:	4619      	mov	r1, r3
 8007992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007994:	f000 f9e7 	bl	8007d66 <USBH_GetNextDesc>
 8007998:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d176      	bne.n	8007a90 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80079a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d002      	beq.n	80079b0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	2209      	movs	r2, #9
 80079ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079b4:	221a      	movs	r2, #26
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	3308      	adds	r3, #8
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	4413      	add	r3, r2
 80079c0:	3302      	adds	r3, #2
 80079c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079c6:	69f8      	ldr	r0, [r7, #28]
 80079c8:	f000 f87e 	bl	8007ac8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079d6:	e043      	b.n	8007a60 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079d8:	f107 0316 	add.w	r3, r7, #22
 80079dc:	4619      	mov	r1, r3
 80079de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079e0:	f000 f9c1 	bl	8007d66 <USBH_GetNextDesc>
 80079e4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	2b05      	cmp	r3, #5
 80079ec:	d138      	bne.n	8007a60 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	795b      	ldrb	r3, [r3, #5]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d113      	bne.n	8007a1e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d003      	beq.n	8007a06 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	799b      	ldrb	r3, [r3, #6]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d10b      	bne.n	8007a1e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	79db      	ldrb	r3, [r3, #7]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10b      	bne.n	8007a26 <USBH_ParseCfgDesc+0x14e>
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d007      	beq.n	8007a26 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	2209      	movs	r2, #9
 8007a1a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a1c:	e003      	b.n	8007a26 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2207      	movs	r2, #7
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e000      	b.n	8007a28 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a26:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a30:	3201      	adds	r2, #1
 8007a32:	00d2      	lsls	r2, r2, #3
 8007a34:	211a      	movs	r1, #26
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	6a3a      	ldr	r2, [r7, #32]
 8007a40:	4413      	add	r3, r2
 8007a42:	3304      	adds	r3, #4
 8007a44:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a48:	69b9      	ldr	r1, [r7, #24]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f870 	bl	8007b30 <USBH_ParseEPDesc>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d204      	bcs.n	8007a76 <USBH_ParseCfgDesc+0x19e>
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	885a      	ldrh	r2, [r3, #2]
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8b0      	bhi.n	80079d8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d201      	bcs.n	8007a86 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e01c      	b.n	8007ac0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d805      	bhi.n	8007aa4 <USBH_ParseCfgDesc+0x1cc>
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	885a      	ldrh	r2, [r3, #2]
 8007a9c:	8afb      	ldrh	r3, [r7, #22]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	f63f af74 	bhi.w	800798c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	bf28      	it	cs
 8007aac:	2302      	movcs	r3, #2
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d201      	bcs.n	8007abc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e001      	b.n	8007ac0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007abc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3730      	adds	r7, #48	@ 0x30
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	785a      	ldrb	r2, [r3, #1]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	789a      	ldrb	r2, [r3, #2]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	78da      	ldrb	r2, [r3, #3]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	3304      	adds	r3, #4
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	bf28      	it	cs
 8007afc:	2302      	movcs	r3, #2
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	795a      	ldrb	r2, [r3, #5]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	799a      	ldrb	r2, [r3, #6]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	79da      	ldrb	r2, [r3, #7]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	7a1a      	ldrb	r2, [r3, #8]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	721a      	strb	r2, [r3, #8]
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	785a      	ldrb	r2, [r3, #1]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	789a      	ldrb	r2, [r3, #2]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	78da      	ldrb	r2, [r3, #3]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3305      	adds	r3, #5
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	4313      	orrs	r3, r2
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	799a      	ldrb	r2, [r3, #6]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	889b      	ldrh	r3, [r3, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b92:	d804      	bhi.n	8007b9e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b9c:	d901      	bls.n	8007ba2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d136      	bne.n	8007c1a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	78db      	ldrb	r3, [r3, #3]
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d108      	bne.n	8007bca <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	889b      	ldrh	r3, [r3, #4]
 8007bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc0:	f240 8097 	bls.w	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	75fb      	strb	r3, [r7, #23]
 8007bc8:	e093      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	78db      	ldrb	r3, [r3, #3]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	889b      	ldrh	r3, [r3, #4]
 8007bda:	2b40      	cmp	r3, #64	@ 0x40
 8007bdc:	f240 8089 	bls.w	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
 8007be4:	e085      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	78db      	ldrb	r3, [r3, #3]
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d005      	beq.n	8007bfe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	78db      	ldrb	r3, [r3, #3]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d10a      	bne.n	8007c14 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	799b      	ldrb	r3, [r3, #6]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <USBH_ParseEPDesc+0xde>
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	799b      	ldrb	r3, [r3, #6]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d970      	bls.n	8007cf0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c12:	e06d      	b.n	8007cf0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c14:	2303      	movs	r3, #3
 8007c16:	75fb      	strb	r3, [r7, #23]
 8007c18:	e06b      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d13c      	bne.n	8007c9e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	78db      	ldrb	r3, [r3, #3]
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d005      	beq.n	8007c3c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d106      	bne.n	8007c4a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	889b      	ldrh	r3, [r3, #4]
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d956      	bls.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c44:	2303      	movs	r3, #3
 8007c46:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c48:	e053      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	78db      	ldrb	r3, [r3, #3]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10e      	bne.n	8007c74 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	799b      	ldrb	r3, [r3, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d803      	bhi.n	8007c6e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c6a:	2b40      	cmp	r3, #64	@ 0x40
 8007c6c:	d941      	bls.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	75fb      	strb	r3, [r7, #23]
 8007c72:	e03e      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	78db      	ldrb	r3, [r3, #3]
 8007c78:	f003 0303 	and.w	r3, r3, #3
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d10b      	bne.n	8007c98 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	799b      	ldrb	r3, [r3, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <USBH_ParseEPDesc+0x162>
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	889b      	ldrh	r3, [r3, #4]
 8007c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c90:	d32f      	bcc.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c92:	2303      	movs	r3, #3
 8007c94:	75fb      	strb	r3, [r7, #23]
 8007c96:	e02c      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	75fb      	strb	r3, [r7, #23]
 8007c9c:	e029      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d120      	bne.n	8007cea <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	78db      	ldrb	r3, [r3, #3]
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	889b      	ldrh	r3, [r3, #4]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d01a      	beq.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	75fb      	strb	r3, [r7, #23]
 8007cc0:	e017      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	78db      	ldrb	r3, [r3, #3]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d10a      	bne.n	8007ce4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	799b      	ldrb	r3, [r3, #6]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <USBH_ParseEPDesc+0x1ae>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	889b      	ldrh	r3, [r3, #4]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d909      	bls.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	75fb      	strb	r3, [r7, #23]
 8007ce2:	e006      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
 8007ce8:	e003      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cea:	2303      	movs	r3, #3
 8007cec:	75fb      	strb	r3, [r7, #23]
 8007cee:	e000      	b.n	8007cf2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cf0:	bf00      	nop
  }

  return status;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d120      	bne.n	8007d5a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	1e9a      	subs	r2, r3, #2
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bf28      	it	cs
 8007d24:	4613      	movcs	r3, r2
 8007d26:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3302      	adds	r3, #2
 8007d2c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d2e:	2300      	movs	r3, #0
 8007d30:	82fb      	strh	r3, [r7, #22]
 8007d32:	e00b      	b.n	8007d4c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d34:	8afb      	ldrh	r3, [r7, #22]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	781a      	ldrb	r2, [r3, #0]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3301      	adds	r3, #1
 8007d44:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d46:	8afb      	ldrh	r3, [r7, #22]
 8007d48:	3302      	adds	r3, #2
 8007d4a:	82fb      	strh	r3, [r7, #22]
 8007d4c:	8afa      	ldrh	r2, [r7, #22]
 8007d4e:	8abb      	ldrh	r3, [r7, #20]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d3ef      	bcc.n	8007d34 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	4413      	add	r3, r2
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007da8:	2301      	movs	r3, #1
 8007daa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	789b      	ldrb	r3, [r3, #2]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d002      	beq.n	8007dba <USBH_CtlReq+0x20>
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d00f      	beq.n	8007dd8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007db8:	e027      	b.n	8007e0a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd6:	e018      	b.n	8007e0a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 f81b 	bl	8007e14 <USBH_HandleControl>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <USBH_CtlReq+0x54>
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d106      	bne.n	8007dfc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	761a      	strb	r2, [r3, #24]
      break;
 8007dfa:	e005      	b.n	8007e08 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dfc:	7dfb      	ldrb	r3, [r7, #23]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d102      	bne.n	8007e08 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	709a      	strb	r2, [r3, #2]
      break;
 8007e08:	bf00      	nop
  }
  return status;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7e1b      	ldrb	r3, [r3, #24]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	2b0a      	cmp	r3, #10
 8007e2c:	f200 8156 	bhi.w	80080dc <USBH_HandleControl+0x2c8>
 8007e30:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <USBH_HandleControl+0x24>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007e7f 	.word	0x08007e7f
 8007e40:	08007ee9 	.word	0x08007ee9
 8007e44:	08007f0f 	.word	0x08007f0f
 8007e48:	08007f47 	.word	0x08007f47
 8007e4c:	08007f71 	.word	0x08007f71
 8007e50:	08007fc3 	.word	0x08007fc3
 8007e54:	08007fe5 	.word	0x08007fe5
 8007e58:	08008021 	.word	0x08008021
 8007e5c:	08008047 	.word	0x08008047
 8007e60:	08008085 	.word	0x08008085
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f103 0110 	add.w	r1, r3, #16
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	795b      	ldrb	r3, [r3, #5]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f943 	bl	80080fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	761a      	strb	r2, [r3, #24]
      break;
 8007e7c:	e139      	b.n	80080f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	795b      	ldrb	r3, [r3, #5]
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fcc5 	bl	8008814 <USBH_LL_GetURBState>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d11e      	bne.n	8007ed2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7c1b      	ldrb	r3, [r3, #16]
 8007e98:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8adb      	ldrh	r3, [r3, #22]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ea6:	7b7b      	ldrb	r3, [r7, #13]
 8007ea8:	2b80      	cmp	r3, #128	@ 0x80
 8007eaa:	d103      	bne.n	8007eb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2203      	movs	r2, #3
 8007eb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eb2:	e115      	b.n	80080e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2205      	movs	r2, #5
 8007eb8:	761a      	strb	r2, [r3, #24]
      break;
 8007eba:	e111      	b.n	80080e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007ebc:	7b7b      	ldrb	r3, [r7, #13]
 8007ebe:	2b80      	cmp	r3, #128	@ 0x80
 8007ec0:	d103      	bne.n	8007eca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2209      	movs	r2, #9
 8007ec6:	761a      	strb	r2, [r3, #24]
      break;
 8007ec8:	e10a      	b.n	80080e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2207      	movs	r2, #7
 8007ece:	761a      	strb	r2, [r3, #24]
      break;
 8007ed0:	e106      	b.n	80080e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	d003      	beq.n	8007ee0 <USBH_HandleControl+0xcc>
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	f040 8100 	bne.w	80080e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	220b      	movs	r2, #11
 8007ee4:	761a      	strb	r2, [r3, #24]
      break;
 8007ee6:	e0fb      	b.n	80080e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6899      	ldr	r1, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	899a      	ldrh	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	791b      	ldrb	r3, [r3, #4]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f93a 	bl	800817a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	761a      	strb	r2, [r3, #24]
      break;
 8007f0c:	e0f1      	b.n	80080f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 fc7d 	bl	8008814 <USBH_LL_GetURBState>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d102      	bne.n	8007f2a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2209      	movs	r2, #9
 8007f28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d102      	bne.n	8007f36 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f30:	2303      	movs	r3, #3
 8007f32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f34:	e0d6      	b.n	80080e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	f040 80d3 	bne.w	80080e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	220b      	movs	r2, #11
 8007f42:	761a      	strb	r2, [r3, #24]
      break;
 8007f44:	e0ce      	b.n	80080e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6899      	ldr	r1, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	899a      	ldrh	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	795b      	ldrb	r3, [r3, #5]
 8007f52:	2001      	movs	r0, #1
 8007f54:	9000      	str	r0, [sp, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f8ea 	bl	8008130 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2206      	movs	r2, #6
 8007f6c:	761a      	strb	r2, [r3, #24]
      break;
 8007f6e:	e0c0      	b.n	80080f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	795b      	ldrb	r3, [r3, #5]
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc4c 	bl	8008814 <USBH_LL_GetURBState>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d103      	bne.n	8007f8e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2207      	movs	r2, #7
 8007f8a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f8c:	e0ac      	b.n	80080e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f8e:	7bbb      	ldrb	r3, [r7, #14]
 8007f90:	2b05      	cmp	r3, #5
 8007f92:	d105      	bne.n	8007fa0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	220c      	movs	r2, #12
 8007f98:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9e:	e0a3      	b.n	80080e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d103      	bne.n	8007fae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2205      	movs	r2, #5
 8007faa:	761a      	strb	r2, [r3, #24]
      break;
 8007fac:	e09c      	b.n	80080e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	f040 8099 	bne.w	80080e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220b      	movs	r2, #11
 8007fba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc0:	e092      	b.n	80080e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	791b      	ldrb	r3, [r3, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2100      	movs	r1, #0
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f8d5 	bl	800817a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2208      	movs	r2, #8
 8007fe0:	761a      	strb	r2, [r3, #24]

      break;
 8007fe2:	e086      	b.n	80080f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	791b      	ldrb	r3, [r3, #4]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc12 	bl	8008814 <USBH_LL_GetURBState>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d105      	bne.n	8008006 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	220d      	movs	r2, #13
 8007ffe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008004:	e072      	b.n	80080ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d103      	bne.n	8008014 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	220b      	movs	r2, #11
 8008010:	761a      	strb	r2, [r3, #24]
      break;
 8008012:	e06b      	b.n	80080ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b05      	cmp	r3, #5
 8008018:	d168      	bne.n	80080ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800801a:	2303      	movs	r3, #3
 800801c:	73fb      	strb	r3, [r7, #15]
      break;
 800801e:	e065      	b.n	80080ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	795b      	ldrb	r3, [r3, #5]
 8008024:	2201      	movs	r2, #1
 8008026:	9200      	str	r2, [sp, #0]
 8008028:	2200      	movs	r2, #0
 800802a:	2100      	movs	r1, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f87f 	bl	8008130 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	220a      	movs	r2, #10
 8008042:	761a      	strb	r2, [r3, #24]
      break;
 8008044:	e055      	b.n	80080f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	795b      	ldrb	r3, [r3, #5]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fbe1 	bl	8008814 <USBH_LL_GetURBState>
 8008052:	4603      	mov	r3, r0
 8008054:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d105      	bne.n	8008068 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	220d      	movs	r2, #13
 8008064:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008066:	e043      	b.n	80080f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b02      	cmp	r3, #2
 800806c:	d103      	bne.n	8008076 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2209      	movs	r2, #9
 8008072:	761a      	strb	r2, [r3, #24]
      break;
 8008074:	e03c      	b.n	80080f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	2b04      	cmp	r3, #4
 800807a:	d139      	bne.n	80080f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	220b      	movs	r2, #11
 8008080:	761a      	strb	r2, [r3, #24]
      break;
 8008082:	e035      	b.n	80080f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7e5b      	ldrb	r3, [r3, #25]
 8008088:	3301      	adds	r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	765a      	strb	r2, [r3, #25]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7e5b      	ldrb	r3, [r3, #25]
 8008094:	2b02      	cmp	r3, #2
 8008096:	d806      	bhi.n	80080a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80080a4:	e025      	b.n	80080f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080ac:	2106      	movs	r1, #6
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	795b      	ldrb	r3, [r3, #5]
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f90c 	bl	80082dc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	791b      	ldrb	r3, [r3, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f906 	bl	80082dc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080d6:	2302      	movs	r3, #2
 80080d8:	73fb      	strb	r3, [r7, #15]
      break;
 80080da:	e00a      	b.n	80080f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80080dc:	bf00      	nop
 80080de:	e008      	b.n	80080f2 <USBH_HandleControl+0x2de>
      break;
 80080e0:	bf00      	nop
 80080e2:	e006      	b.n	80080f2 <USBH_HandleControl+0x2de>
      break;
 80080e4:	bf00      	nop
 80080e6:	e004      	b.n	80080f2 <USBH_HandleControl+0x2de>
      break;
 80080e8:	bf00      	nop
 80080ea:	e002      	b.n	80080f2 <USBH_HandleControl+0x2de>
      break;
 80080ec:	bf00      	nop
 80080ee:	e000      	b.n	80080f2 <USBH_HandleControl+0x2de>
      break;
 80080f0:	bf00      	nop
  }

  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af04      	add	r7, sp, #16
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800810a:	79f9      	ldrb	r1, [r7, #7]
 800810c:	2300      	movs	r3, #0
 800810e:	9303      	str	r3, [sp, #12]
 8008110:	2308      	movs	r3, #8
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	2300      	movs	r3, #0
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	2300      	movs	r3, #0
 800811e:	2200      	movs	r2, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fb46 	bl	80087b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af04      	add	r7, sp, #16
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4611      	mov	r1, r2
 800813c:	461a      	mov	r2, r3
 800813e:	460b      	mov	r3, r1
 8008140:	80fb      	strh	r3, [r7, #6]
 8008142:	4613      	mov	r3, r2
 8008144:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008154:	7979      	ldrb	r1, [r7, #5]
 8008156:	7e3b      	ldrb	r3, [r7, #24]
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	2301      	movs	r3, #1
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	2200      	movs	r2, #0
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fb21 	bl	80087b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b088      	sub	sp, #32
 800817e:	af04      	add	r7, sp, #16
 8008180:	60f8      	str	r0, [r7, #12]
 8008182:	60b9      	str	r1, [r7, #8]
 8008184:	4611      	mov	r1, r2
 8008186:	461a      	mov	r2, r3
 8008188:	460b      	mov	r3, r1
 800818a:	80fb      	strh	r3, [r7, #6]
 800818c:	4613      	mov	r3, r2
 800818e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008190:	7979      	ldrb	r1, [r7, #5]
 8008192:	2300      	movs	r3, #0
 8008194:	9303      	str	r3, [sp, #12]
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	9302      	str	r3, [sp, #8]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	2301      	movs	r3, #1
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	2201      	movs	r2, #1
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 fb03 	bl	80087b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081ac:	2300      	movs	r3, #0

}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b088      	sub	sp, #32
 80081ba:	af04      	add	r7, sp, #16
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	4611      	mov	r1, r2
 80081c2:	461a      	mov	r2, r3
 80081c4:	460b      	mov	r3, r1
 80081c6:	80fb      	strh	r3, [r7, #6]
 80081c8:	4613      	mov	r3, r2
 80081ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081da:	7979      	ldrb	r1, [r7, #5]
 80081dc:	7e3b      	ldrb	r3, [r7, #24]
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	9302      	str	r3, [sp, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	2301      	movs	r3, #1
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	2302      	movs	r3, #2
 80081ee:	2200      	movs	r2, #0
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f000 fade 	bl	80087b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af04      	add	r7, sp, #16
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4611      	mov	r1, r2
 800820c:	461a      	mov	r2, r3
 800820e:	460b      	mov	r3, r1
 8008210:	80fb      	strh	r3, [r7, #6]
 8008212:	4613      	mov	r3, r2
 8008214:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008216:	7979      	ldrb	r1, [r7, #5]
 8008218:	2300      	movs	r3, #0
 800821a:	9303      	str	r3, [sp, #12]
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	9302      	str	r3, [sp, #8]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	2301      	movs	r3, #1
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	2302      	movs	r3, #2
 800822a:	2201      	movs	r2, #1
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fac0 	bl	80087b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af04      	add	r7, sp, #16
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	4608      	mov	r0, r1
 8008246:	4611      	mov	r1, r2
 8008248:	461a      	mov	r2, r3
 800824a:	4603      	mov	r3, r0
 800824c:	70fb      	strb	r3, [r7, #3]
 800824e:	460b      	mov	r3, r1
 8008250:	70bb      	strb	r3, [r7, #2]
 8008252:	4613      	mov	r3, r2
 8008254:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008256:	7878      	ldrb	r0, [r7, #1]
 8008258:	78ba      	ldrb	r2, [r7, #2]
 800825a:	78f9      	ldrb	r1, [r7, #3]
 800825c:	8b3b      	ldrh	r3, [r7, #24]
 800825e:	9302      	str	r3, [sp, #8]
 8008260:	7d3b      	ldrb	r3, [r7, #20]
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	7c3b      	ldrb	r3, [r7, #16]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4603      	mov	r3, r0
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fa53 	bl	8008716 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa72 	bl	8008774 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f836 	bl	8008318 <USBH_GetFreePipe>
 80082ac:	4603      	mov	r3, r0
 80082ae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082b0:	89fb      	ldrh	r3, [r7, #14]
 80082b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00a      	beq.n	80082d0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	89fb      	ldrh	r3, [r7, #14]
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	33e0      	adds	r3, #224	@ 0xe0
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082d0:	89fb      	ldrh	r3, [r7, #14]
 80082d2:	b2db      	uxtb	r3, r3
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	460b      	mov	r3, r1
 80082e6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	d80d      	bhi.n	800830a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082ee:	78fb      	ldrb	r3, [r7, #3]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	33e0      	adds	r3, #224	@ 0xe0
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	33e0      	adds	r3, #224	@ 0xe0
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	440b      	add	r3, r1
 8008308:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
 8008328:	e00f      	b.n	800834a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800832a:	7bfb      	ldrb	r3, [r7, #15]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	33e0      	adds	r3, #224	@ 0xe0
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	b29b      	uxth	r3, r3
 8008342:	e007      	b.n	8008354 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	3301      	adds	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b0f      	cmp	r3, #15
 800834e:	d9ec      	bls.n	800832a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008364:	2201      	movs	r2, #1
 8008366:	490e      	ldr	r1, [pc, #56]	@ (80083a0 <MX_USB_HOST_Init+0x40>)
 8008368:	480e      	ldr	r0, [pc, #56]	@ (80083a4 <MX_USB_HOST_Init+0x44>)
 800836a:	f7fe fb15 	bl	8006998 <USBH_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008374:	f7f8 fb26 	bl	80009c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008378:	490b      	ldr	r1, [pc, #44]	@ (80083a8 <MX_USB_HOST_Init+0x48>)
 800837a:	480a      	ldr	r0, [pc, #40]	@ (80083a4 <MX_USB_HOST_Init+0x44>)
 800837c:	f7fe fbb9 	bl	8006af2 <USBH_RegisterClass>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008386:	f7f8 fb1d 	bl	80009c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800838a:	4806      	ldr	r0, [pc, #24]	@ (80083a4 <MX_USB_HOST_Init+0x44>)
 800838c:	f7fe fc3d 	bl	8006c0a <USBH_Start>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008396:	f7f8 fb15 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800839a:	bf00      	nop
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	080083c1 	.word	0x080083c1
 80083a4:	20000998 	.word	0x20000998
 80083a8:	2000000c 	.word	0x2000000c

080083ac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80083b0:	4802      	ldr	r0, [pc, #8]	@ (80083bc <MX_USB_HOST_Process+0x10>)
 80083b2:	f7fe fc3b 	bl	8006c2c <USBH_Process>
}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20000998 	.word	0x20000998

080083c0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	2b04      	cmp	r3, #4
 80083d2:	d819      	bhi.n	8008408 <USBH_UserProcess+0x48>
 80083d4:	a201      	add	r2, pc, #4	@ (adr r2, 80083dc <USBH_UserProcess+0x1c>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008409 	.word	0x08008409
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008409 	.word	0x08008409
 80083e8:	08008401 	.word	0x08008401
 80083ec:	080083f1 	.word	0x080083f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083f0:	4b09      	ldr	r3, [pc, #36]	@ (8008418 <USBH_UserProcess+0x58>)
 80083f2:	2203      	movs	r2, #3
 80083f4:	701a      	strb	r2, [r3, #0]
  break;
 80083f6:	e008      	b.n	800840a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083f8:	4b07      	ldr	r3, [pc, #28]	@ (8008418 <USBH_UserProcess+0x58>)
 80083fa:	2202      	movs	r2, #2
 80083fc:	701a      	strb	r2, [r3, #0]
  break;
 80083fe:	e004      	b.n	800840a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <USBH_UserProcess+0x58>)
 8008402:	2201      	movs	r2, #1
 8008404:	701a      	strb	r2, [r3, #0]
  break;
 8008406:	e000      	b.n	800840a <USBH_UserProcess+0x4a>

  default:
  break;
 8008408:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800840a:	bf00      	nop
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20000d70 	.word	0x20000d70

0800841c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	@ 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	609a      	str	r2, [r3, #8]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800843c:	d147      	bne.n	80084ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800843e:	2300      	movs	r3, #0
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	4b25      	ldr	r3, [pc, #148]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008446:	4a24      	ldr	r2, [pc, #144]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 8008448:	f043 0301 	orr.w	r3, r3, #1
 800844c:	6313      	str	r3, [r2, #48]	@ 0x30
 800844e:	4b22      	ldr	r3, [pc, #136]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	613b      	str	r3, [r7, #16]
 8008458:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800845a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800845e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008460:	2300      	movs	r3, #0
 8008462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008468:	f107 0314 	add.w	r3, r7, #20
 800846c:	4619      	mov	r1, r3
 800846e:	481b      	ldr	r0, [pc, #108]	@ (80084dc <HAL_HCD_MspInit+0xc0>)
 8008470:	f7f8 fe3a 	bl	80010e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008474:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847a:	2302      	movs	r3, #2
 800847c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008486:	230a      	movs	r3, #10
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800848a:	f107 0314 	add.w	r3, r7, #20
 800848e:	4619      	mov	r1, r3
 8008490:	4812      	ldr	r0, [pc, #72]	@ (80084dc <HAL_HCD_MspInit+0xc0>)
 8008492:	f7f8 fe29 	bl	80010e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008496:	4b10      	ldr	r3, [pc, #64]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 8008498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800849a:	4a0f      	ldr	r2, [pc, #60]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 800849c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	4b0c      	ldr	r3, [pc, #48]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 80084a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084aa:	4a0b      	ldr	r2, [pc, #44]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 80084ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80084b2:	4b09      	ldr	r3, [pc, #36]	@ (80084d8 <HAL_HCD_MspInit+0xbc>)
 80084b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	2043      	movs	r0, #67	@ 0x43
 80084c4:	f7f8 fdd9 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084c8:	2043      	movs	r0, #67	@ 0x43
 80084ca:	f7f8 fdf2 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084ce:	bf00      	nop
 80084d0:	3728      	adds	r7, #40	@ 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40023800 	.word	0x40023800
 80084dc:	40020000 	.word	0x40020000

080084e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe ff73 	bl	80073da <USBH_LL_IncTimer>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe ffab 	bl	8007466 <USBH_LL_Connect>
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe ffb4 	bl	8007494 <USBH_LL_Disconnect>
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
 8008540:	4613      	mov	r3, r2
 8008542:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe ff65 	bl	800742e <USBH_LL_PortEnabled>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe ff65 	bl	800744a <USBH_LL_PortDisabled>
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008596:	2b01      	cmp	r3, #1
 8008598:	d12a      	bne.n	80085f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800859a:	4a18      	ldr	r2, [pc, #96]	@ (80085fc <USBH_LL_Init+0x74>)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a15      	ldr	r2, [pc, #84]	@ (80085fc <USBH_LL_Init+0x74>)
 80085a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085aa:	4b14      	ldr	r3, [pc, #80]	@ (80085fc <USBH_LL_Init+0x74>)
 80085ac:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80085b2:	4b12      	ldr	r3, [pc, #72]	@ (80085fc <USBH_LL_Init+0x74>)
 80085b4:	2208      	movs	r2, #8
 80085b6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085b8:	4b10      	ldr	r3, [pc, #64]	@ (80085fc <USBH_LL_Init+0x74>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085be:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <USBH_LL_Init+0x74>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085c4:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <USBH_LL_Init+0x74>)
 80085c6:	2202      	movs	r2, #2
 80085c8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085ca:	4b0c      	ldr	r3, [pc, #48]	@ (80085fc <USBH_LL_Init+0x74>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085d0:	480a      	ldr	r0, [pc, #40]	@ (80085fc <USBH_LL_Init+0x74>)
 80085d2:	f7f8 ff70 	bl	80014b6 <HAL_HCD_Init>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085dc:	f7f8 f9f2 	bl	80009c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085e0:	4806      	ldr	r0, [pc, #24]	@ (80085fc <USBH_LL_Init+0x74>)
 80085e2:	f7f9 fbd1 	bl	8001d88 <HAL_HCD_GetCurrentFrame>
 80085e6:	4603      	mov	r3, r0
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fe fee6 	bl	80073bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000d74 	.word	0x20000d74

08008600 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008616:	4618      	mov	r0, r3
 8008618:	f7f9 fb3e 	bl	8001c98 <HAL_HCD_Start>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f95e 	bl	80088e4 <USBH_Get_USB_Status>
 8008628:	4603      	mov	r3, r0
 800862a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800862c:	7bbb      	ldrb	r3, [r7, #14]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800864c:	4618      	mov	r0, r3
 800864e:	f7f9 fb46 	bl	8001cde <HAL_HCD_Stop>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f943 	bl	80088e4 <USBH_Get_USB_Status>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008662:	7bbb      	ldrb	r3, [r7, #14]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800867e:	4618      	mov	r0, r3
 8008680:	f7f9 fb90 	bl	8001da4 <HAL_HCD_GetCurrentSpeed>
 8008684:	4603      	mov	r3, r0
 8008686:	2b02      	cmp	r3, #2
 8008688:	d00c      	beq.n	80086a4 <USBH_LL_GetSpeed+0x38>
 800868a:	2b02      	cmp	r3, #2
 800868c:	d80d      	bhi.n	80086aa <USBH_LL_GetSpeed+0x3e>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <USBH_LL_GetSpeed+0x2c>
 8008692:	2b01      	cmp	r3, #1
 8008694:	d003      	beq.n	800869e <USBH_LL_GetSpeed+0x32>
 8008696:	e008      	b.n	80086aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
    break;
 800869c:	e008      	b.n	80086b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800869e:	2301      	movs	r3, #1
 80086a0:	73fb      	strb	r3, [r7, #15]
    break;
 80086a2:	e005      	b.n	80086b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80086a4:	2302      	movs	r3, #2
 80086a6:	73fb      	strb	r3, [r7, #15]
    break;
 80086a8:	e002      	b.n	80086b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80086aa:	2301      	movs	r3, #1
 80086ac:	73fb      	strb	r3, [r7, #15]
    break;
 80086ae:	bf00      	nop
  }
  return  speed;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7f9 fb21 	bl	8001d18 <HAL_HCD_ResetPort>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 f901 	bl	80088e4 <USBH_Get_USB_Status>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008702:	78fa      	ldrb	r2, [r7, #3]
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f7f9 fb29 	bl	8001d5e <HAL_HCD_HC_GetXferCount>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008716:	b590      	push	{r4, r7, lr}
 8008718:	b089      	sub	sp, #36	@ 0x24
 800871a:	af04      	add	r7, sp, #16
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	461a      	mov	r2, r3
 8008724:	4603      	mov	r3, r0
 8008726:	70fb      	strb	r3, [r7, #3]
 8008728:	460b      	mov	r3, r1
 800872a:	70bb      	strb	r3, [r7, #2]
 800872c:	4613      	mov	r3, r2
 800872e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800873e:	787c      	ldrb	r4, [r7, #1]
 8008740:	78ba      	ldrb	r2, [r7, #2]
 8008742:	78f9      	ldrb	r1, [r7, #3]
 8008744:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008746:	9302      	str	r3, [sp, #8]
 8008748:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	4623      	mov	r3, r4
 8008756:	f7f8 ff15 	bl	8001584 <HAL_HCD_HC_Init>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f8bf 	bl	80088e4 <USBH_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	bd90      	pop	{r4, r7, pc}

08008774 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7f8 ffae 	bl	80016f4 <HAL_HCD_HC_Halt>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f8a0 	bl	80088e4 <USBH_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80087b2:	b590      	push	{r4, r7, lr}
 80087b4:	b089      	sub	sp, #36	@ 0x24
 80087b6:	af04      	add	r7, sp, #16
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	4608      	mov	r0, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	461a      	mov	r2, r3
 80087c0:	4603      	mov	r3, r0
 80087c2:	70fb      	strb	r3, [r7, #3]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70bb      	strb	r3, [r7, #2]
 80087c8:	4613      	mov	r3, r2
 80087ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087da:	787c      	ldrb	r4, [r7, #1]
 80087dc:	78ba      	ldrb	r2, [r7, #2]
 80087de:	78f9      	ldrb	r1, [r7, #3]
 80087e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087e4:	9303      	str	r3, [sp, #12]
 80087e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4623      	mov	r3, r4
 80087f6:	f7f8 ffa1 	bl	800173c <HAL_HCD_HC_SubmitRequest>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f86f 	bl	80088e4 <USBH_Get_USB_Status>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800880a:	7bbb      	ldrb	r3, [r7, #14]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}

08008814 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f7f9 fa82 	bl	8001d34 <HAL_HCD_HC_GetURBState>
 8008830:	4603      	mov	r3, r0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800884c:	2b01      	cmp	r3, #1
 800884e:	d103      	bne.n	8008858 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f872 	bl	800893c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008858:	20c8      	movs	r0, #200	@ 0xc8
 800885a:	f7f8 fb0f 	bl	8000e7c <HAL_Delay>
  return USBH_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
 8008874:	4613      	mov	r3, r2
 8008876:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800887e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	4613      	mov	r3, r2
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	3317      	adds	r3, #23
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	68f9      	ldr	r1, [r7, #12]
 800889a:	4613      	mov	r3, r2
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	333c      	adds	r3, #60	@ 0x3c
 80088a6:	78ba      	ldrb	r2, [r7, #2]
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e009      	b.n	80088c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	4613      	mov	r3, r2
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	333d      	adds	r3, #61	@ 0x3d
 80088bc:	78ba      	ldrb	r2, [r7, #2]
 80088be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7f8 fad0 	bl	8000e7c <HAL_Delay>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d817      	bhi.n	8008928 <USBH_Get_USB_Status+0x44>
 80088f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <USBH_Get_USB_Status+0x1c>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008911 	.word	0x08008911
 8008904:	08008917 	.word	0x08008917
 8008908:	0800891d 	.word	0x0800891d
 800890c:	08008923 	.word	0x08008923
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
    break;
 8008914:	e00b      	b.n	800892e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008916:	2302      	movs	r3, #2
 8008918:	73fb      	strb	r3, [r7, #15]
    break;
 800891a:	e008      	b.n	800892e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800891c:	2301      	movs	r3, #1
 800891e:	73fb      	strb	r3, [r7, #15]
    break;
 8008920:	e005      	b.n	800892e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008922:	2302      	movs	r3, #2
 8008924:	73fb      	strb	r3, [r7, #15]
    break;
 8008926:	e002      	b.n	800892e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008928:	2302      	movs	r3, #2
 800892a:	73fb      	strb	r3, [r7, #15]
    break;
 800892c:	bf00      	nop
  }
  return usb_status;
 800892e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008950:	2300      	movs	r3, #0
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	e001      	b.n	800895a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008956:	2301      	movs	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	461a      	mov	r2, r3
 800895e:	2101      	movs	r1, #1
 8008960:	4803      	ldr	r0, [pc, #12]	@ (8008970 <MX_DriverVbusFS+0x34>)
 8008962:	f7f8 fd75 	bl	8001450 <HAL_GPIO_WritePin>
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40020800 	.word	0x40020800

08008974 <malloc>:
 8008974:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <malloc+0xc>)
 8008976:	4601      	mov	r1, r0
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f000 b82d 	b.w	80089d8 <_malloc_r>
 800897e:	bf00      	nop
 8008980:	2000002c 	.word	0x2000002c

08008984 <free>:
 8008984:	4b02      	ldr	r3, [pc, #8]	@ (8008990 <free+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f000 b8f5 	b.w	8008b78 <_free_r>
 800898e:	bf00      	nop
 8008990:	2000002c 	.word	0x2000002c

08008994 <sbrk_aligned>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	4e0f      	ldr	r6, [pc, #60]	@ (80089d4 <sbrk_aligned+0x40>)
 8008998:	460c      	mov	r4, r1
 800899a:	6831      	ldr	r1, [r6, #0]
 800899c:	4605      	mov	r5, r0
 800899e:	b911      	cbnz	r1, 80089a6 <sbrk_aligned+0x12>
 80089a0:	f000 f8ae 	bl	8008b00 <_sbrk_r>
 80089a4:	6030      	str	r0, [r6, #0]
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f8a9 	bl	8008b00 <_sbrk_r>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d103      	bne.n	80089ba <sbrk_aligned+0x26>
 80089b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80089b6:	4620      	mov	r0, r4
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	1cc4      	adds	r4, r0, #3
 80089bc:	f024 0403 	bic.w	r4, r4, #3
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d0f8      	beq.n	80089b6 <sbrk_aligned+0x22>
 80089c4:	1a21      	subs	r1, r4, r0
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 f89a 	bl	8008b00 <_sbrk_r>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1f2      	bne.n	80089b6 <sbrk_aligned+0x22>
 80089d0:	e7ef      	b.n	80089b2 <sbrk_aligned+0x1e>
 80089d2:	bf00      	nop
 80089d4:	20001154 	.word	0x20001154

080089d8 <_malloc_r>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	1ccd      	adds	r5, r1, #3
 80089de:	f025 0503 	bic.w	r5, r5, #3
 80089e2:	3508      	adds	r5, #8
 80089e4:	2d0c      	cmp	r5, #12
 80089e6:	bf38      	it	cc
 80089e8:	250c      	movcc	r5, #12
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	4606      	mov	r6, r0
 80089ee:	db01      	blt.n	80089f4 <_malloc_r+0x1c>
 80089f0:	42a9      	cmp	r1, r5
 80089f2:	d904      	bls.n	80089fe <_malloc_r+0x26>
 80089f4:	230c      	movs	r3, #12
 80089f6:	6033      	str	r3, [r6, #0]
 80089f8:	2000      	movs	r0, #0
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ad4 <_malloc_r+0xfc>
 8008a02:	f000 f869 	bl	8008ad8 <__malloc_lock>
 8008a06:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0a:	461c      	mov	r4, r3
 8008a0c:	bb44      	cbnz	r4, 8008a60 <_malloc_r+0x88>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ffbf 	bl	8008994 <sbrk_aligned>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	4604      	mov	r4, r0
 8008a1a:	d158      	bne.n	8008ace <_malloc_r+0xf6>
 8008a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a20:	4627      	mov	r7, r4
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	d143      	bne.n	8008aae <_malloc_r+0xd6>
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d04b      	beq.n	8008ac2 <_malloc_r+0xea>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4630      	mov	r0, r6
 8008a30:	eb04 0903 	add.w	r9, r4, r3
 8008a34:	f000 f864 	bl	8008b00 <_sbrk_r>
 8008a38:	4581      	cmp	r9, r0
 8008a3a:	d142      	bne.n	8008ac2 <_malloc_r+0xea>
 8008a3c:	6821      	ldr	r1, [r4, #0]
 8008a3e:	1a6d      	subs	r5, r5, r1
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffa6 	bl	8008994 <sbrk_aligned>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d03a      	beq.n	8008ac2 <_malloc_r+0xea>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	442b      	add	r3, r5
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	f8d8 3000 	ldr.w	r3, [r8]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	bb62      	cbnz	r2, 8008ab4 <_malloc_r+0xdc>
 8008a5a:	f8c8 7000 	str.w	r7, [r8]
 8008a5e:	e00f      	b.n	8008a80 <_malloc_r+0xa8>
 8008a60:	6822      	ldr	r2, [r4, #0]
 8008a62:	1b52      	subs	r2, r2, r5
 8008a64:	d420      	bmi.n	8008aa8 <_malloc_r+0xd0>
 8008a66:	2a0b      	cmp	r2, #11
 8008a68:	d917      	bls.n	8008a9a <_malloc_r+0xc2>
 8008a6a:	1961      	adds	r1, r4, r5
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	6025      	str	r5, [r4, #0]
 8008a70:	bf18      	it	ne
 8008a72:	6059      	strne	r1, [r3, #4]
 8008a74:	6863      	ldr	r3, [r4, #4]
 8008a76:	bf08      	it	eq
 8008a78:	f8c8 1000 	streq.w	r1, [r8]
 8008a7c:	5162      	str	r2, [r4, r5]
 8008a7e:	604b      	str	r3, [r1, #4]
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f82f 	bl	8008ae4 <__malloc_unlock>
 8008a86:	f104 000b 	add.w	r0, r4, #11
 8008a8a:	1d23      	adds	r3, r4, #4
 8008a8c:	f020 0007 	bic.w	r0, r0, #7
 8008a90:	1ac2      	subs	r2, r0, r3
 8008a92:	bf1c      	itt	ne
 8008a94:	1a1b      	subne	r3, r3, r0
 8008a96:	50a3      	strne	r3, [r4, r2]
 8008a98:	e7af      	b.n	80089fa <_malloc_r+0x22>
 8008a9a:	6862      	ldr	r2, [r4, #4]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	bf0c      	ite	eq
 8008aa0:	f8c8 2000 	streq.w	r2, [r8]
 8008aa4:	605a      	strne	r2, [r3, #4]
 8008aa6:	e7eb      	b.n	8008a80 <_malloc_r+0xa8>
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	6864      	ldr	r4, [r4, #4]
 8008aac:	e7ae      	b.n	8008a0c <_malloc_r+0x34>
 8008aae:	463c      	mov	r4, r7
 8008ab0:	687f      	ldr	r7, [r7, #4]
 8008ab2:	e7b6      	b.n	8008a22 <_malloc_r+0x4a>
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d1fb      	bne.n	8008ab4 <_malloc_r+0xdc>
 8008abc:	2300      	movs	r3, #0
 8008abe:	6053      	str	r3, [r2, #4]
 8008ac0:	e7de      	b.n	8008a80 <_malloc_r+0xa8>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 f80c 	bl	8008ae4 <__malloc_unlock>
 8008acc:	e794      	b.n	80089f8 <_malloc_r+0x20>
 8008ace:	6005      	str	r5, [r0, #0]
 8008ad0:	e7d6      	b.n	8008a80 <_malloc_r+0xa8>
 8008ad2:	bf00      	nop
 8008ad4:	20001158 	.word	0x20001158

08008ad8 <__malloc_lock>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	@ (8008ae0 <__malloc_lock+0x8>)
 8008ada:	f000 b84b 	b.w	8008b74 <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	20001294 	.word	0x20001294

08008ae4 <__malloc_unlock>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	@ (8008aec <__malloc_unlock+0x8>)
 8008ae6:	f000 b846 	b.w	8008b76 <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	20001294 	.word	0x20001294

08008af0 <memset>:
 8008af0:	4402      	add	r2, r0
 8008af2:	4603      	mov	r3, r0
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d100      	bne.n	8008afa <memset+0xa>
 8008af8:	4770      	bx	lr
 8008afa:	f803 1b01 	strb.w	r1, [r3], #1
 8008afe:	e7f9      	b.n	8008af4 <memset+0x4>

08008b00 <_sbrk_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d06      	ldr	r5, [pc, #24]	@ (8008b1c <_sbrk_r+0x1c>)
 8008b04:	2300      	movs	r3, #0
 8008b06:	4604      	mov	r4, r0
 8008b08:	4608      	mov	r0, r1
 8008b0a:	602b      	str	r3, [r5, #0]
 8008b0c:	f7f8 f8d2 	bl	8000cb4 <_sbrk>
 8008b10:	1c43      	adds	r3, r0, #1
 8008b12:	d102      	bne.n	8008b1a <_sbrk_r+0x1a>
 8008b14:	682b      	ldr	r3, [r5, #0]
 8008b16:	b103      	cbz	r3, 8008b1a <_sbrk_r+0x1a>
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	bd38      	pop	{r3, r4, r5, pc}
 8008b1c:	20001298 	.word	0x20001298

08008b20 <__errno>:
 8008b20:	4b01      	ldr	r3, [pc, #4]	@ (8008b28 <__errno+0x8>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	2000002c 	.word	0x2000002c

08008b2c <__libc_init_array>:
 8008b2c:	b570      	push	{r4, r5, r6, lr}
 8008b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b64 <__libc_init_array+0x38>)
 8008b30:	4c0d      	ldr	r4, [pc, #52]	@ (8008b68 <__libc_init_array+0x3c>)
 8008b32:	1b64      	subs	r4, r4, r5
 8008b34:	10a4      	asrs	r4, r4, #2
 8008b36:	2600      	movs	r6, #0
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	d109      	bne.n	8008b50 <__libc_init_array+0x24>
 8008b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b6c <__libc_init_array+0x40>)
 8008b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b70 <__libc_init_array+0x44>)
 8008b40:	f000 f864 	bl	8008c0c <_init>
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	2600      	movs	r6, #0
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	d105      	bne.n	8008b5a <__libc_init_array+0x2e>
 8008b4e:	bd70      	pop	{r4, r5, r6, pc}
 8008b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b54:	4798      	blx	r3
 8008b56:	3601      	adds	r6, #1
 8008b58:	e7ee      	b.n	8008b38 <__libc_init_array+0xc>
 8008b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5e:	4798      	blx	r3
 8008b60:	3601      	adds	r6, #1
 8008b62:	e7f2      	b.n	8008b4a <__libc_init_array+0x1e>
 8008b64:	08008c48 	.word	0x08008c48
 8008b68:	08008c48 	.word	0x08008c48
 8008b6c:	08008c48 	.word	0x08008c48
 8008b70:	08008c4c 	.word	0x08008c4c

08008b74 <__retarget_lock_acquire_recursive>:
 8008b74:	4770      	bx	lr

08008b76 <__retarget_lock_release_recursive>:
 8008b76:	4770      	bx	lr

08008b78 <_free_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	d041      	beq.n	8008c04 <_free_r+0x8c>
 8008b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b84:	1f0c      	subs	r4, r1, #4
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	bfb8      	it	lt
 8008b8a:	18e4      	addlt	r4, r4, r3
 8008b8c:	f7ff ffa4 	bl	8008ad8 <__malloc_lock>
 8008b90:	4a1d      	ldr	r2, [pc, #116]	@ (8008c08 <_free_r+0x90>)
 8008b92:	6813      	ldr	r3, [r2, #0]
 8008b94:	b933      	cbnz	r3, 8008ba4 <_free_r+0x2c>
 8008b96:	6063      	str	r3, [r4, #4]
 8008b98:	6014      	str	r4, [r2, #0]
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba0:	f7ff bfa0 	b.w	8008ae4 <__malloc_unlock>
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	d908      	bls.n	8008bba <_free_r+0x42>
 8008ba8:	6820      	ldr	r0, [r4, #0]
 8008baa:	1821      	adds	r1, r4, r0
 8008bac:	428b      	cmp	r3, r1
 8008bae:	bf01      	itttt	eq
 8008bb0:	6819      	ldreq	r1, [r3, #0]
 8008bb2:	685b      	ldreq	r3, [r3, #4]
 8008bb4:	1809      	addeq	r1, r1, r0
 8008bb6:	6021      	streq	r1, [r4, #0]
 8008bb8:	e7ed      	b.n	8008b96 <_free_r+0x1e>
 8008bba:	461a      	mov	r2, r3
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	b10b      	cbz	r3, 8008bc4 <_free_r+0x4c>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d9fa      	bls.n	8008bba <_free_r+0x42>
 8008bc4:	6811      	ldr	r1, [r2, #0]
 8008bc6:	1850      	adds	r0, r2, r1
 8008bc8:	42a0      	cmp	r0, r4
 8008bca:	d10b      	bne.n	8008be4 <_free_r+0x6c>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	4401      	add	r1, r0
 8008bd0:	1850      	adds	r0, r2, r1
 8008bd2:	4283      	cmp	r3, r0
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	d1e0      	bne.n	8008b9a <_free_r+0x22>
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	6053      	str	r3, [r2, #4]
 8008bde:	4408      	add	r0, r1
 8008be0:	6010      	str	r0, [r2, #0]
 8008be2:	e7da      	b.n	8008b9a <_free_r+0x22>
 8008be4:	d902      	bls.n	8008bec <_free_r+0x74>
 8008be6:	230c      	movs	r3, #12
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	e7d6      	b.n	8008b9a <_free_r+0x22>
 8008bec:	6820      	ldr	r0, [r4, #0]
 8008bee:	1821      	adds	r1, r4, r0
 8008bf0:	428b      	cmp	r3, r1
 8008bf2:	bf04      	itt	eq
 8008bf4:	6819      	ldreq	r1, [r3, #0]
 8008bf6:	685b      	ldreq	r3, [r3, #4]
 8008bf8:	6063      	str	r3, [r4, #4]
 8008bfa:	bf04      	itt	eq
 8008bfc:	1809      	addeq	r1, r1, r0
 8008bfe:	6021      	streq	r1, [r4, #0]
 8008c00:	6054      	str	r4, [r2, #4]
 8008c02:	e7ca      	b.n	8008b9a <_free_r+0x22>
 8008c04:	bd38      	pop	{r3, r4, r5, pc}
 8008c06:	bf00      	nop
 8008c08:	20001158 	.word	0x20001158

08008c0c <_init>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr

08008c18 <_fini>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr
