
2025_STM32F407_Ultrasonic_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009990  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009b18  08009b18  0000ab18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b34  08009b34  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b34  08009b34  0000ab34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b3c  08009b3c  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b40  08009b40  0000ab40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009b44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a78  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199e0  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e8f  00000000  00000000  00024a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00028920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118c  00000000  00000000  00029fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243d0  00000000  00000000  0002b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf8e  00000000  00000000  0004f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41d5  00000000  00000000  0006c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014068f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063ac  00000000  00000000  001406d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00146a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b00 	.word	0x08009b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009b00 	.word	0x08009b00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fdfd 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f883 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f9d5 	bl	80008b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f8e9 	bl	80006dc <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f915 	bl	8000738 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f943 	bl	8000798 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000512:	f008 fe9f 	bl	8009254 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000516:	f000 f975 	bl	8000804 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Initialize trigger pin state
  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2120      	movs	r1, #32
 800051e:	4835      	ldr	r0, [pc, #212]	@ (80005f4 <main+0x100>)
 8000520:	f001 f92e 	bl	8001780 <HAL_GPIO_WritePin>

  //Start TIM1 Channel 2 in Input Capture Interrupt mode
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000524:	2104      	movs	r1, #4
 8000526:	4834      	ldr	r0, [pc, #208]	@ (80005f8 <main+0x104>)
 8000528:	f004 fefa 	bl	8005320 <HAL_TIM_IC_Start_IT>

  //Initially disable the interrupt, will be enabled by Trigger_Ultrasonic() function later
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 800052c:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <main+0x104>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	68da      	ldr	r2, [r3, #12]
 8000532:	4b31      	ldr	r3, [pc, #196]	@ (80005f8 <main+0x104>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f022 0204 	bic.w	r2, r2, #4
 800053a:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Trigger_Ultrasonic(); // Send trigger pulse to start measurement
 800053c:	f000 fade 	bl	8000afc <Trigger_Ultrasonic>


	  uint32_t timeout = HAL_GetTick() + 100; // 100ms timeout for measurement
 8000540:	f000 fe40 	bl	80011c4 <HAL_GetTick>
 8000544:	4603      	mov	r3, r0
 8000546:	3364      	adds	r3, #100	@ 0x64
 8000548:	607b      	str	r3, [r7, #4]
	  while (!Measurement_Ready && HAL_GetTick() < timeout) {
 800054a:	e001      	b.n	8000550 <main+0x5c>
		  // Wait for the interrupt to signal completion, with a timeout
		  MX_USB_HOST_Process(); //let code do other things if needed while waiting
 800054c:	f008 fea8 	bl	80092a0 <MX_USB_HOST_Process>
	  while (!Measurement_Ready && HAL_GetTick() < timeout) {
 8000550:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <main+0x108>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d105      	bne.n	8000566 <main+0x72>
 800055a:	f000 fe33 	bl	80011c4 <HAL_GetTick>
 800055e:	4602      	mov	r2, r0
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4293      	cmp	r3, r2
 8000564:	d8f2      	bhi.n	800054c <main+0x58>

	  }

	  //ping received back from sensor, preceded to measurement display
	  if (Measurement_Ready)
 8000566:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <main+0x108>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2b00      	cmp	r3, #0
 800056e:	d02e      	beq.n	80005ce <main+0xda>
	  {
		  Measurement_Ready = 0; // Reset the flag after reading
 8000570:	4b22      	ldr	r3, [pc, #136]	@ (80005fc <main+0x108>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]

		  //read distance via debugger on live vars Distance_cm

		  // LED on for distances 0 to 10 cm for debugging purposes. If distance within range then red led on, if out of range then orange led on
		  if (Distance_cm < 10.0 && Distance_cm > 0.0) { // Check > 0 for valid reading
 8000576:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <main+0x10c>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000588:	d514      	bpl.n	80005b4 <main+0xc0>
 800058a:	4b1d      	ldr	r3, [pc, #116]	@ (8000600 <main+0x10c>)
 800058c:	edd3 7a00 	vldr	s15, [r3]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	dd0c      	ble.n	80005b4 <main+0xc0>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); //LED ON RED
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a0:	4818      	ldr	r0, [pc, #96]	@ (8000604 <main+0x110>)
 80005a2:	f001 f8ed 	bl	8001780 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); //LED OFF ORANGE
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ac:	4815      	ldr	r0, [pc, #84]	@ (8000604 <main+0x110>)
 80005ae:	f001 f8e7 	bl	8001780 <HAL_GPIO_WritePin>
 80005b2:	e018      	b.n	80005e6 <main+0xf2>
		  } else {
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); //LED OFF RED
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ba:	4812      	ldr	r0, [pc, #72]	@ (8000604 <main+0x110>)
 80005bc:	f001 f8e0 	bl	8001780 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); //LED ON ORANGE
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <main+0x110>)
 80005c8:	f001 f8da 	bl	8001780 <HAL_GPIO_WritePin>
 80005cc:	e00b      	b.n	80005e6 <main+0xf2>
		  }
	  } else {
		// Handle Timeout or Error
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // Ensure LED is off on timeout
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <main+0x110>)
 80005d6:	f001 f8d3 	bl	8001780 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e0:	4808      	ldr	r0, [pc, #32]	@ (8000604 <main+0x110>)
 80005e2:	f001 f8cd 	bl	8001780 <HAL_GPIO_WritePin>
	  }


	  // Delay before next measurement cycle
	  HAL_Delay(100);
 80005e6:	2064      	movs	r0, #100	@ 0x64
 80005e8:	f000 fdf8 	bl	80011dc <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ec:	f008 fe58 	bl	80092a0 <MX_USB_HOST_Process>
  {
 80005f0:	e7a4      	b.n	800053c <main+0x48>
 80005f2:	bf00      	nop
 80005f4:	40020800 	.word	0x40020800
 80005f8:	2000018c 	.word	0x2000018c
 80005fc:	200001e1 	.word	0x200001e1
 8000600:	200001e4 	.word	0x200001e4
 8000604:	40020c00 	.word	0x40020c00

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f009 f9e4 	bl	80099e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	4a27      	ldr	r2, [pc, #156]	@ (80006d4 <SystemClock_Config+0xcc>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	@ 0x40
 800063c:	4b25      	ldr	r3, [pc, #148]	@ (80006d4 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b22      	ldr	r3, [pc, #136]	@ (80006d8 <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <SystemClock_Config+0xd0>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f003 ffa8 	bl	80045e4 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800069a:	f000 fae9 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 fa09 	bl	8004ad4 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c8:	f000 fad2 	bl	8000c70 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	@ 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	@ (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_I2C1_Init+0x50>)
 800071a:	f003 f97f 	bl	8003a1c <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 faa4 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000098 	.word	0x20000098
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_I2S3_Init+0x54>)
 800073e:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <MX_I2S3_Init+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2S3_Init+0x54>)
 8000744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000748:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_I2S3_Init+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_I2S3_Init+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_I2S3_Init+0x54>)
 8000758:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800075c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_I2S3_Init+0x54>)
 8000760:	4a0c      	ldr	r2, [pc, #48]	@ (8000794 <MX_I2S3_Init+0x5c>)
 8000762:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_I2S3_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_I2S3_Init+0x54>)
 8000778:	f003 fa94 	bl	8003ca4 <HAL_I2S_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000782:	f000 fa75 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000ec 	.word	0x200000ec
 8000790:	40003c00 	.word	0x40003c00
 8000794:	00017700 	.word	0x00017700

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f004 fcc1 	bl	8005170 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 fa3c 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000134 	.word	0x20000134
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000820:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000822:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <MX_TIM1_Init+0xa8>)
 8000824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000828:	22a7      	movs	r2, #167	@ 0xa7
 800082a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000832:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800084c:	4816      	ldr	r0, [pc, #88]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 800084e:	f004 fd18 	bl	8005282 <HAL_TIM_IC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000858:	f000 fa0a 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480f      	ldr	r0, [pc, #60]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 800086c:	f005 fa74 	bl	8005d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000876:	f000 f9fb 	bl	8000c70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800087a:	230a      	movs	r3, #10
 800087c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800087e:	2301      	movs	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2204      	movs	r2, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_TIM1_Init+0xa4>)
 8000892:	f004 ff5d 	bl	8005750 <HAL_TIM_IC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800089c:	f000 f9e8 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000018c 	.word	0x2000018c
 80008ac:	40010000 	.word	0x40010000

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b74      	ldr	r3, [pc, #464]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a73      	ldr	r2, [pc, #460]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b71      	ldr	r3, [pc, #452]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a6c      	ldr	r2, [pc, #432]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b6a      	ldr	r3, [pc, #424]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b66      	ldr	r3, [pc, #408]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a65      	ldr	r2, [pc, #404]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b63      	ldr	r3, [pc, #396]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a5e      	ldr	r2, [pc, #376]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b5c      	ldr	r3, [pc, #368]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b58      	ldr	r3, [pc, #352]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a57      	ldr	r2, [pc, #348]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b55      	ldr	r3, [pc, #340]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b51      	ldr	r3, [pc, #324]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a50      	ldr	r2, [pc, #320]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4e      	ldr	r3, [pc, #312]	@ (8000a9c <MX_GPIO_Init+0x1ec>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2108      	movs	r1, #8
 8000972:	484b      	ldr	r0, [pc, #300]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000974:	f000 ff04 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2101      	movs	r1, #1
 800097c:	4849      	ldr	r0, [pc, #292]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 800097e:	f000 feff 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PULSE_TRIG_GPIO_Port, PULSE_TRIG_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4847      	ldr	r0, [pc, #284]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 8000988:	f000 fefa 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098c:	2200      	movs	r2, #0
 800098e:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000992:	4845      	ldr	r0, [pc, #276]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000994:	f000 fef4 	bl	8001780 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000998:	2308      	movs	r3, #8
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	483c      	ldr	r0, [pc, #240]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 80009b0:	f000 fd4a 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PULSE_TRIG_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|PULSE_TRIG_Pin;
 80009b4:	2321      	movs	r3, #33	@ 0x21
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4836      	ldr	r0, [pc, #216]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 80009cc:	f000 fd3c 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d0:	2308      	movs	r3, #8
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e0:	2305      	movs	r3, #5
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482e      	ldr	r0, [pc, #184]	@ (8000aa4 <MX_GPIO_Init+0x1f4>)
 80009ec:	f000 fd2c 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_GPIO_Init+0x1fc>)
 8000a06:	f000 fd1f 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4824      	ldr	r0, [pc, #144]	@ (8000ab0 <MX_GPIO_Init+0x200>)
 8000a1e:	f000 fd13 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a34:	2305      	movs	r3, #5
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <MX_GPIO_Init+0x200>)
 8000a40:	f000 fd02 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a44:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a48:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4812      	ldr	r0, [pc, #72]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a5e:	f000 fcf3 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a62:	2320      	movs	r3, #32
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	@ (8000aa8 <MX_GPIO_Init+0x1f8>)
 8000a76:	f000 fce7 	bl	8001448 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <MX_GPIO_Init+0x1f0>)
 8000a90:	f000 fcda 	bl	8001448 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	@ 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <delay_us>:
volatile float Distance_cm = 0.0f; // Calculated distance

// Function to implement microsecond delay
// For 168MHz clock, dividing by 168 gives rough microseconds.
void delay_us(uint32_t us)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    __IO uint32_t HCLK_Frequency = HAL_RCC_GetHCLKFreq(); // Get HCLK frequency
 8000abc:	f004 f9f6 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60fb      	str	r3, [r7, #12]
    // Simple loop delay - Adjust the division factor based on instruction cycles per loop iteration
    // For 168MHz, /168 gives roughly 1 million loops per second. Add some overhead.
    uint32_t delay_loops = (HCLK_Frequency / 1000000) * us / 4;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <delay_us+0x44>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	0c9b      	lsrs	r3, r3, #18
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < delay_loops; ++i)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e003      	b.n	8000ae6 <delay_us+0x32>
    {
        __NOP(); // No operation - prevents loop optimization
 8000ade:	bf00      	nop
    for (uint32_t i = 0; i < delay_loops; ++i)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	697a      	ldr	r2, [r7, #20]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3f7      	bcc.n	8000ade <delay_us+0x2a>
    }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	431bde83 	.word	0x431bde83

08000afc <Trigger_Ultrasonic>:


// Function to trigger the sensor measurement
void Trigger_Ultrasonic(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    // Ensure measurement isn't already in progress or ready to be read
    if (!Is_First_Captured && !Measurement_Ready)
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <Trigger_Ultrasonic+0x48>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d119      	bne.n	8000b3e <Trigger_Ultrasonic+0x42>
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <Trigger_Ultrasonic+0x4c>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d114      	bne.n	8000b3e <Trigger_Ultrasonic+0x42>
    {
        // Send ~10us Trigger Pulse
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <Trigger_Ultrasonic+0x50>)
 8000b1a:	f000 fe31 	bl	8001780 <HAL_GPIO_WritePin>
        delay_us(10); // Use microsecond delay
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f7ff ffc8 	bl	8000ab4 <delay_us>
        HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2120      	movs	r1, #32
 8000b28:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <Trigger_Ultrasonic+0x50>)
 8000b2a:	f000 fe29 	bl	8001780 <HAL_GPIO_WritePin>

        // Ensure interrupts are enabled and start listening for the rising edge
        __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <Trigger_Ultrasonic+0x54>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <Trigger_Ultrasonic+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f042 0204 	orr.w	r2, r2, #4
 8000b3c:	60da      	str	r2, [r3, #12]
    }
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001e0 	.word	0x200001e0
 8000b48:	200001e1 	.word	0x200001e1
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	2000018c 	.word	0x2000018c

08000b54 <HAL_TIM_IC_CaptureCallback>:

// Input Capture Callback Function
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    // Check if the interrupt source is TIM1 and the specific channel (Channel 2)
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a3b      	ldr	r2, [pc, #236]	@ (8000c50 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d16f      	bne.n	8000c46 <HAL_TIM_IC_CaptureCallback+0xf2>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7f1b      	ldrb	r3, [r3, #28]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d16b      	bne.n	8000c46 <HAL_TIM_IC_CaptureCallback+0xf2>
    {
        if (Is_First_Captured == 0) // If this is the first capture (Rising Edge)
 8000b6e:	4b39      	ldr	r3, [pc, #228]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11a      	bne.n	8000bae <HAL_TIM_IC_CaptureCallback+0x5a>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // Read the rising edge capture value
 8000b78:	2104      	movs	r1, #4
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f004 fe84 	bl	8005888 <HAL_TIM_ReadCapturedValue>
 8000b80:	4603      	mov	r3, r0
 8000b82:	4a35      	ldr	r2, [pc, #212]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000b84:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1; // Set flag indicating rising edge is captured
 8000b86:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]

            // Now change the polarity to capture the falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6a1a      	ldr	r2, [r3, #32]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000b9a:	621a      	str	r2, [r3, #32]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a1a      	ldr	r2, [r3, #32]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	621a      	str	r2, [r3, #32]

            // Disable the CC2 interrupt until the next trigger pulse, make sure readings arn't had before waiting period is over
             __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
        }
    }
}
 8000bac:	e04b      	b.n	8000c46 <HAL_TIM_IC_CaptureCallback+0xf2>
        else if (Is_First_Captured == 1) // If this is the second capture (Falling Edge)
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d146      	bne.n	8000c46 <HAL_TIM_IC_CaptureCallback+0xf2>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // Read the falling edge capture value
 8000bb8:	2104      	movs	r1, #4
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f004 fe64 	bl	8005888 <HAL_TIM_ReadCapturedValue>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a26      	ldr	r2, [pc, #152]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bc4:	6013      	str	r3, [r2, #0]
            if (IC_Val2 > IC_Val1)
 8000bc6:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	4b23      	ldr	r3, [pc, #140]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <HAL_TIM_IC_CaptureCallback+0x8e>
                Difference = IC_Val2 - IC_Val1;
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	4a20      	ldr	r2, [pc, #128]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e008      	b.n	8000bf4 <HAL_TIM_IC_CaptureCallback+0xa0>
                Difference = (0xFFFF - IC_Val1) + IC_Val2 + 1;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_TIM_IC_CaptureCallback+0x108>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bf2:	6013      	str	r3, [r2, #0]
            Distance_cm = (float)Difference / 58.3f; // Use floating point division, set global var so accessible from main
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	ee07 3a90 	vmov	s15, r3
 8000bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c00:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000c64 <HAL_TIM_IC_CaptureCallback+0x110>
 8000c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c0a:	edc3 7a00 	vstr	s15, [r3]
            Is_First_Captured = 0; // Reset the flag for the next cycle
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
            Measurement_Ready = 1; // Signal that a new distance value is available
 8000c14:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a1a      	ldr	r2, [r3, #32]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000c28:	621a      	str	r2, [r3, #32]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6a12      	ldr	r2, [r2, #32]
 8000c34:	621a      	str	r2, [r3, #32]
             __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f022 0204 	bic.w	r2, r2, #4
 8000c44:	60da      	str	r2, [r3, #12]
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40010000 	.word	0x40010000
 8000c54:	200001e0 	.word	0x200001e0
 8000c58:	200001d4 	.word	0x200001d4
 8000c5c:	200001d8 	.word	0x200001d8
 8000c60:	200001dc 	.word	0x200001dc
 8000c64:	42693333 	.word	0x42693333
 8000c68:	200001e4 	.word	0x200001e4
 8000c6c:	200001e1 	.word	0x200001e1

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <Error_Handler+0x8>

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f000 fb82 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	@ (8000d50 <HAL_I2C_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12c      	bne.n	8000d48 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d0a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <HAL_I2C_MspInit+0x8c>)
 8000d28:	f000 fb8e 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	@ 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020400 	.word	0x40020400

08000d5c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08e      	sub	sp, #56	@ 0x38
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a31      	ldr	r2, [pc, #196]	@ (8000e4c <HAL_I2S_MspInit+0xf0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d15a      	bne.n	8000e42 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d90:	23c0      	movs	r3, #192	@ 0xc0
 8000d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 f8a5 	bl	8004eec <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000da8:	f7ff ff62 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a26      	ldr	r2, [pc, #152]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df4:	4b16      	ldr	r3, [pc, #88]	@ (8000e50 <HAL_I2S_MspInit+0xf4>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e00:	2310      	movs	r3, #16
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e10:	2306      	movs	r3, #6
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480e      	ldr	r0, [pc, #56]	@ (8000e54 <HAL_I2S_MspInit+0xf8>)
 8000e1c:	f000 fb14 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e20:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e32:	2306      	movs	r3, #6
 8000e34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <HAL_I2S_MspInit+0xfc>)
 8000e3e:	f000 fb03 	bl	8001448 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	@ 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40003c00 	.word	0x40003c00
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020800 	.word	0x40020800

08000e5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_SPI_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_SPI_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eb6:	23e0      	movs	r3, #224	@ 0xe0
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_SPI_MspInit+0x8c>)
 8000ed2:	f000 fab9 	bl	8001448 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40013000 	.word	0x40013000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	@ (8000f80 <HAL_TIM_IC_MspInit+0x94>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d134      	bne.n	8000f78 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a14      	ldr	r2, [pc, #80]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_TIM_IC_MspInit+0x98>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4809      	ldr	r0, [pc, #36]	@ (8000f88 <HAL_TIM_IC_MspInit+0x9c>)
 8000f64:	f000 fa70 	bl	8001448 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	201b      	movs	r0, #27
 8000f6e:	f000 fa34 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f72:	201b      	movs	r0, #27
 8000f74:	f000 fa4d 	bl	8001412 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	@ 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40010000 	.word	0x40010000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f8db 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <TIM1_CC_IRQHandler+0x10>)
 8000ff2:	f004 fabd 	bl	8005570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000018c 	.word	0x2000018c

08001000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001004:	4802      	ldr	r0, [pc, #8]	@ (8001010 <OTG_FS_IRQHandler+0x10>)
 8001006:	f000 feb5 	bl	8001d74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200005cc 	.word	0x200005cc

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f008 fce6 	bl	8009a14 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20020000 	.word	0x20020000
 8001074:	00000400 	.word	0x00000400
 8001078:	200001e8 	.word	0x200001e8
 800107c:	20000af8 	.word	0x20000af8

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a8:	f7ff ffea 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d2:	f008 fca5 	bl	8009a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fa0d 	bl	80004f4 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80010e8:	08009b44 	.word	0x08009b44
  ldr r2, =_sbss
 80010ec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80010f0:	20000af4 	.word	0x20000af4

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	@ (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f94f 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fda6 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f967 	bl	800142e <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001178:	f000 f92f 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000000 	.word	0x20000000
 8001194:	20000008 	.word	0x20000008
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008
 80011c0:	200001ec 	.word	0x200001ec

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200001ec 	.word	0x200001ec

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff ffee 	bl	80011c4 <HAL_GetTick>
 80011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001202:	bf00      	nop
 8001204:	f7ff ffde 	bl	80011c4 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	@ (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	@ (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	@ (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	@ (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	@ 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	@ 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e16b      	b.n	800173c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 815a 	bne.w	8001736 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001496:	2b02      	cmp	r3, #2
 8001498:	d130      	bne.n	80014fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68da      	ldr	r2, [r3, #12]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	f003 0201 	and.w	r2, r3, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b03      	cmp	r3, #3
 8001506:	d017      	beq.n	8001538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2203      	movs	r2, #3
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d123      	bne.n	800158c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	08da      	lsrs	r2, r3, #3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3208      	adds	r2, #8
 800154c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	220f      	movs	r2, #15
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	08da      	lsrs	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3208      	adds	r2, #8
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80b4 	beq.w	8001736 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b60      	ldr	r3, [pc, #384]	@ (8001754 <HAL_GPIO_Init+0x30c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001754 <HAL_GPIO_Init+0x30c>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b5d      	ldr	r3, [pc, #372]	@ (8001754 <HAL_GPIO_Init+0x30c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001758 <HAL_GPIO_Init+0x310>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_GPIO_Init+0x314>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d02b      	beq.n	800166e <HAL_GPIO_Init+0x226>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a51      	ldr	r2, [pc, #324]	@ (8001760 <HAL_GPIO_Init+0x318>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d025      	beq.n	800166a <HAL_GPIO_Init+0x222>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a50      	ldr	r2, [pc, #320]	@ (8001764 <HAL_GPIO_Init+0x31c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01f      	beq.n	8001666 <HAL_GPIO_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_GPIO_Init+0x320>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0x21a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_GPIO_Init+0x324>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d013      	beq.n	800165e <HAL_GPIO_Init+0x216>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a4d      	ldr	r2, [pc, #308]	@ (8001770 <HAL_GPIO_Init+0x328>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00d      	beq.n	800165a <HAL_GPIO_Init+0x212>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x32c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x20e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4b      	ldr	r2, [pc, #300]	@ (8001778 <HAL_GPIO_Init+0x330>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_GPIO_Init+0x20a>
 800164e:	2307      	movs	r3, #7
 8001650:	e00e      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001652:	2308      	movs	r3, #8
 8001654:	e00c      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001656:	2306      	movs	r3, #6
 8001658:	e00a      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800165a:	2305      	movs	r3, #5
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800165e:	2304      	movs	r3, #4
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x228>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x228>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	@ (8001758 <HAL_GPIO_Init+0x310>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_GPIO_Init+0x334>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a32      	ldr	r2, [pc, #200]	@ (800177c <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b30      	ldr	r3, [pc, #192]	@ (800177c <HAL_GPIO_Init+0x334>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a27      	ldr	r2, [pc, #156]	@ (800177c <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HAL_GPIO_Init+0x334>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1d      	ldr	r2, [pc, #116]	@ (800177c <HAL_GPIO_Init+0x334>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b1b      	ldr	r3, [pc, #108]	@ (800177c <HAL_GPIO_Init+0x334>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a12      	ldr	r2, [pc, #72]	@ (800177c <HAL_GPIO_Init+0x334>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f ae90 	bls.w	8001464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	@ 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40021400 	.word	0x40021400
 8001774:	40021800 	.word	0x40021800
 8001778:	40021c00 	.word	0x40021c00
 800177c:	40013c00 	.word	0x40013c00

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800179c:	e003      	b.n	80017a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af02      	add	r7, sp, #8
 80017b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e059      	b.n	8001878 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f007 fd96 	bl	8009310 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2203      	movs	r2, #3
 80017e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f2:	d102      	bne.n	80017fa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fbaf 	bl	8005f62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c1a      	ldrb	r2, [r3, #16]
 800180c:	f88d 2000 	strb.w	r2, [sp]
 8001810:	3304      	adds	r3, #4
 8001812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001814:	f004 fb30 	bl	8005e78 <USB_CoreInit>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e026      	b.n	8001878 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fba7 	bl	8005f84 <USB_SetCurrentMode>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e017      	b.n	8001878 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7c1a      	ldrb	r2, [r3, #16]
 8001850:	f88d 2000 	strb.w	r2, [sp]
 8001854:	3304      	adds	r3, #4
 8001856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001858:	f004 fd4a 	bl	80062f0 <USB_HostInit>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2202      	movs	r2, #2
 8001866:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e004      	b.n	8001878 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af04      	add	r7, sp, #16
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	70fb      	strb	r3, [r7, #3]
 8001892:	460b      	mov	r3, r1
 8001894:	70bb      	strb	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800189a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800189c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_HCD_HC_Init+0x2c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e09d      	b.n	80019e8 <HAL_HCD_HC_Init+0x168>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3319      	adds	r3, #25
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3314      	adds	r3, #20
 80018d8:	787a      	ldrb	r2, [r7, #1]
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3315      	adds	r3, #21
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	3326      	adds	r3, #38	@ 0x26
 8001900:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001904:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	78bb      	ldrb	r3, [r7, #2]
 800190a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800190e:	b2d8      	uxtb	r0, r3
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	1a9b      	subs	r3, r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3316      	adds	r3, #22
 800191e:	4602      	mov	r2, r0
 8001920:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	4619      	mov	r1, r3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fbc8 	bl	80020bc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800192c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001930:	2b00      	cmp	r3, #0
 8001932:	da0a      	bge.n	800194a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3317      	adds	r3, #23
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e009      	b.n	800195e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	3317      	adds	r3, #23
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f004 fe28 	bl	80065b8 <USB_GetHostSpeed>
 8001968:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800196a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10b      	bne.n	800198a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001972:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_HCD_HC_Init+0x10a>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d104      	bne.n	800198a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2bbc      	cmp	r3, #188	@ 0xbc
 8001984:	d901      	bls.n	800198a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001986:	23bc      	movs	r3, #188	@ 0xbc
 8001988:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3318      	adds	r3, #24
 800199a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	b298      	uxth	r0, r3
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3328      	adds	r3, #40	@ 0x28
 80019b4:	4602      	mov	r2, r0
 80019b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	787c      	ldrb	r4, [r7, #1]
 80019c2:	78ba      	ldrb	r2, [r7, #2]
 80019c4:	78f9      	ldrb	r1, [r7, #3]
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f004 fe17 	bl	8006608 <USB_HC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_HCD_HC_Halt+0x1e>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e00f      	b.n	8001a2e <HAL_HCD_HC_Halt+0x3e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 f9a9 	bl	8006d76 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	70fb      	strb	r3, [r7, #3]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70bb      	strb	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a52:	78fa      	ldrb	r2, [r7, #3]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3317      	adds	r3, #23
 8001a62:	78ba      	ldrb	r2, [r7, #2]
 8001a64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3326      	adds	r3, #38	@ 0x26
 8001a76:	787a      	ldrb	r2, [r7, #1]
 8001a78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a7a:	7c3b      	ldrb	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d114      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	332a      	adds	r3, #42	@ 0x2a
 8001a90:	2203      	movs	r2, #3
 8001a92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3319      	adds	r3, #25
 8001aa4:	7f3a      	ldrb	r2, [r7, #28]
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e009      	b.n	8001abe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	332a      	adds	r3, #42	@ 0x2a
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001abe:	787b      	ldrb	r3, [r7, #1]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	f200 8102 	bhi.w	8001cca <HAL_HCD_HC_SubmitRequest+0x292>
 8001ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8001acc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001acc:	08001add 	.word	0x08001add
 8001ad0:	08001cb5 	.word	0x08001cb5
 8001ad4:	08001ba1 	.word	0x08001ba1
 8001ad8:	08001c2b 	.word	0x08001c2b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001adc:	7c3b      	ldrb	r3, [r7, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 80f5 	bne.w	8001cce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001ae4:	78bb      	ldrb	r3, [r7, #2]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d12d      	bne.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001aea:	8b3b      	ldrh	r3, [r7, #24]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	333d      	adds	r3, #61	@ 0x3d
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	333d      	adds	r3, #61	@ 0x3d
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1a:	78fa      	ldrb	r2, [r7, #3]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	332a      	adds	r3, #42	@ 0x2a
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001b2e:	e0ce      	b.n	8001cce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	332a      	adds	r3, #42	@ 0x2a
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
      break;
 8001b44:	e0c3      	b.n	8001cce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	331a      	adds	r3, #26
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 80b8 	bne.w	8001cce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b5e:	78fa      	ldrb	r2, [r7, #3]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	333c      	adds	r3, #60	@ 0x3c
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	332a      	adds	r3, #42	@ 0x2a
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
      break;
 8001b88:	e0a1      	b.n	8001cce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	332a      	adds	r3, #42	@ 0x2a
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	701a      	strb	r2, [r3, #0]
      break;
 8001b9e:	e096      	b.n	8001cce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ba0:	78bb      	ldrb	r3, [r7, #2]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d120      	bne.n	8001be8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba6:	78fa      	ldrb	r2, [r7, #3]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	333d      	adds	r3, #61	@ 0x3d
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10a      	bne.n	8001bd2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bbc:	78fa      	ldrb	r2, [r7, #3]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	011b      	lsls	r3, r3, #4
 8001bc4:	1a9b      	subs	r3, r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	332a      	adds	r3, #42	@ 0x2a
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bd0:	e07e      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd2:	78fa      	ldrb	r2, [r7, #3]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	1a9b      	subs	r3, r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	332a      	adds	r3, #42	@ 0x2a
 8001be2:	2202      	movs	r2, #2
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	e073      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	333c      	adds	r3, #60	@ 0x3c
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	332a      	adds	r3, #42	@ 0x2a
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	e05d      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c14:	78fa      	ldrb	r2, [r7, #3]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	332a      	adds	r3, #42	@ 0x2a
 8001c24:	2202      	movs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]
      break;
 8001c28:	e052      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d120      	bne.n	8001c72 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	333d      	adds	r3, #61	@ 0x3d
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	332a      	adds	r3, #42	@ 0x2a
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c5a:	e039      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	332a      	adds	r3, #42	@ 0x2a
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	701a      	strb	r2, [r3, #0]
      break;
 8001c70:	e02e      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	333c      	adds	r3, #60	@ 0x3c
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	332a      	adds	r3, #42	@ 0x2a
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
      break;
 8001c9c:	e018      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	332a      	adds	r3, #42	@ 0x2a
 8001cae:	2202      	movs	r2, #2
 8001cb0:	701a      	strb	r2, [r3, #0]
      break;
 8001cb2:	e00d      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fa      	ldrb	r2, [r7, #3]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	332a      	adds	r3, #42	@ 0x2a
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
      break;
 8001cc8:	e002      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001cce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cd0:	78fa      	ldrb	r2, [r7, #3]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	332c      	adds	r3, #44	@ 0x2c
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	8b39      	ldrh	r1, [r7, #24]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	1a9b      	subs	r3, r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4403      	add	r3, r0
 8001cf4:	3334      	adds	r3, #52	@ 0x34
 8001cf6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	334c      	adds	r3, #76	@ 0x4c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d0c:	78fa      	ldrb	r2, [r7, #3]
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3338      	adds	r3, #56	@ 0x38
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3315      	adds	r3, #21
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a9b      	subs	r3, r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	334d      	adds	r3, #77	@ 0x4d
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	3310      	adds	r3, #16
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	1d19      	adds	r1, r3, #4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	799b      	ldrb	r3, [r3, #6]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f004 fd7c 	bl	8006860 <USB_HC_StartXfer>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop

08001d74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fa70 	bl	8006270 <USB_GetMode>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	f040 80fb 	bne.w	8001f8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 fa33 	bl	8006208 <USB_ReadInterrupts>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80f1 	beq.w	8001f8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fa2a 	bl	8006208 <USB_ReadInterrupts>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001dbe:	d104      	bne.n	8001dca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 fa1a 	bl	8006208 <USB_ReadInterrupts>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001dde:	d104      	bne.n	8001dea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fa0a 	bl	8006208 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dfa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001dfe:	d104      	bne.n	8001e0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 f9fa 	bl	8006208 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d103      	bne.n	8001e26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2202      	movs	r2, #2
 8001e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 f9ec 	bl	8006208 <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e3a:	d120      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e56:	2110      	movs	r1, #16
 8001e58:	6938      	ldr	r0, [r7, #16]
 8001e5a:	f004 f8df 	bl	800601c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e5e:	6938      	ldr	r0, [r7, #16]
 8001e60:	f004 f90e 	bl	8006080 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7a5b      	ldrb	r3, [r3, #9]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d105      	bne.n	8001e78 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2101      	movs	r1, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fb00 	bl	8006478 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f007 fac7 	bl	800940c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f9c0 	bl	8006208 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e92:	d102      	bne.n	8001e9a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f001 fd4d 	bl	8003934 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 f9b2 	bl	8006208 <USB_ReadInterrupts>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d106      	bne.n	8001ebc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f007 fa90 	bl	80093d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f004 f9a1 	bl	8006208 <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ed0:	d139      	bne.n	8001f46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 ff3c 	bl	8006d54 <USB_HC_ReadInterrupt>
 8001edc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e025      	b.n	8001f30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f0e:	d106      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f905 	bl	8002126 <HCD_HC_IN_IRQHandler>
 8001f1c:	e005      	b.n	8001f2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 ff67 	bl	8002df8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	795b      	ldrb	r3, [r3, #5]
 8001f34:	461a      	mov	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d3d3      	bcc.n	8001ee4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 f95c 	bl	8006208 <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d101      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x1ea>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_HCD_IRQHandler+0x1ec>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d014      	beq.n	8001f8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699a      	ldr	r2, [r3, #24]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0210 	bic.w	r2, r2, #16
 8001f72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f001 fbfe 	bl	8003776 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0210 	orr.w	r2, r2, #16
 8001f88:	619a      	str	r2, [r3, #24]
 8001f8a:	e000      	b.n	8001f8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001f8c:	bf00      	nop
    }
  }
}
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_HCD_Start+0x16>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e013      	b.n	8001fd2 <HAL_HCD_Start+0x3e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fac4 	bl	8006546 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 ffbc 	bl	8005f40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_HCD_Stop+0x16>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00d      	b.n	800200c <HAL_HCD_Stop+0x32>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f005 f817 	bl	8007030 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fa66 	bl	80064f2 <USB_ResetPort>
 8002026:	4603      	mov	r3, r0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	334c      	adds	r3, #76	@ 0x4c
 800204c:	781b      	ldrb	r3, [r3, #0]
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	3338      	adds	r3, #56	@ 0x38
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 faa8 	bl	80065e6 <USB_GetCurrentFrame>
 8002096:	4603      	mov	r3, r0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f004 fa83 	bl	80065b8 <USB_GetHostSpeed>
 80020b2:	4603      	mov	r3, r0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	331a      	adds	r3, #26
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	331b      	adds	r3, #27
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	3325      	adds	r3, #37	@ 0x25
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	3324      	adds	r3, #36	@ 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
 800212e:	460b      	mov	r3, r1
 8002130:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f872 	bl	800622e <USB_ReadChInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11a      	bne.n	800218a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2304      	movs	r3, #4
 8002164:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	334d      	adds	r3, #77	@ 0x4d
 8002176:	2207      	movs	r2, #7
 8002178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f004 fdf7 	bl	8006d76 <USB_HC_Halt>
 8002188:	e09e      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f84b 	bl	800622e <USB_ReadChInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a2:	d11b      	bne.n	80021dc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b0:	461a      	mov	r2, r3
 80021b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	334d      	adds	r3, #77	@ 0x4d
 80021c8:	2208      	movs	r2, #8
 80021ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fdce 	bl	8006d76 <USB_HC_Halt>
 80021da:	e075      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 f822 	bl	800622e <USB_ReadChInterrupts>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d11a      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002200:	461a      	mov	r2, r3
 8002202:	2308      	movs	r3, #8
 8002204:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	334d      	adds	r3, #77	@ 0x4d
 8002216:	2206      	movs	r2, #6
 8002218:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fda7 	bl	8006d76 <USB_HC_Halt>
 8002228:	e04e      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fffb 	bl	800622e <USB_ReadChInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d11b      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002256:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	334d      	adds	r3, #77	@ 0x4d
 8002268:	2209      	movs	r2, #9
 800226a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f004 fd7e 	bl	8006d76 <USB_HC_Halt>
 800227a:	e025      	b.n	80022c8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f003 ffd2 	bl	800622e <USB_ReadChInterrupts>
 800228a:	4603      	mov	r3, r0
 800228c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002290:	2b80      	cmp	r3, #128	@ 0x80
 8002292:	d119      	bne.n	80022c8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	334d      	adds	r3, #77	@ 0x4d
 80022b6:	2207      	movs	r2, #7
 80022b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 fd57 	bl	8006d76 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 ffac 	bl	800622e <USB_ReadChInterrupts>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e0:	d112      	bne.n	8002308 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 fd43 	bl	8006d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022fc:	461a      	mov	r2, r3
 80022fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002302:	6093      	str	r3, [r2, #8]
 8002304:	f000 bd75 	b.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f003 ff8c 	bl	800622e <USB_ReadChInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 8128 	bne.w	8002572 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800232e:	461a      	mov	r2, r3
 8002330:	2320      	movs	r3, #32
 8002332:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	331b      	adds	r3, #27
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d119      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	331b      	adds	r3, #27
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	440a      	add	r2, r1
 8002374:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800237c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	799b      	ldrb	r3, [r3, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01b      	beq.n	80023be <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3330      	adds	r3, #48	@ 0x30
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	1ac9      	subs	r1, r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4403      	add	r3, r0
 80023ba:	3338      	adds	r3, #56	@ 0x38
 80023bc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334d      	adds	r3, #77	@ 0x4d
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	3344      	adds	r3, #68	@ 0x44
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3326      	adds	r3, #38	@ 0x26
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3326      	adds	r3, #38	@ 0x26
 800241e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002420:	2b02      	cmp	r3, #2
 8002422:	d110      	bne.n	8002446 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f004 fca2 	bl	8006d76 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800243e:	461a      	mov	r2, r3
 8002440:	2310      	movs	r3, #16
 8002442:	6093      	str	r3, [r2, #8]
 8002444:	e03d      	b.n	80024c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	3326      	adds	r3, #38	@ 0x26
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d00a      	beq.n	8002472 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	3326      	adds	r3, #38	@ 0x26
 800246c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800246e:	2b01      	cmp	r3, #1
 8002470:	d127      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	0151      	lsls	r1, r2, #5
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	440a      	add	r2, r1
 8002488:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800248c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002490:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	334c      	adds	r3, #76	@ 0x4c
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	334c      	adds	r3, #76	@ 0x4c
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f006 ffb3 	bl	8009428 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	799b      	ldrb	r3, [r3, #6]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d13b      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3338      	adds	r3, #56	@ 0x38
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4403      	add	r3, r0
 80024ea:	3328      	adds	r3, #40	@ 0x28
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	440b      	add	r3, r1
 80024f0:	1e59      	subs	r1, r3, #1
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	3328      	adds	r3, #40	@ 0x28
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	fbb1 f3f3 	udiv	r3, r1, r3
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8470 	beq.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	333c      	adds	r3, #60	@ 0x3c
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	f083 0301 	eor.w	r3, r3, #1
 800252a:	b2d8      	uxtb	r0, r3
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	333c      	adds	r3, #60	@ 0x3c
 800253a:	4602      	mov	r2, r0
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	f000 bc58 	b.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	333c      	adds	r3, #60	@ 0x3c
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	f083 0301 	eor.w	r3, r3, #1
 800255a:	b2d8      	uxtb	r0, r3
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	333c      	adds	r3, #60	@ 0x3c
 800256a:	4602      	mov	r2, r0
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	f000 bc40 	b.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f003 fe57 	bl	800622e <USB_ReadChInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d131      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002596:	461a      	mov	r2, r3
 8002598:	2320      	movs	r3, #32
 800259a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	331a      	adds	r3, #26
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	f040 841f 	bne.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	331b      	adds	r3, #27
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	334d      	adds	r3, #77	@ 0x4d
 80025d8:	2203      	movs	r2, #3
 80025da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f004 fbc6 	bl	8006d76 <USB_HC_Halt>
 80025ea:	f000 bc02 	b.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 fe19 	bl	800622e <USB_ReadChInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b02      	cmp	r3, #2
 8002604:	f040 8305 	bne.w	8002c12 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2302      	movs	r3, #2
 8002618:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	334d      	adds	r3, #77	@ 0x4d
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d114      	bne.n	800265a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334d      	adds	r3, #77	@ 0x4d
 8002640:	2202      	movs	r2, #2
 8002642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334c      	adds	r3, #76	@ 0x4c
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e2cc      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4613      	mov	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	1a9b      	subs	r3, r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	334d      	adds	r3, #77	@ 0x4d
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d114      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	334d      	adds	r3, #77	@ 0x4d
 8002680:	2202      	movs	r2, #2
 8002682:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	334c      	adds	r3, #76	@ 0x4c
 8002694:	2205      	movs	r2, #5
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e2ac      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334d      	adds	r3, #77	@ 0x4d
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	d00b      	beq.n	80026c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80026c2:	2b09      	cmp	r3, #9
 80026c4:	f040 80a6 	bne.w	8002814 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	334d      	adds	r3, #77	@ 0x4d
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3344      	adds	r3, #68	@ 0x44
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	1c59      	adds	r1, r3, #1
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4403      	add	r3, r0
 80026fc:	3344      	adds	r3, #68	@ 0x44
 80026fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3344      	adds	r3, #68	@ 0x44
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d943      	bls.n	800279e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3344      	adds	r3, #68	@ 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	331a      	adds	r3, #26
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d123      	bne.n	8002788 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	331b      	adds	r3, #27
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	331c      	adds	r3, #28
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	0151      	lsls	r1, r2, #5
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	440a      	add	r2, r1
 800277e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002786:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	@ 0x4c
 8002798:	2204      	movs	r2, #4
 800279a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800279c:	e229      	b.n	8002bf2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	334c      	adds	r3, #76	@ 0x4c
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3326      	adds	r3, #38	@ 0x26
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3326      	adds	r3, #38	@ 0x26
 80027d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027da:	2b02      	cmp	r3, #2
 80027dc:	f040 8209 	bne.w	8002bf2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002812:	e1ee      	b.n	8002bf2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334d      	adds	r3, #77	@ 0x4d
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b05      	cmp	r3, #5
 8002828:	f040 80c8 	bne.w	80029bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334d      	adds	r3, #77	@ 0x4d
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	331b      	adds	r3, #27
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b01      	cmp	r3, #1
 8002854:	f040 81ce 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d16b      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3348      	adds	r3, #72	@ 0x48
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c59      	adds	r1, r3, #1
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	3348      	adds	r3, #72	@ 0x48
 8002890:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3348      	adds	r3, #72	@ 0x48
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d943      	bls.n	8002930 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3348      	adds	r3, #72	@ 0x48
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	331b      	adds	r3, #27
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3344      	adds	r3, #68	@ 0x44
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d809      	bhi.n	80028fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	331c      	adds	r3, #28
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	0151      	lsls	r1, r2, #5
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	440a      	add	r2, r1
 8002910:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002918:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	334c      	adds	r3, #76	@ 0x4c
 800292a:	2204      	movs	r2, #4
 800292c:	701a      	strb	r2, [r3, #0]
 800292e:	e014      	b.n	800295a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334c      	adds	r3, #76	@ 0x4c
 8002940:	2202      	movs	r2, #2
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e009      	b.n	800295a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	334c      	adds	r3, #76	@ 0x4c
 8002956:	2202      	movs	r2, #2
 8002958:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3326      	adds	r3, #38	@ 0x26
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3326      	adds	r3, #38	@ 0x26
 8002980:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002982:	2b02      	cmp	r3, #2
 8002984:	f040 8136 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800299e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b4:	461a      	mov	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e11b      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	@ 0x4d
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	f040 8081 	bne.w	8002ad6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	334d      	adds	r3, #77	@ 0x4d
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 80fa 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	334c      	adds	r3, #76	@ 0x4c
 8002a10:	2202      	movs	r2, #2
 8002a12:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a32:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	0151      	lsls	r1, r2, #5
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	440a      	add	r2, r1
 8002a4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a52:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a6e:	f023 0320 	bic.w	r3, r3, #32
 8002a72:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	3326      	adds	r3, #38	@ 0x26
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3326      	adds	r3, #38	@ 0x26
 8002a9a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	f040 80a9 	bne.w	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ab8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ac0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e08e      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	334d      	adds	r3, #77	@ 0x4d
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d143      	bne.n	8002b74 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334d      	adds	r3, #77	@ 0x4d
 8002afc:	2202      	movs	r2, #2
 8002afe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	334c      	adds	r3, #76	@ 0x4c
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3326      	adds	r3, #38	@ 0x26
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3326      	adds	r3, #38	@ 0x26
 8002b3a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d159      	bne.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e03f      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	@ 0x4d
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d126      	bne.n	8002bd8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	334d      	adds	r3, #77	@ 0x4d
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3344      	adds	r3, #68	@ 0x44
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c59      	adds	r1, r3, #1
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4403      	add	r3, r0
 8002bbe:	3344      	adds	r3, #68	@ 0x44
 8002bc0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	334c      	adds	r3, #76	@ 0x4c
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e00d      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334d      	adds	r3, #77	@ 0x4d
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f000 8100 	beq.w	8002df0 <HCD_HC_IN_IRQHandler+0xcca>
 8002bf0:	e000      	b.n	8002bf4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002bf2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	781a      	ldrb	r2, [r3, #0]
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f006 fc0c 	bl	8009428 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c10:	e0ef      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 fb07 	bl	800622e <USB_ReadChInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c26:	2b40      	cmp	r3, #64	@ 0x40
 8002c28:	d12f      	bne.n	8002c8a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	2340      	movs	r3, #64	@ 0x40
 8002c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2205      	movs	r2, #5
 8002c4e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	331a      	adds	r3, #26
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3344      	adds	r3, #68	@ 0x44
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f004 f877 	bl	8006d76 <USB_HC_Halt>
 8002c88:	e0b3      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 facb 	bl	800622e <USB_ReadChInterrupts>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	f040 80a7 	bne.w	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3326      	adds	r3, #38	@ 0x26
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d11b      	bne.n	8002cf2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	334d      	adds	r3, #77	@ 0x4d
 8002cde:	2204      	movs	r2, #4
 8002ce0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 f843 	bl	8006d76 <USB_HC_Halt>
 8002cf0:	e03f      	b.n	8002d72 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3326      	adds	r3, #38	@ 0x26
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3326      	adds	r3, #38	@ 0x26
 8002d18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d129      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3344      	adds	r3, #68	@ 0x44
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	799b      	ldrb	r3, [r3, #6]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HCD_HC_IN_IRQHandler+0xc2a>
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	331b      	adds	r3, #27
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d110      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	334d      	adds	r3, #77	@ 0x4d
 8002d60:	2204      	movs	r2, #4
 8002d62:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 f802 	bl	8006d76 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	331b      	adds	r3, #27
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d129      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	331b      	adds	r3, #27
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de8:	461a      	mov	r2, r3
 8002dea:	2310      	movs	r3, #16
 8002dec:	6093      	str	r3, [r2, #8]
 8002dee:	e000      	b.n	8002df2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002df0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 fa09 	bl	800622e <USB_ReadChInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d11b      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002e26:	78fb      	ldrb	r3, [r7, #3]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	2304      	movs	r3, #4
 8002e36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2207      	movs	r2, #7
 8002e4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 ff8e 	bl	8006d76 <USB_HC_Halt>
 8002e5a:	f000 bc89 	b.w	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 f9e1 	bl	800622e <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	f040 8082 	bne.w	8002f7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	2320      	movs	r3, #32
 8002e88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3319      	adds	r3, #25
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d124      	bne.n	8002eea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3319      	adds	r3, #25
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334c      	adds	r3, #76	@ 0x4c
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	334d      	adds	r3, #77	@ 0x4d
 8002ed8:	2203      	movs	r2, #3
 8002eda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 ff46 	bl	8006d76 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	331a      	adds	r3, #26
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	f040 8437 	bne.w	8003770 <HCD_HC_OUT_IRQHandler+0x978>
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	331b      	adds	r3, #27
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 842b 	bne.w	8003770 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3326      	adds	r3, #38	@ 0x26
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d009      	beq.n	8002f44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	331b      	adds	r3, #27
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	@ 0x4d
 8002f54:	2203      	movs	r2, #3
 8002f56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 ff08 	bl	8006d76 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e3f9      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 f952 	bl	800622e <USB_ReadChInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f94:	d111      	bne.n	8002fba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	015a      	lsls	r2, r3, #5
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fa8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fedf 	bl	8006d76 <USB_HC_Halt>
 8002fb8:	e3da      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 f933 	bl	800622e <USB_ReadChInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d168      	bne.n	80030a4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	3344      	adds	r3, #68	@ 0x44
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f003 f91d 	bl	800622e <USB_ReadChInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b40      	cmp	r3, #64	@ 0x40
 8002ffc:	d112      	bne.n	8003024 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3319      	adds	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2340      	movs	r3, #64	@ 0x40
 8003022:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	331b      	adds	r3, #27
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	331b      	adds	r3, #27
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	0151      	lsls	r1, r2, #5
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	440a      	add	r2, r1
 8003064:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800306c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4413      	add	r3, r2
 8003076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307a:	461a      	mov	r2, r3
 800307c:	2301      	movs	r3, #1
 800307e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	334d      	adds	r3, #77	@ 0x4d
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fe6a 	bl	8006d76 <USB_HC_Halt>
 80030a2:	e365      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 f8be 	bl	800622e <USB_ReadChInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	d139      	bne.n	8003130 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334d      	adds	r3, #77	@ 0x4d
 80030cc:	2205      	movs	r2, #5
 80030ce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	331a      	adds	r3, #26
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	3319      	adds	r3, #25
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3344      	adds	r3, #68	@ 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fe2d 	bl	8006d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	015a      	lsls	r2, r3, #5
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4413      	add	r3, r2
 8003124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003128:	461a      	mov	r2, r3
 800312a:	2340      	movs	r3, #64	@ 0x40
 800312c:	6093      	str	r3, [r2, #8]
 800312e:	e31f      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f003 f878 	bl	800622e <USB_ReadChInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b08      	cmp	r3, #8
 8003146:	d11a      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	2308      	movs	r3, #8
 8003158:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	334d      	adds	r3, #77	@ 0x4d
 800316a:	2206      	movs	r2, #6
 800316c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fdfd 	bl	8006d76 <USB_HC_Halt>
 800317c:	e2f8      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f003 f851 	bl	800622e <USB_ReadChInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d144      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3344      	adds	r3, #68	@ 0x44
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334d      	adds	r3, #77	@ 0x4d
 80031ba:	2204      	movs	r2, #4
 80031bc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3319      	adds	r3, #25
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d114      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3318      	adds	r3, #24
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3319      	adds	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fdb5 	bl	8006d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2310      	movs	r3, #16
 800321c:	6093      	str	r3, [r2, #8]
 800321e:	e2a7      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f800 	bl	800622e <USB_ReadChInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003234:	2b80      	cmp	r3, #128	@ 0x80
 8003236:	f040 8083 	bne.w	8003340 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	799b      	ldrb	r3, [r3, #6]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d111      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2207      	movs	r2, #7
 8003254:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fd89 	bl	8006d76 <USB_HC_Halt>
 8003264:	e062      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3344      	adds	r3, #68	@ 0x44
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	1c59      	adds	r1, r3, #1
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4403      	add	r3, r0
 8003286:	3344      	adds	r3, #68	@ 0x44
 8003288:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3344      	adds	r3, #68	@ 0x44
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d922      	bls.n	80032e6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	1a9b      	subs	r3, r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	3344      	adds	r3, #68	@ 0x44
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	334c      	adds	r3, #76	@ 0x4c
 80032c4:	2204      	movs	r2, #4
 80032c6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	334c      	adds	r3, #76	@ 0x4c
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	78fb      	ldrb	r3, [r7, #3]
 80032dc:	4619      	mov	r1, r3
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f006 f8a2 	bl	8009428 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032e4:	e022      	b.n	800332c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334c      	adds	r3, #76	@ 0x4c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003310:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003318:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003338:	461a      	mov	r2, r3
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	6093      	str	r3, [r2, #8]
 800333e:	e217      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f002 ff70 	bl	800622e <USB_ReadChInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003358:	d11b      	bne.n	8003392 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334d      	adds	r3, #77	@ 0x4d
 800336a:	2209      	movs	r2, #9
 800336c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fcfd 	bl	8006d76 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800338e:	6093      	str	r3, [r2, #8]
 8003390:	e1ee      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f002 ff47 	bl	800622e <USB_ReadChInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	f040 81df 	bne.w	800376a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2302      	movs	r3, #2
 80033bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	334d      	adds	r3, #77	@ 0x4d
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 8093 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334d      	adds	r3, #77	@ 0x4d
 80033e6:	2202      	movs	r2, #2
 80033e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	334c      	adds	r3, #76	@ 0x4c
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3326      	adds	r3, #38	@ 0x26
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d00b      	beq.n	800342c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3326      	adds	r3, #38	@ 0x26
 8003424:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	f040 8190 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	799b      	ldrb	r3, [r3, #6]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d115      	bne.n	8003460 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	333d      	adds	r3, #61	@ 0x3d
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	f083 0301 	eor.w	r3, r3, #1
 800344c:	b2d8      	uxtb	r0, r3
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	333d      	adds	r3, #61	@ 0x3d
 800345c:	4602      	mov	r2, r0
 800345e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	799b      	ldrb	r3, [r3, #6]
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 8171 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3334      	adds	r3, #52	@ 0x34
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8165 	beq.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3334      	adds	r3, #52	@ 0x34
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	3328      	adds	r3, #40	@ 0x28
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	440b      	add	r3, r1
 80034a8:	1e59      	subs	r1, r3, #1
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3328      	adds	r3, #40	@ 0x28
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 813f 	beq.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	333d      	adds	r3, #61	@ 0x3d
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2d8      	uxtb	r0, r3
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	333d      	adds	r3, #61	@ 0x3d
 80034f6:	4602      	mov	r2, r0
 80034f8:	701a      	strb	r2, [r3, #0]
 80034fa:	e127      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	334d      	adds	r3, #77	@ 0x4d
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d120      	bne.n	8003554 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	334d      	adds	r3, #77	@ 0x4d
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	331b      	adds	r3, #27
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	f040 8107 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	334c      	adds	r3, #76	@ 0x4c
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e0fb      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334d      	adds	r3, #77	@ 0x4d
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b04      	cmp	r3, #4
 8003568:	d13a      	bne.n	80035e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334d      	adds	r3, #77	@ 0x4d
 800357a:	2202      	movs	r2, #2
 800357c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	2202      	movs	r2, #2
 8003590:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	331b      	adds	r3, #27
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f040 80d1 	bne.w	800374c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	331b      	adds	r3, #27
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	e0b5      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035e0:	78fa      	ldrb	r2, [r7, #3]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	1a9b      	subs	r3, r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	334d      	adds	r3, #77	@ 0x4d
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b05      	cmp	r3, #5
 80035f4:	d114      	bne.n	8003620 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	334d      	adds	r3, #77	@ 0x4d
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	334c      	adds	r3, #76	@ 0x4c
 800361a:	2202      	movs	r2, #2
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e095      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	334d      	adds	r3, #77	@ 0x4d
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d114      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	334d      	adds	r3, #77	@ 0x4d
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334c      	adds	r3, #76	@ 0x4c
 800365a:	2205      	movs	r2, #5
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e075      	b.n	800374c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334d      	adds	r3, #77	@ 0x4d
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b07      	cmp	r3, #7
 8003674:	d00a      	beq.n	800368c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	@ 0x4d
 8003686:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003688:	2b09      	cmp	r3, #9
 800368a:	d170      	bne.n	800376e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3344      	adds	r3, #68	@ 0x44
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	3344      	adds	r3, #68	@ 0x44
 80036c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3344      	adds	r3, #68	@ 0x44
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d914      	bls.n	8003704 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3344      	adds	r3, #68	@ 0x44
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	334c      	adds	r3, #76	@ 0x4c
 80036fe:	2204      	movs	r2, #4
 8003700:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003702:	e022      	b.n	800374a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	334c      	adds	r3, #76	@ 0x4c
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800372e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003736:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	461a      	mov	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800374a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334c      	adds	r3, #76	@ 0x4c
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	4619      	mov	r1, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f005 fe60 	bl	8009428 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003768:	e002      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800376a:	bf00      	nop
 800376c:	e000      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800376e:	bf00      	nop
  }
}
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b08a      	sub	sp, #40	@ 0x28
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	0c5b      	lsrs	r3, r3, #17
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d004      	beq.n	80037bc <HCD_RXQLVL_IRQHandler+0x46>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	f000 80b6 	beq.w	8003926 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037ba:	e0b7      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80b3 	beq.w	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	332c      	adds	r3, #44	@ 0x2c
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a7 	beq.w	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3338      	adds	r3, #56	@ 0x38
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	18d1      	adds	r1, r2, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4403      	add	r3, r0
 8003800:	3334      	adds	r3, #52	@ 0x34
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4299      	cmp	r1, r3
 8003806:	f200 8083 	bhi.w	8003910 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	332c      	adds	r3, #44	@ 0x2c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	b292      	uxth	r2, r2
 8003824:	4619      	mov	r1, r3
 8003826:	f002 fc97 	bl	8006158 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	332c      	adds	r3, #44	@ 0x2c
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	18d1      	adds	r1, r2, r3
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4403      	add	r3, r0
 800384e:	332c      	adds	r3, #44	@ 0x2c
 8003850:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3338      	adds	r3, #56	@ 0x38
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	18d1      	adds	r1, r2, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4403      	add	r3, r0
 8003876:	3338      	adds	r3, #56	@ 0x38
 8003878:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	4413      	add	r3, r2
 8003882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	0cdb      	lsrs	r3, r3, #19
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3328      	adds	r3, #40	@ 0x28
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d13f      	bne.n	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d03c      	beq.n	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038dc:	461a      	mov	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	333c      	adds	r3, #60	@ 0x3c
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f083 0301 	eor.w	r3, r3, #1
 80038f8:	b2d8      	uxtb	r0, r3
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4613      	mov	r3, r2
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	333c      	adds	r3, #60	@ 0x3c
 800390a:	4602      	mov	r2, r0
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e00c      	b.n	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4613      	mov	r3, r2
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	334c      	adds	r3, #76	@ 0x4c
 8003920:	2204      	movs	r2, #4
 8003922:	701a      	strb	r2, [r3, #0]
      break;
 8003924:	e001      	b.n	800392a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800392a:	bf00      	nop
  }
}
 800392c:	bf00      	nop
 800392e:	3728      	adds	r7, #40	@ 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003960:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d10b      	bne.n	8003984 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d102      	bne.n	800397c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f005 fd3a 	bl	80093f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d132      	bne.n	80039f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d126      	bne.n	80039ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7a5b      	ldrb	r3, [r3, #9]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d113      	bne.n	80039d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80039ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b2:	d106      	bne.n	80039c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2102      	movs	r1, #2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fd5c 	bl	8006478 <USB_InitFSLSPClkSel>
 80039c0:	e011      	b.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2101      	movs	r1, #1
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fd55 	bl	8006478 <USB_InitFSLSPClkSel>
 80039ce:	e00a      	b.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	79db      	ldrb	r3, [r3, #7]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80039de:	461a      	mov	r2, r3
 80039e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80039e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f005 fd2c 	bl	8009444 <HAL_HCD_PortEnabled_Callback>
 80039ec:	e002      	b.n	80039f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f005 fd36 	bl	8009460 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d103      	bne.n	8003a06 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	6013      	str	r3, [r2, #0]
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12b      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd f942 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	@ 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f001 fa20 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	@ (8003c90 <HAL_I2C_Init+0x274>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a80      	ldr	r2, [pc, #512]	@ (8003c94 <HAL_I2C_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a7d      	ldr	r2, [pc, #500]	@ (8003c98 <HAL_I2C_Init+0x27c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a78      	ldr	r2, [pc, #480]	@ (8003c9c <HAL_I2C_Init+0x280>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c90 <HAL_I2C_Init+0x274>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a69      	ldr	r2, [pc, #420]	@ (8003ca0 <HAL_I2C_Init+0x284>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	495c      	ldr	r1, [pc, #368]	@ (8003c90 <HAL_I2C_Init+0x274>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d819      	bhi.n	8003b58 <HAL_I2C_Init+0x13c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b38:	400b      	ands	r3, r1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_I2C_Init+0x138>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e59      	subs	r1, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	e051      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e04f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <HAL_I2C_Init+0x168>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_I2C_Init+0x18e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Init+0x196>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e022      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_I2C_Init+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e58      	subs	r0, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	6809      	ldr	r1, [r1, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6911      	ldr	r1, [r2, #16]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	000186a0 	.word	0x000186a0
 8003c94:	001e847f 	.word	0x001e847f
 8003c98:	003d08ff 	.word	0x003d08ff
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e128      	b.n	8003f08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a90      	ldr	r2, [pc, #576]	@ (8003f10 <HAL_I2S_Init+0x26c>)
 8003cce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd f843 	bl	8000d5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003cec:	f023 030f 	bic.w	r3, r3, #15
 8003cf0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d060      	beq.n	8003dc4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d102      	bne.n	8003d10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003d0a:	2310      	movs	r3, #16
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e001      	b.n	8003d14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d802      	bhi.n	8003d22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d22:	2001      	movs	r0, #1
 8003d24:	f001 f9c4 	bl	80050b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d28:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d32:	d125      	bne.n	8003d80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	461a      	mov	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	3305      	adds	r3, #5
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e01f      	b.n	8003d9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7a:	3305      	adds	r3, #5
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	e00e      	b.n	8003d9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	3305      	adds	r3, #5
 8003d9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4a5c      	ldr	r2, [pc, #368]	@ (8003f14 <HAL_I2S_Init+0x270>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e003      	b.n	8003dcc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d902      	bls.n	8003dd8 <HAL_I2S_Init+0x134>
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	2bff      	cmp	r3, #255	@ 0xff
 8003dd6:	d907      	bls.n	8003de8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f043 0210 	orr.w	r2, r3, #16
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e08f      	b.n	8003f08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e06:	f023 030f 	bic.w	r3, r3, #15
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6851      	ldr	r1, [r2, #4]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68d2      	ldr	r2, [r2, #12]
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6992      	ldr	r2, [r2, #24]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d161      	bne.n	8003ef8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a38      	ldr	r2, [pc, #224]	@ (8003f18 <HAL_I2S_Init+0x274>)
 8003e38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a37      	ldr	r2, [pc, #220]	@ (8003f1c <HAL_I2S_Init+0x278>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2S_Init+0x1a4>
 8003e44:	4b36      	ldr	r3, [pc, #216]	@ (8003f20 <HAL_I2S_Init+0x27c>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2S_Init+0x1a8>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	4932      	ldr	r1, [pc, #200]	@ (8003f1c <HAL_I2S_Init+0x278>)
 8003e54:	428a      	cmp	r2, r1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2S_Init+0x1b8>
 8003e58:	4a31      	ldr	r2, [pc, #196]	@ (8003f20 <HAL_I2S_Init+0x27c>)
 8003e5a:	e001      	b.n	8003e60 <HAL_I2S_Init+0x1bc>
 8003e5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e60:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f1c <HAL_I2S_Init+0x278>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_I2S_Init+0x1d4>
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <HAL_I2S_Init+0x27c>)
 8003e76:	e001      	b.n	8003e7c <HAL_I2S_Init+0x1d8>
 8003e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a25      	ldr	r2, [pc, #148]	@ (8003f1c <HAL_I2S_Init+0x278>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_I2S_Init+0x1ea>
 8003e8a:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_I2S_Init+0x27c>)
 8003e8c:	e001      	b.n	8003e92 <HAL_I2S_Init+0x1ee>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e9e:	d003      	beq.n	8003ea8 <HAL_I2S_Init+0x204>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d103      	bne.n	8003eb0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ea8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e001      	b.n	8003eb4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ee0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8003f1c <HAL_I2S_Init+0x278>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2S_Init+0x24c>
 8003eec:	4b0c      	ldr	r3, [pc, #48]	@ (8003f20 <HAL_I2S_Init+0x27c>)
 8003eee:	e001      	b.n	8003ef4 <HAL_I2S_Init+0x250>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ef4:	897a      	ldrh	r2, [r7, #10]
 8003ef6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	0800401b 	.word	0x0800401b
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	08004131 	.word	0x08004131
 8003f1c:	40003800 	.word	0x40003800
 8003f20:	40003400 	.word	0x40003400

08003f24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6c:	881a      	ldrh	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	1c9a      	adds	r2, r3, #2
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10e      	bne.n	8003fb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fa4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff ffb8 	bl	8003f24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	b292      	uxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10e      	bne.n	8004012 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004002:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff93 	bl	8003f38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b04      	cmp	r3, #4
 8004034:	d13a      	bne.n	80040ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d109      	bne.n	8004054 <I2S_IRQHandler+0x3a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404a:	2b40      	cmp	r3, #64	@ 0x40
 800404c:	d102      	bne.n	8004054 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ffb4 	bl	8003fbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405a:	2b40      	cmp	r3, #64	@ 0x40
 800405c:	d126      	bne.n	80040ac <I2S_IRQHandler+0x92>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d11f      	bne.n	80040ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800407a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff50 	bl	8003f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d136      	bne.n	8004126 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d109      	bne.n	80040d6 <I2S_IRQHandler+0xbc>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040cc:	2b80      	cmp	r3, #128	@ 0x80
 80040ce:	d102      	bne.n	80040d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff45 	bl	8003f60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d122      	bne.n	8004126 <I2S_IRQHandler+0x10c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b20      	cmp	r3, #32
 80040ec:	d11b      	bne.n	8004126 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff13 	bl	8003f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a92      	ldr	r2, [pc, #584]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800414a:	4b92      	ldr	r3, [pc, #584]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800414c:	e001      	b.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a8b      	ldr	r2, [pc, #556]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004168:	4b8a      	ldr	r3, [pc, #552]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800416a:	e001      	b.n	8004170 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800417c:	d004      	beq.n	8004188 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 8099 	bne.w	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d107      	bne.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f925 	bl	80043ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9c8 	bl	800454c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d13a      	bne.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d035      	beq.n	800423c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80041da:	4b6e      	ldr	r3, [pc, #440]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041dc:	e001      	b.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4969      	ldr	r1, [pc, #420]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ea:	428b      	cmp	r3, r1
 80041ec:	d101      	bne.n	80041f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80041ee:	4b69      	ldr	r3, [pc, #420]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041f0:	e001      	b.n	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80041f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800420a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fe88 	bl	8003f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b08      	cmp	r3, #8
 8004244:	f040 80c3 	bne.w	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80bd 	beq.w	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004262:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a49      	ldr	r2, [pc, #292]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800426e:	4b49      	ldr	r3, [pc, #292]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004270:	e001      	b.n	8004276 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004272:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4944      	ldr	r1, [pc, #272]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800427e:	428b      	cmp	r3, r1
 8004280:	d101      	bne.n	8004286 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004282:	4b44      	ldr	r3, [pc, #272]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004284:	e001      	b.n	800428a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800428e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fe4a 	bl	8003f4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042b8:	e089      	b.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d107      	bne.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8be 	bl	8004450 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8fd 	bl	80044e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d12f      	bne.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02a      	beq.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004310:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1e      	ldr	r2, [pc, #120]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800431e:	e001      	b.n	8004324 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004320:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4919      	ldr	r1, [pc, #100]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800432c:	428b      	cmp	r3, r1
 800432e:	d101      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004330:	4b18      	ldr	r3, [pc, #96]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004332:	e001      	b.n	8004338 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004334:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004338:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800433c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	f043 0202 	orr.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff fdfa 	bl	8003f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b08      	cmp	r3, #8
 8004360:	d136      	bne.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d031      	beq.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004378:	e001      	b.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800437a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4902      	ldr	r1, [pc, #8]	@ (8004390 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004386:	428b      	cmp	r3, r1
 8004388:	d106      	bne.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800438a:	4b02      	ldr	r3, [pc, #8]	@ (8004394 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800438c:	e006      	b.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800438e:	bf00      	nop
 8004390:	40003800 	.word	0x40003800
 8004394:	40003400 	.word	0x40003400
 8004398:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800439c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff fdc0 	bl	8003f4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043cc:	e000      	b.n	80043d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ce:	bf00      	nop
}
 80043d0:	bf00      	nop
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f8:	1c99      	adds	r1, r3, #2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80043fe:	881a      	ldrh	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d113      	bne.n	8004446 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800442c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ffc9 	bl	80043d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	1c99      	adds	r1, r3, #2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6251      	str	r1, [r2, #36]	@ 0x24
 8004462:	8819      	ldrh	r1, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1d      	ldr	r2, [pc, #116]	@ (80044e0 <I2SEx_TxISR_I2SExt+0x90>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <I2SEx_TxISR_I2SExt+0x22>
 800446e:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x94>)
 8004470:	e001      	b.n	8004476 <I2SEx_TxISR_I2SExt+0x26>
 8004472:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004476:	460a      	mov	r2, r1
 8004478:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a12      	ldr	r2, [pc, #72]	@ (80044e0 <I2SEx_TxISR_I2SExt+0x90>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d101      	bne.n	80044a0 <I2SEx_TxISR_I2SExt+0x50>
 800449c:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x94>)
 800449e:	e001      	b.n	80044a4 <I2SEx_TxISR_I2SExt+0x54>
 80044a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	490d      	ldr	r1, [pc, #52]	@ (80044e0 <I2SEx_TxISR_I2SExt+0x90>)
 80044ac:	428b      	cmp	r3, r1
 80044ae:	d101      	bne.n	80044b4 <I2SEx_TxISR_I2SExt+0x64>
 80044b0:	4b0c      	ldr	r3, [pc, #48]	@ (80044e4 <I2SEx_TxISR_I2SExt+0x94>)
 80044b2:	e001      	b.n	80044b8 <I2SEx_TxISR_I2SExt+0x68>
 80044b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d106      	bne.n	80044d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff81 	bl	80043d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40003800 	.word	0x40003800
 80044e4:	40003400 	.word	0x40003400

080044e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68d8      	ldr	r0, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fa:	1c99      	adds	r1, r3, #2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004500:	b282      	uxth	r2, r0
 8004502:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800452a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff4a 	bl	80043d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004544:	bf00      	nop
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a20      	ldr	r2, [pc, #128]	@ (80045dc <I2SEx_RxISR_I2SExt+0x90>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <I2SEx_RxISR_I2SExt+0x16>
 800455e:	4b20      	ldr	r3, [pc, #128]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x94>)
 8004560:	e001      	b.n	8004566 <I2SEx_RxISR_I2SExt+0x1a>
 8004562:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004566:	68d8      	ldr	r0, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	1c99      	adds	r1, r3, #2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004572:	b282      	uxth	r2, r0
 8004574:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d121      	bne.n	80045d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a12      	ldr	r2, [pc, #72]	@ (80045dc <I2SEx_RxISR_I2SExt+0x90>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d101      	bne.n	800459c <I2SEx_RxISR_I2SExt+0x50>
 8004598:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x94>)
 800459a:	e001      	b.n	80045a0 <I2SEx_RxISR_I2SExt+0x54>
 800459c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	490d      	ldr	r1, [pc, #52]	@ (80045dc <I2SEx_RxISR_I2SExt+0x90>)
 80045a8:	428b      	cmp	r3, r1
 80045aa:	d101      	bne.n	80045b0 <I2SEx_RxISR_I2SExt+0x64>
 80045ac:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <I2SEx_RxISR_I2SExt+0x94>)
 80045ae:	e001      	b.n	80045b4 <I2SEx_RxISR_I2SExt+0x68>
 80045b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff03 	bl	80043d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40003800 	.word	0x40003800
 80045e0:	40003400 	.word	0x40003400

080045e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e267      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d075      	beq.n	80046ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004602:	4b88      	ldr	r3, [pc, #544]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b04      	cmp	r3, #4
 800460c:	d00c      	beq.n	8004628 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460e:	4b85      	ldr	r3, [pc, #532]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004616:	2b08      	cmp	r3, #8
 8004618:	d112      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4b82      	ldr	r3, [pc, #520]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004626:	d10b      	bne.n	8004640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	4b7e      	ldr	r3, [pc, #504]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d05b      	beq.n	80046ec <HAL_RCC_OscConfig+0x108>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d157      	bne.n	80046ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e242      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004648:	d106      	bne.n	8004658 <HAL_RCC_OscConfig+0x74>
 800464a:	4b76      	ldr	r3, [pc, #472]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a75      	ldr	r2, [pc, #468]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e01d      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x98>
 8004662:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a6f      	ldr	r2, [pc, #444]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b6d      	ldr	r3, [pc, #436]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6c      	ldr	r2, [pc, #432]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0xb0>
 800467c:	4b69      	ldr	r3, [pc, #420]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a68      	ldr	r2, [pc, #416]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b66      	ldr	r3, [pc, #408]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a65      	ldr	r2, [pc, #404]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 800468e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fc fd92 	bl	80011c4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fc fd8e 	bl	80011c4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	@ 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e207      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0xc0>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fc fd7e 	bl	80011c4 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046cc:	f7fc fd7a 	bl	80011c4 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b64      	cmp	r3, #100	@ 0x64
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e1f3      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046de:	4b51      	ldr	r3, [pc, #324]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0xe8>
 80046ea:	e000      	b.n	80046ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d063      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80046fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 030c 	and.w	r3, r3, #12
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004706:	4b47      	ldr	r3, [pc, #284]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800470e:	2b08      	cmp	r3, #8
 8004710:	d11c      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b44      	ldr	r3, [pc, #272]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d116      	bne.n	800474c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471e:	4b41      	ldr	r3, [pc, #260]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d001      	beq.n	8004736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e1c7      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004736:	4b3b      	ldr	r3, [pc, #236]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4937      	ldr	r1, [pc, #220]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800474a:	e03a      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004754:	4b34      	ldr	r3, [pc, #208]	@ (8004828 <HAL_RCC_OscConfig+0x244>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475a:	f7fc fd33 	bl	80011c4 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004762:	f7fc fd2f 	bl	80011c4 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e1a8      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	4b2b      	ldr	r3, [pc, #172]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004780:	4b28      	ldr	r3, [pc, #160]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4925      	ldr	r1, [pc, #148]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
 8004794:	e015      	b.n	80047c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <HAL_RCC_OscConfig+0x244>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800479c:	f7fc fd12 	bl	80011c4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a4:	f7fc fd0e 	bl	80011c4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e187      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d036      	beq.n	800483c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d016      	beq.n	8004804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <HAL_RCC_OscConfig+0x248>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047dc:	f7fc fcf2 	bl	80011c4 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e4:	f7fc fcee 	bl	80011c4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e167      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <HAL_RCC_OscConfig+0x240>)
 80047f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x200>
 8004802:	e01b      	b.n	800483c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004804:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_RCC_OscConfig+0x248>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480a:	f7fc fcdb 	bl	80011c4 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	e00e      	b.n	8004830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004812:	f7fc fcd7 	bl	80011c4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d907      	bls.n	8004830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e150      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
 8004824:	40023800 	.word	0x40023800
 8004828:	42470000 	.word	0x42470000
 800482c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b88      	ldr	r3, [pc, #544]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1ea      	bne.n	8004812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8097 	beq.w	8004978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b81      	ldr	r3, [pc, #516]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	4a7c      	ldr	r2, [pc, #496]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	@ 0x40
 800486a:	4b7a      	ldr	r3, [pc, #488]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b77      	ldr	r3, [pc, #476]	@ (8004a58 <HAL_RCC_OscConfig+0x474>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d118      	bne.n	80048b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b74      	ldr	r3, [pc, #464]	@ (8004a58 <HAL_RCC_OscConfig+0x474>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a73      	ldr	r2, [pc, #460]	@ (8004a58 <HAL_RCC_OscConfig+0x474>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fc fc97 	bl	80011c4 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fc fc93 	bl	80011c4 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e10c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCC_OscConfig+0x474>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x2ea>
 80048c0:	4b64      	ldr	r3, [pc, #400]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c4:	4a63      	ldr	r2, [pc, #396]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80048cc:	e01c      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x30c>
 80048d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	4a5e      	ldr	r2, [pc, #376]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0x324>
 80048f0:	4b58      	ldr	r3, [pc, #352]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f4:	4a57      	ldr	r2, [pc, #348]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80048fc:	4b55      	ldr	r3, [pc, #340]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	4a54      	ldr	r2, [pc, #336]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 0304 	bic.w	r3, r3, #4
 8004906:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc fc58 	bl	80011c4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004916:	e00a      	b.n	800492e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	f7fc fc54 	bl	80011c4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0cb      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	4b49      	ldr	r3, [pc, #292]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0ee      	beq.n	8004918 <HAL_RCC_OscConfig+0x334>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493c:	f7fc fc42 	bl	80011c4 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004942:	e00a      	b.n	800495a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fc fc3e 	bl	80011c4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e0b5      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 800495c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1ee      	bne.n	8004944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b39      	ldr	r3, [pc, #228]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	4a38      	ldr	r2, [pc, #224]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004976:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a1 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004982:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b08      	cmp	r3, #8
 800498c:	d05c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d141      	bne.n	8004a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b31      	ldr	r3, [pc, #196]	@ (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fc fc12 	bl	80011c4 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fc fc0e 	bl	80011c4 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e087      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	4b27      	ldr	r3, [pc, #156]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	085b      	lsrs	r3, r3, #1
 80049da:	3b01      	subs	r3, #1
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	061b      	lsls	r3, r3, #24
 80049e6:	491b      	ldr	r1, [pc, #108]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_RCC_OscConfig+0x478>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f2:	f7fc fbe7 	bl	80011c4 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fc fbe3 	bl	80011c4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e05c      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0c:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x416>
 8004a18:	e054      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b10      	ldr	r3, [pc, #64]	@ (8004a5c <HAL_RCC_OscConfig+0x478>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fc fbd0 	bl	80011c4 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7fc fbcc 	bl	80011c4 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e045      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3a:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x444>
 8004a46:	e03d      	b.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e038      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
 8004a54:	40023800 	.word	0x40023800
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <HAL_RCC_OscConfig+0x4ec>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d028      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d121      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d11a      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d111      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800

08004ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0cc      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b68      	ldr	r3, [pc, #416]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d90c      	bls.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b65      	ldr	r3, [pc, #404]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b63      	ldr	r3, [pc, #396]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0b8      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b28:	4b59      	ldr	r3, [pc, #356]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a58      	ldr	r2, [pc, #352]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b40:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a52      	ldr	r2, [pc, #328]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4c:	4b50      	ldr	r3, [pc, #320]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	494d      	ldr	r1, [pc, #308]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d044      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b47      	ldr	r3, [pc, #284]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d119      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e07f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d003      	beq.n	8004b92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b92:	4b3f      	ldr	r3, [pc, #252]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d109      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e067      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb2:	4b37      	ldr	r3, [pc, #220]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f023 0203 	bic.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4934      	ldr	r1, [pc, #208]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc4:	f7fc fafe 	bl	80011c4 <HAL_GetTick>
 8004bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bcc:	f7fc fafa 	bl	80011c4 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e04f      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 020c 	and.w	r2, r3, #12
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d1eb      	bne.n	8004bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b25      	ldr	r3, [pc, #148]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d20c      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b20      	ldr	r3, [pc, #128]	@ (8004c8c <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e032      	b.n	8004c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c28:	4b19      	ldr	r3, [pc, #100]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4916      	ldr	r1, [pc, #88]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c46:	4b12      	ldr	r3, [pc, #72]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	490e      	ldr	r1, [pc, #56]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c5a:	f000 f821 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	490a      	ldr	r1, [pc, #40]	@ (8004c94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c6c:	5ccb      	ldrb	r3, [r1, r3]
 8004c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c72:	4a09      	ldr	r2, [pc, #36]	@ (8004c98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <HAL_RCC_ClockConfig+0x1c8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fc fa5e 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023c00 	.word	0x40023c00
 8004c90:	40023800 	.word	0x40023800
 8004c94:	08009b1c 	.word	0x08009b1c
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	20000004 	.word	0x20000004

08004ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b094      	sub	sp, #80	@ 0x50
 8004ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb8:	4b79      	ldr	r3, [pc, #484]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	f200 80e1 	bhi.w	8004e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0x3a>
 8004cd2:	e0db      	b.n	8004e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cd4:	4b73      	ldr	r3, [pc, #460]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cd8:	e0db      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cda:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cde:	e0d8      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ce8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cea:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d063      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d12:	4622      	mov	r2, r4
 8004d14:	462b      	mov	r3, r5
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	0159      	lsls	r1, r3, #5
 8004d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d24:	0150      	lsls	r0, r2, #5
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	1a51      	subs	r1, r2, r1
 8004d2e:	6139      	str	r1, [r7, #16]
 8004d30:	4629      	mov	r1, r5
 8004d32:	eb63 0301 	sbc.w	r3, r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d44:	4659      	mov	r1, fp
 8004d46:	018b      	lsls	r3, r1, #6
 8004d48:	4651      	mov	r1, sl
 8004d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d4e:	4651      	mov	r1, sl
 8004d50:	018a      	lsls	r2, r1, #6
 8004d52:	4651      	mov	r1, sl
 8004d54:	ebb2 0801 	subs.w	r8, r2, r1
 8004d58:	4659      	mov	r1, fp
 8004d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d72:	4690      	mov	r8, r2
 8004d74:	4699      	mov	r9, r3
 8004d76:	4623      	mov	r3, r4
 8004d78:	eb18 0303 	adds.w	r3, r8, r3
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	462b      	mov	r3, r5
 8004d80:	eb49 0303 	adc.w	r3, r9, r3
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d92:	4629      	mov	r1, r5
 8004d94:	024b      	lsls	r3, r1, #9
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	024a      	lsls	r2, r1, #9
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004da6:	2200      	movs	r2, #0
 8004da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004db0:	f7fb fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4613      	mov	r3, r2
 8004dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dbc:	e058      	b.n	8004e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dbe:	4b38      	ldr	r3, [pc, #224]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	099b      	lsrs	r3, r3, #6
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	4611      	mov	r1, r2
 8004dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004dd8:	4642      	mov	r2, r8
 8004dda:	464b      	mov	r3, r9
 8004ddc:	f04f 0000 	mov.w	r0, #0
 8004de0:	f04f 0100 	mov.w	r1, #0
 8004de4:	0159      	lsls	r1, r3, #5
 8004de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dea:	0150      	lsls	r0, r2, #5
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4641      	mov	r1, r8
 8004df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004df6:	4649      	mov	r1, r9
 8004df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e10:	ebb2 040a 	subs.w	r4, r2, sl
 8004e14:	eb63 050b 	sbc.w	r5, r3, fp
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	00eb      	lsls	r3, r5, #3
 8004e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e26:	00e2      	lsls	r2, r4, #3
 8004e28:	4614      	mov	r4, r2
 8004e2a:	461d      	mov	r5, r3
 8004e2c:	4643      	mov	r3, r8
 8004e2e:	18e3      	adds	r3, r4, r3
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	464b      	mov	r3, r9
 8004e34:	eb45 0303 	adc.w	r3, r5, r3
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e46:	4629      	mov	r1, r5
 8004e48:	028b      	lsls	r3, r1, #10
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e50:	4621      	mov	r1, r4
 8004e52:	028a      	lsls	r2, r1, #10
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	61fa      	str	r2, [r7, #28]
 8004e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e64:	f7fb f9b0 	bl	80001c8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004e70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e8a:	e002      	b.n	8004e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3750      	adds	r7, #80	@ 0x50
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	007a1200 	.word	0x007a1200

08004eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb0:	4b03      	ldr	r3, [pc, #12]	@ (8004ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000000 	.word	0x20000000

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ec8:	f7ff fff0 	bl	8004eac <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0a9b      	lsrs	r3, r3, #10
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	@ (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	08009b2c 	.word	0x08009b2c

08004eec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d035      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f14:	4b62      	ldr	r3, [pc, #392]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f1a:	f7fc f953 	bl	80011c4 <HAL_GetTick>
 8004f1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f20:	e008      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f22:	f7fc f94f 	bl	80011c4 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0b0      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f34:	4b5b      	ldr	r3, [pc, #364]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1f0      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	019a      	lsls	r2, r3, #6
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	071b      	lsls	r3, r3, #28
 8004f4c:	4955      	ldr	r1, [pc, #340]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f54:	4b52      	ldr	r3, [pc, #328]	@ (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fc f933 	bl	80011c4 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f62:	f7fc f92f 	bl	80011c4 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e090      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f74:	4b4b      	ldr	r3, [pc, #300]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8083 	beq.w	8005094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	4b44      	ldr	r3, [pc, #272]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	4a43      	ldr	r2, [pc, #268]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f9e:	4b41      	ldr	r3, [pc, #260]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004faa:	4b3f      	ldr	r3, [pc, #252]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a3e      	ldr	r2, [pc, #248]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fc f905 	bl	80011c4 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbe:	f7fc f901 	bl	80011c4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e062      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004fd0:	4b35      	ldr	r3, [pc, #212]	@ (80050a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fdc:	4b31      	ldr	r3, [pc, #196]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d02f      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d028      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005002:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005004:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800500a:	4b28      	ldr	r3, [pc, #160]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005010:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005016:	4b23      	ldr	r3, [pc, #140]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d114      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005022:	f7fc f8cf 	bl	80011c4 <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	e00a      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc f8cb 	bl	80011c4 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e02a      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ee      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005058:	d10d      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800505a:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800506a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506e:	490d      	ldr	r1, [pc, #52]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]
 8005074:	e005      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800507c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005080:	6093      	str	r3, [r2, #8]
 8005082:	4b08      	ldr	r3, [pc, #32]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005084:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800508e:	4905      	ldr	r1, [pc, #20]	@ (80050a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	42470068 	.word	0x42470068
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40007000 	.word	0x40007000
 80050ac:	42470e40 	.word	0x42470e40

080050b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d13f      	bne.n	800514e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80050ce:	4b24      	ldr	r3, [pc, #144]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050e4:	d12f      	bne.n	8005146 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80050e8:	617b      	str	r3, [r7, #20]
          break;
 80050ea:	e02f      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80050ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050f8:	d108      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80050fa:	4b19      	ldr	r3, [pc, #100]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005102:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e007      	b.n	800511c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800510c:	4b14      	ldr	r3, [pc, #80]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005114:	4a15      	ldr	r2, [pc, #84]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800511c:	4b10      	ldr	r3, [pc, #64]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800511e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005136:	0f1b      	lsrs	r3, r3, #28
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	617b      	str	r3, [r7, #20]
          break;
 8005144:	e002      	b.n	800514c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
          break;
 800514a:	bf00      	nop
        }
      }
      break;
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800514e:	bf00      	nop
    }
  }
  return frequency;
 8005150:	697b      	ldr	r3, [r7, #20]
}
 8005152:	4618      	mov	r0, r3
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800
 8005164:	00bb8000 	.word	0x00bb8000
 8005168:	007a1200 	.word	0x007a1200
 800516c:	00f42400 	.word	0x00f42400

08005170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07b      	b.n	800527a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d108      	bne.n	800519c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005192:	d009      	beq.n	80051a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	61da      	str	r2, [r3, #28]
 800519a:	e005      	b.n	80051a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fb fe4a 	bl	8000e5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051f0:	431a      	orrs	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	ea42 0103 	orr.w	r1, r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005234:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	f003 0104 	and.w	r1, r3, #4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 0210 	and.w	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e041      	b.n	8005318 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fb fe1f 	bl	8000eec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3304      	adds	r3, #4
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f000 fb4d 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800532a:	2300      	movs	r3, #0
 800532c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d104      	bne.n	800533e <HAL_TIM_IC_Start_IT+0x1e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800533a:	b2db      	uxtb	r3, r3
 800533c:	e013      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x46>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d104      	bne.n	800534e <HAL_TIM_IC_Start_IT+0x2e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e00b      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x46>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b08      	cmp	r3, #8
 8005352:	d104      	bne.n	800535e <HAL_TIM_IC_Start_IT+0x3e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e003      	b.n	8005366 <HAL_TIM_IC_Start_IT+0x46>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_TIM_IC_Start_IT+0x58>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005374:	b2db      	uxtb	r3, r3
 8005376:	e013      	b.n	80053a0 <HAL_TIM_IC_Start_IT+0x80>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b04      	cmp	r3, #4
 800537c:	d104      	bne.n	8005388 <HAL_TIM_IC_Start_IT+0x68>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e00b      	b.n	80053a0 <HAL_TIM_IC_Start_IT+0x80>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b08      	cmp	r3, #8
 800538c:	d104      	bne.n	8005398 <HAL_TIM_IC_Start_IT+0x78>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005394:	b2db      	uxtb	r3, r3
 8005396:	e003      	b.n	80053a0 <HAL_TIM_IC_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d102      	bne.n	80053ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053a8:	7b7b      	ldrb	r3, [r7, #13]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d001      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e0cc      	b.n	800554c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_IC_Start_IT+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c0:	e013      	b.n	80053ea <HAL_TIM_IC_Start_IT+0xca>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_IC_Start_IT+0xb2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d0:	e00b      	b.n	80053ea <HAL_TIM_IC_Start_IT+0xca>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_IC_Start_IT+0xc2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e0:	e003      	b.n	80053ea <HAL_TIM_IC_Start_IT+0xca>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_IC_Start_IT+0xda>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f8:	e013      	b.n	8005422 <HAL_TIM_IC_Start_IT+0x102>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Start_IT+0xea>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005408:	e00b      	b.n	8005422 <HAL_TIM_IC_Start_IT+0x102>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d104      	bne.n	800541a <HAL_TIM_IC_Start_IT+0xfa>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005418:	e003      	b.n	8005422 <HAL_TIM_IC_Start_IT+0x102>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d841      	bhi.n	80054ac <HAL_TIM_IC_Start_IT+0x18c>
 8005428:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <HAL_TIM_IC_Start_IT+0x110>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005465 	.word	0x08005465
 8005434:	080054ad 	.word	0x080054ad
 8005438:	080054ad 	.word	0x080054ad
 800543c:	080054ad 	.word	0x080054ad
 8005440:	08005477 	.word	0x08005477
 8005444:	080054ad 	.word	0x080054ad
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054ad 	.word	0x080054ad
 8005450:	08005489 	.word	0x08005489
 8005454:	080054ad 	.word	0x080054ad
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080054ad 	.word	0x080054ad
 8005460:	0800549b 	.word	0x0800549b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0202 	orr.w	r2, r2, #2
 8005472:	60da      	str	r2, [r3, #12]
      break;
 8005474:	e01d      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0204 	orr.w	r2, r2, #4
 8005484:	60da      	str	r2, [r3, #12]
      break;
 8005486:	e014      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0208 	orr.w	r2, r2, #8
 8005496:	60da      	str	r2, [r3, #12]
      break;
 8005498:	e00b      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0210 	orr.w	r2, r2, #16
 80054a8:	60da      	str	r2, [r3, #12]
      break;
 80054aa:	e002      	b.n	80054b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
      break;
 80054b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d148      	bne.n	800554a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fc23 	bl	8005d0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a22      	ldr	r2, [pc, #136]	@ (8005554 <HAL_TIM_IC_Start_IT+0x234>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d8:	d01d      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <HAL_TIM_IC_Start_IT+0x238>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	@ (800555c <HAL_TIM_IC_Start_IT+0x23c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_TIM_IC_Start_IT+0x240>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <HAL_TIM_IC_Start_IT+0x244>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <HAL_TIM_IC_Start_IT+0x248>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_TIM_IC_Start_IT+0x1f6>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a16      	ldr	r2, [pc, #88]	@ (800556c <HAL_TIM_IC_Start_IT+0x24c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b06      	cmp	r3, #6
 8005526:	d010      	beq.n	800554a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005538:	e007      	b.n	800554a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40010400 	.word	0x40010400
 8005568:	40014000 	.word	0x40014000
 800556c:	40001800 	.word	0x40001800

08005570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d020      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01b      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0202 	mvn.w	r2, #2
 80055a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb faca 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 80055c0:	e005      	b.n	80055ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f9ae 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f9b5 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d020      	beq.n	8005620 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01b      	beq.n	8005620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0204 	mvn.w	r2, #4
 80055f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2202      	movs	r2, #2
 80055f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb faa4 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f988 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f98f 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d020      	beq.n	800566c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01b      	beq.n	800566c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0208 	mvn.w	r2, #8
 800563c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2204      	movs	r2, #4
 8005642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb fa7e 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 8005658:	e005      	b.n	8005666 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f962 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f969 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 0310 	and.w	r3, r3, #16
 8005672:	2b00      	cmp	r3, #0
 8005674:	d020      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0210 	mvn.w	r2, #16
 8005688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2208      	movs	r2, #8
 800568e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fa58 	bl	8000b54 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f93c 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f943 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00c      	beq.n	80056dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0201 	mvn.w	r2, #1
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f91a 	bl	8005910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00c      	beq.n	8005700 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fbb2 	bl	8005e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f914 	bl	800594c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f003 0320 	and.w	r3, r3, #32
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0220 	mvn.w	r2, #32
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fb84 	bl	8005e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_IC_ConfigChannel+0x1e>
 800576a:	2302      	movs	r3, #2
 800576c:	e088      	b.n	8005880 <HAL_TIM_IC_ConfigChannel+0x130>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800578c:	f000 f994 	bl	8005ab8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 020c 	bic.w	r2, r2, #12
 800579e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6999      	ldr	r1, [r3, #24]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	619a      	str	r2, [r3, #24]
 80057b2:	e060      	b.n	8005876 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	d11c      	bne.n	80057f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80057ca:	f000 f9e9 	bl	8005ba0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6999      	ldr	r1, [r3, #24]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	021a      	lsls	r2, r3, #8
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	619a      	str	r2, [r3, #24]
 80057f2:	e040      	b.n	8005876 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800580a:	f000 fa06 	bl	8005c1a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 020c 	bic.w	r2, r2, #12
 800581c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69d9      	ldr	r1, [r3, #28]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	61da      	str	r2, [r3, #28]
 8005830:	e021      	b.n	8005876 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d11c      	bne.n	8005872 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005848:	f000 fa23 	bl	8005c92 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69da      	ldr	r2, [r3, #28]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800585a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69d9      	ldr	r1, [r3, #28]
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	021a      	lsls	r2, r3, #8
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	61da      	str	r2, [r3, #28]
 8005870:	e001      	b.n	8005876 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d831      	bhi.n	8005900 <HAL_TIM_ReadCapturedValue+0x78>
 800589c:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058d9 	.word	0x080058d9
 80058a8:	08005901 	.word	0x08005901
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005901 	.word	0x08005901
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	08005901 	.word	0x08005901
 80058bc:	08005901 	.word	0x08005901
 80058c0:	08005901 	.word	0x08005901
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	08005901 	.word	0x08005901
 80058cc:	08005901 	.word	0x08005901
 80058d0:	08005901 	.word	0x08005901
 80058d4:	080058f7 	.word	0x080058f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058de:	60fb      	str	r3, [r7, #12]

      break;
 80058e0:	e00f      	b.n	8005902 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	60fb      	str	r3, [r7, #12]

      break;
 80058ea:	e00a      	b.n	8005902 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f2:	60fb      	str	r3, [r7, #12]

      break;
 80058f4:	e005      	b.n	8005902 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	60fb      	str	r3, [r7, #12]

      break;
 80058fe:	e000      	b.n	8005902 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005900:	bf00      	nop
  }

  return tmpreg;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a46      	ldr	r2, [pc, #280]	@ (8005a8c <TIM_Base_SetConfig+0x12c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597e:	d00f      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a43      	ldr	r2, [pc, #268]	@ (8005a90 <TIM_Base_SetConfig+0x130>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a42      	ldr	r2, [pc, #264]	@ (8005a94 <TIM_Base_SetConfig+0x134>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a41      	ldr	r2, [pc, #260]	@ (8005a98 <TIM_Base_SetConfig+0x138>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a40      	ldr	r2, [pc, #256]	@ (8005a9c <TIM_Base_SetConfig+0x13c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d108      	bne.n	80059b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a35      	ldr	r2, [pc, #212]	@ (8005a8c <TIM_Base_SetConfig+0x12c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d02b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c0:	d027      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a32      	ldr	r2, [pc, #200]	@ (8005a90 <TIM_Base_SetConfig+0x130>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d023      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a31      	ldr	r2, [pc, #196]	@ (8005a94 <TIM_Base_SetConfig+0x134>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01f      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a30      	ldr	r2, [pc, #192]	@ (8005a98 <TIM_Base_SetConfig+0x138>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d01b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2f      	ldr	r2, [pc, #188]	@ (8005a9c <TIM_Base_SetConfig+0x13c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d017      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa0 <TIM_Base_SetConfig+0x140>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa4 <TIM_Base_SetConfig+0x144>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00f      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa8 <TIM_Base_SetConfig+0x148>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00b      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2b      	ldr	r2, [pc, #172]	@ (8005aac <TIM_Base_SetConfig+0x14c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d007      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <TIM_Base_SetConfig+0x150>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d003      	beq.n	8005a12 <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a29      	ldr	r2, [pc, #164]	@ (8005ab4 <TIM_Base_SetConfig+0x154>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d108      	bne.n	8005a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <TIM_Base_SetConfig+0x12c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d003      	beq.n	8005a58 <TIM_Base_SetConfig+0xf8>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a12      	ldr	r2, [pc, #72]	@ (8005a9c <TIM_Base_SetConfig+0x13c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d103      	bne.n	8005a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f023 0201 	bic.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	40001c00 	.word	0x40001c00
 8005ab4:	40002000 	.word	0x40002000

08005ab8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f023 0201 	bic.w	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <TIM_TI1_SetConfig+0xcc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01b      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aec:	d017      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a25      	ldr	r2, [pc, #148]	@ (8005b88 <TIM_TI1_SetConfig+0xd0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a24      	ldr	r2, [pc, #144]	@ (8005b8c <TIM_TI1_SetConfig+0xd4>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00f      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a23      	ldr	r2, [pc, #140]	@ (8005b90 <TIM_TI1_SetConfig+0xd8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00b      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a22      	ldr	r2, [pc, #136]	@ (8005b94 <TIM_TI1_SetConfig+0xdc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d007      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a21      	ldr	r2, [pc, #132]	@ (8005b98 <TIM_TI1_SetConfig+0xe0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_TI1_SetConfig+0x66>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a20      	ldr	r2, [pc, #128]	@ (8005b9c <TIM_TI1_SetConfig+0xe4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <TIM_TI1_SetConfig+0x6a>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <TIM_TI1_SetConfig+0x6c>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0303 	bic.w	r3, r3, #3
 8005b2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e003      	b.n	8005b42 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f023 030a 	bic.w	r3, r3, #10
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f003 030a 	and.w	r3, r3, #10
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40001800 	.word	0x40001800

08005ba0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 0210 	bic.w	r2, r3, #16
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	031b      	lsls	r3, r3, #12
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bf2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b087      	sub	sp, #28
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	031b      	lsls	r3, r3, #12
 8005cea:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	621a      	str	r2, [r3, #32]
}
 8005d00:	bf00      	nop
 8005d02:	371c      	adds	r7, #28
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 031f 	and.w	r3, r3, #31
 8005d1e:	2201      	movs	r2, #1
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1a      	ldr	r2, [r3, #32]
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	401a      	ands	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	6879      	ldr	r1, [r7, #4]
 8005d40:	fa01 f303 	lsl.w	r3, r1, r3
 8005d44:	431a      	orrs	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e05a      	b.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d022      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbc:	d01d      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d018      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00e      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d10c      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40001800 	.word	0x40001800

08005e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e78:	b084      	sub	sp, #16
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	f107 001c 	add.w	r0, r7, #28
 8005e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d123      	bne.n	8005eda <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9dc 	bl	800628c <USB_CoreReset>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	e01b      	b.n	8005f12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9d0 	bl	800628c <USB_CoreReset>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ef0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f04:	e005      	b.n	8005f12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f12:	7fbb      	ldrb	r3, [r7, #30]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10b      	bne.n	8005f30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f043 0206 	orr.w	r2, r3, #6
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f3c:	b004      	add	sp, #16
 8005f3e:	4770      	bx	lr

08005f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f043 0201 	orr.w	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0201 	bic.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d115      	bne.n	8005fd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fb2:	200a      	movs	r0, #10
 8005fb4:	f7fb f912 	bl	80011dc <HAL_Delay>
      ms += 10U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	330a      	adds	r3, #10
 8005fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f956 	bl	8006270 <USB_GetMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d01e      	beq.n	8006008 <USB_SetCurrentMode+0x84>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fce:	d9f0      	bls.n	8005fb2 <USB_SetCurrentMode+0x2e>
 8005fd0:	e01a      	b.n	8006008 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fe4:	200a      	movs	r0, #10
 8005fe6:	f7fb f8f9 	bl	80011dc <HAL_Delay>
      ms += 10U;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	330a      	adds	r3, #10
 8005fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f93d 	bl	8006270 <USB_GetMode>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <USB_SetCurrentMode+0x84>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006000:	d9f0      	bls.n	8005fe4 <USB_SetCurrentMode+0x60>
 8006002:	e001      	b.n	8006008 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e005      	b.n	8006014 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2bc8      	cmp	r3, #200	@ 0xc8
 800600c:	d101      	bne.n	8006012 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3301      	adds	r3, #1
 800602e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006036:	d901      	bls.n	800603c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e01b      	b.n	8006074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	daf2      	bge.n	800602a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	019b      	lsls	r3, r3, #6
 800604c:	f043 0220 	orr.w	r2, r3, #32
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006060:	d901      	bls.n	8006066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e006      	b.n	8006074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b20      	cmp	r3, #32
 8006070:	d0f0      	beq.n	8006054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006098:	d901      	bls.n	800609e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e018      	b.n	80060d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	daf2      	bge.n	800608c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2210      	movs	r2, #16
 80060ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3301      	adds	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060bc:	d901      	bls.n	80060c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e006      	b.n	80060d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0310 	and.w	r3, r3, #16
 80060ca:	2b10      	cmp	r3, #16
 80060cc:	d0f0      	beq.n	80060b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	@ 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4611      	mov	r1, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	460b      	mov	r3, r1
 80060ec:	71fb      	strb	r3, [r7, #7]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d123      	bne.n	800614a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	3303      	adds	r3, #3
 8006106:	089b      	lsrs	r3, r3, #2
 8006108:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	e018      	b.n	8006142 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	031a      	lsls	r2, r3, #12
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	4413      	add	r3, r2
 8006118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800611c:	461a      	mov	r2, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	3301      	adds	r3, #1
 800612e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	3301      	adds	r3, #1
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3e2      	bcc.n	8006110 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3724      	adds	r7, #36	@ 0x24
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006158:	b480      	push	{r7}
 800615a:	b08b      	sub	sp, #44	@ 0x2c
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	b29b      	uxth	r3, r3
 8006174:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	e014      	b.n	80061ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006192:	3301      	adds	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	3301      	adds	r3, #1
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	3301      	adds	r3, #1
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	3301      	adds	r3, #1
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	3301      	adds	r3, #1
 80061ac:	623b      	str	r3, [r7, #32]
 80061ae:	6a3a      	ldr	r2, [r7, #32]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d3e6      	bcc.n	8006184 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061b6:	8bfb      	ldrh	r3, [r7, #30]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01e      	beq.n	80061fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061c6:	461a      	mov	r2, r3
 80061c8:	f107 0310 	add.w	r3, r7, #16
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	701a      	strb	r2, [r3, #0]
      i++;
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	3301      	adds	r3, #1
 80061e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	3301      	adds	r3, #1
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80061ee:	8bfb      	ldrh	r3, [r7, #30]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061f4:	8bfb      	ldrh	r3, [r7, #30]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1ea      	bne.n	80061d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	372c      	adds	r7, #44	@ 0x2c
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4013      	ands	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006220:	68fb      	ldr	r3, [r7, #12]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	4013      	ands	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006262:	68bb      	ldr	r3, [r7, #8]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0301 	and.w	r3, r3, #1
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062a4:	d901      	bls.n	80062aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01b      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	daf2      	bge.n	8006298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f043 0201 	orr.w	r2, r3, #1
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ce:	d901      	bls.n	80062d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e006      	b.n	80062e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d0f0      	beq.n	80062c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062f0:	b084      	sub	sp, #16
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d119      	bne.n	800637a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10a      	bne.n	8006364 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800635c:	f043 0304 	orr.w	r3, r3, #4
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e014      	b.n	800638e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006372:	f023 0304 	bic.w	r3, r3, #4
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e009      	b.n	800638e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800638e:	2110      	movs	r1, #16
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fe43 	bl	800601c <USB_FlushTxFifo>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fe6d 	bl	8006080 <USB_FlushRxFifo>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e015      	b.n	80063e2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c2:	461a      	mov	r2, r3
 80063c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063c8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d6:	461a      	mov	r2, r3
 80063d8:	2300      	movs	r3, #0
 80063da:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3301      	adds	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063e6:	461a      	mov	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d3e3      	bcc.n	80063b6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063fa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <USB_HostInit+0x170>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10b      	bne.n	800641c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <USB_HostInit+0x174>)
 8006410:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a14      	ldr	r2, [pc, #80]	@ (8006468 <USB_HostInit+0x178>)
 8006416:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800641a:	e009      	b.n	8006430 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2280      	movs	r2, #128	@ 0x80
 8006420:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a11      	ldr	r2, [pc, #68]	@ (800646c <USB_HostInit+0x17c>)
 8006426:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a11      	ldr	r2, [pc, #68]	@ (8006470 <USB_HostInit+0x180>)
 800642c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006430:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	4b0a      	ldr	r3, [pc, #40]	@ (8006474 <USB_HostInit+0x184>)
 800644a:	4313      	orrs	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006450:	7dfb      	ldrb	r3, [r7, #23]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800645c:	b004      	add	sp, #16
 800645e:	4770      	bx	lr
 8006460:	40040000 	.word	0x40040000
 8006464:	01000200 	.word	0x01000200
 8006468:	00e00300 	.word	0x00e00300
 800646c:	00600080 	.word	0x00600080
 8006470:	004000e0 	.word	0x004000e0
 8006474:	a3200008 	.word	0xa3200008

08006478 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	68f9      	ldr	r1, [r7, #12]
 80064ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d107      	bne.n	80064ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c0:	461a      	mov	r2, r3
 80064c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064c6:	6053      	str	r3, [r2, #4]
 80064c8:	e00c      	b.n	80064e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80064ca:	78fb      	ldrb	r3, [r7, #3]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d6:	461a      	mov	r2, r3
 80064d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	e001      	b.n	80064e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006512:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800651c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006520:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006522:	2064      	movs	r0, #100	@ 0x64
 8006524:	f7fa fe5a 	bl	80011dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006534:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006536:	200a      	movs	r0, #10
 8006538:	f7fa fe50 	bl	80011dc <HAL_Delay>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800656a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <USB_DriveVbus+0x44>
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006584:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006588:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006594:	d109      	bne.n	80065aa <USB_DriveVbus+0x64>
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065a8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0c5b      	lsrs	r3, r3, #17
 80065d6:	f003 0303 	and.w	r3, r3, #3
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	b29b      	uxth	r3, r3
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	4603      	mov	r3, r0
 8006618:	70fb      	strb	r3, [r7, #3]
 800661a:	460b      	mov	r3, r1
 800661c:	70bb      	strb	r3, [r7, #2]
 800661e:	4613      	mov	r3, r2
 8006620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006636:	461a      	mov	r2, r3
 8006638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800663c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800663e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006642:	2b03      	cmp	r3, #3
 8006644:	d87c      	bhi.n	8006740 <USB_HC_Init+0x138>
 8006646:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <USB_HC_Init+0x44>)
 8006648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664c:	0800665d 	.word	0x0800665d
 8006650:	08006703 	.word	0x08006703
 8006654:	0800665d 	.word	0x0800665d
 8006658:	080066c5 	.word	0x080066c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006668:	461a      	mov	r2, r3
 800666a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800666e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006670:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006674:	2b00      	cmp	r3, #0
 8006676:	da10      	bge.n	800669a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	78fa      	ldrb	r2, [r7, #3]
 8006688:	0151      	lsls	r1, r2, #5
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	440a      	add	r2, r1
 800668e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006696:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006698:	e055      	b.n	8006746 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a6f      	ldr	r2, [pc, #444]	@ (800685c <USB_HC_Init+0x254>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d151      	bne.n	8006746 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80066a2:	78fb      	ldrb	r3, [r7, #3]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066c0:	60d3      	str	r3, [r2, #12]
      break;
 80066c2:	e040      	b.n	8006746 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d0:	461a      	mov	r2, r3
 80066d2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80066d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da34      	bge.n	800674a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	78fa      	ldrb	r2, [r7, #3]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006700:	e023      	b.n	800674a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006702:	78fb      	ldrb	r3, [r7, #3]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800670e:	461a      	mov	r2, r3
 8006710:	f240 2325 	movw	r3, #549	@ 0x225
 8006714:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006716:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800671a:	2b00      	cmp	r3, #0
 800671c:	da17      	bge.n	800674e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	78fa      	ldrb	r2, [r7, #3]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	440a      	add	r2, r1
 8006734:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006738:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800673c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800673e:	e006      	b.n	800674e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
      break;
 8006744:	e004      	b.n	8006750 <USB_HC_Init+0x148>
      break;
 8006746:	bf00      	nop
 8006748:	e002      	b.n	8006750 <USB_HC_Init+0x148>
      break;
 800674a:	bf00      	nop
 800674c:	e000      	b.n	8006750 <USB_HC_Init+0x148>
      break;
 800674e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	440a      	add	r2, r1
 8006778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800677c:	f043 0302 	orr.w	r3, r3, #2
 8006780:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	2101      	movs	r1, #1
 8006792:	fa01 f303 	lsl.w	r3, r1, r3
 8006796:	6939      	ldr	r1, [r7, #16]
 8006798:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800679c:	4313      	orrs	r3, r2
 800679e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	da03      	bge.n	80067bc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e001      	b.n	80067c0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff fef9 	bl	80065b8 <USB_GetHostSpeed>
 80067c6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d106      	bne.n	80067de <USB_HC_Init+0x1d6>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d003      	beq.n	80067de <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e001      	b.n	80067e2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067e2:	787b      	ldrb	r3, [r7, #1]
 80067e4:	059b      	lsls	r3, r3, #22
 80067e6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067ea:	78bb      	ldrb	r3, [r7, #2]
 80067ec:	02db      	lsls	r3, r3, #11
 80067ee:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067f2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067f8:	049b      	lsls	r3, r3, #18
 80067fa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067fe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006800:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006802:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006806:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	431a      	orrs	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	440a      	add	r2, r1
 8006818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800681c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006820:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006822:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006826:	2b03      	cmp	r3, #3
 8006828:	d003      	beq.n	8006832 <USB_HC_Init+0x22a>
 800682a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10f      	bne.n	8006852 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	78fa      	ldrb	r2, [r7, #3]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	440a      	add	r2, r1
 8006848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006850:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006852:	7ffb      	ldrb	r3, [r7, #31]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3720      	adds	r7, #32
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40040000 	.word	0x40040000

08006860 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08c      	sub	sp, #48	@ 0x30
 8006864:	af02      	add	r7, sp, #8
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	785b      	ldrb	r3, [r3, #1]
 8006876:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800687c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a5d      	ldr	r2, [pc, #372]	@ (80069f8 <USB_HC_StartXfer+0x198>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d12f      	bne.n	80068e6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11c      	bne.n	80068c6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	7c9b      	ldrb	r3, [r3, #18]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <USB_HC_StartXfer+0x3c>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	7c9b      	ldrb	r3, [r3, #18]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d124      	bne.n	80068e6 <USB_HC_StartXfer+0x86>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	799b      	ldrb	r3, [r3, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d120      	bne.n	80068e6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	69fa      	ldr	r2, [r7, #28]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	6a3a      	ldr	r2, [r7, #32]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	60d3      	str	r3, [r2, #12]
 80068c4:	e00f      	b.n	80068e6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <USB_HC_StartXfer+0x86>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	795b      	ldrb	r3, [r3, #5]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d107      	bne.n	80068e6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	785b      	ldrb	r3, [r3, #1]
 80068da:	4619      	mov	r1, r3
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fb6b 	bl	8006fb8 <USB_DoPing>
        return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e232      	b.n	8006d4c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	799b      	ldrb	r3, [r3, #6]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d158      	bne.n	80069a0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80068ee:	2301      	movs	r3, #1
 80068f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	78db      	ldrb	r3, [r3, #3]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	8a92      	ldrh	r2, [r2, #20]
 8006900:	fb03 f202 	mul.w	r2, r3, r2
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	61da      	str	r2, [r3, #28]
 8006908:	e07c      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	7c9b      	ldrb	r3, [r3, #18]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d130      	bne.n	8006974 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	2bbc      	cmp	r3, #188	@ 0xbc
 8006918:	d918      	bls.n	800694c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	8a9b      	ldrh	r3, [r3, #20]
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d003      	beq.n	800693c <USB_HC_StartXfer+0xdc>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d103      	bne.n	8006944 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2202      	movs	r2, #2
 8006940:	60da      	str	r2, [r3, #12]
 8006942:	e05f      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2201      	movs	r2, #1
 8006948:	60da      	str	r2, [r3, #12]
 800694a:	e05b      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d007      	beq.n	800696c <USB_HC_StartXfer+0x10c>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d003      	beq.n	800696c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2204      	movs	r2, #4
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e04b      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2203      	movs	r2, #3
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e047      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10d      	bne.n	8006996 <USB_HC_StartXfer+0x136>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	8a92      	ldrh	r2, [r2, #20]
 8006982:	4293      	cmp	r3, r2
 8006984:	d907      	bls.n	8006996 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006986:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	8a92      	ldrh	r2, [r2, #20]
 800698c:	fb03 f202 	mul.w	r2, r3, r2
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	61da      	str	r2, [r3, #28]
 8006994:	e036      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	6a1a      	ldr	r2, [r3, #32]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	61da      	str	r2, [r3, #28]
 800699e:	e031      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d018      	beq.n	80069da <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	8a92      	ldrh	r2, [r2, #20]
 80069b0:	4413      	add	r3, r2
 80069b2:	3b01      	subs	r3, #1
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	8a92      	ldrh	r2, [r2, #20]
 80069b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80069be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80069c0:	8b7b      	ldrh	r3, [r7, #26]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d90b      	bls.n	80069de <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
 80069c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	8a92      	ldrh	r2, [r2, #20]
 80069d0:	fb03 f202 	mul.w	r2, r3, r2
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	61da      	str	r2, [r3, #28]
 80069d8:	e001      	b.n	80069de <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80069da:	2301      	movs	r3, #1
 80069dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	8a92      	ldrh	r2, [r2, #20]
 80069ec:	fb03 f202 	mul.w	r2, r3, r2
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61da      	str	r2, [r3, #28]
 80069f4:	e006      	b.n	8006a04 <USB_HC_StartXfer+0x1a4>
 80069f6:	bf00      	nop
 80069f8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a0e:	04d9      	lsls	r1, r3, #19
 8006a10:	4ba3      	ldr	r3, [pc, #652]	@ (8006ca0 <USB_HC_StartXfer+0x440>)
 8006a12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	7d9b      	ldrb	r3, [r3, #22]
 8006a1a:	075b      	lsls	r3, r3, #29
 8006a1c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	0148      	lsls	r0, r1, #5
 8006a24:	6a39      	ldr	r1, [r7, #32]
 8006a26:	4401      	add	r1, r0
 8006a28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d009      	beq.n	8006a4a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	6999      	ldr	r1, [r3, #24]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a46:	460a      	mov	r2, r1
 8006a48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bf0c      	ite	eq
 8006a5a:	2301      	moveq	r3, #1
 8006a5c:	2300      	movne	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69fa      	ldr	r2, [r7, #28]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	7e7b      	ldrb	r3, [r7, #25]
 8006a92:	075b      	lsls	r3, r3, #29
 8006a94:	69f9      	ldr	r1, [r7, #28]
 8006a96:	0148      	lsls	r0, r1, #5
 8006a98:	6a39      	ldr	r1, [r7, #32]
 8006a9a:	4401      	add	r1, r0
 8006a9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	799b      	ldrb	r3, [r3, #6]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	f040 80c3 	bne.w	8006c34 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	7c5b      	ldrb	r3, [r3, #17]
 8006ab2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	6a3a      	ldr	r2, [r7, #32]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006aca:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	69fa      	ldr	r2, [r7, #28]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ae6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006aea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	79db      	ldrb	r3, [r3, #7]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d123      	bne.n	8006b3c <USB_HC_StartXfer+0x2dc>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	78db      	ldrb	r3, [r3, #3]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d11f      	bne.n	8006b3c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b1a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	0151      	lsls	r1, r2, #5
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	440a      	add	r2, r1
 8006b32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	7c9b      	ldrb	r3, [r3, #18]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d003      	beq.n	8006b4c <USB_HC_StartXfer+0x2ec>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	7c9b      	ldrb	r3, [r3, #18]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d117      	bne.n	8006b7c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d113      	bne.n	8006b7c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	78db      	ldrb	r3, [r3, #3]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10f      	bne.n	8006b7c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	6a3a      	ldr	r2, [r7, #32]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b7a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	7c9b      	ldrb	r3, [r3, #18]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d162      	bne.n	8006c4a <USB_HC_StartXfer+0x3ea>
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	78db      	ldrb	r3, [r3, #3]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d15e      	bne.n	8006c4a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d858      	bhi.n	8006c48 <USB_HC_StartXfer+0x3e8>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <USB_HC_StartXfer+0x33c>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006bf1 	.word	0x08006bf1
 8006ba8:	08006c13 	.word	0x08006c13
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bca:	6053      	str	r3, [r2, #4]
          break;
 8006bcc:	e03d      	b.n	8006c4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	0151      	lsls	r1, r2, #5
 8006be0:	6a3a      	ldr	r2, [r7, #32]
 8006be2:	440a      	add	r2, r1
 8006be4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006be8:	f043 030e 	orr.w	r3, r3, #14
 8006bec:	6053      	str	r3, [r2, #4]
          break;
 8006bee:	e02c      	b.n	8006c4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	6a3a      	ldr	r2, [r7, #32]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c0e:	6053      	str	r3, [r2, #4]
          break;
 8006c10:	e01b      	b.n	8006c4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c30:	6053      	str	r3, [r2, #4]
          break;
 8006c32:	e00a      	b.n	8006c4a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c40:	461a      	mov	r2, r3
 8006c42:	2300      	movs	r3, #0
 8006c44:	6053      	str	r3, [r2, #4]
 8006c46:	e000      	b.n	8006c4a <USB_HC_StartXfer+0x3ea>
          break;
 8006c48:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c60:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	78db      	ldrb	r3, [r3, #3]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	e003      	b.n	8006c7c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c7a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c82:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c90:	461a      	mov	r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e055      	b.n	8006d4c <USB_HC_StartXfer+0x4ec>
 8006ca0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d14e      	bne.n	8006d4a <USB_HC_StartXfer+0x4ea>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d04a      	beq.n	8006d4a <USB_HC_StartXfer+0x4ea>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	79db      	ldrb	r3, [r3, #7]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d146      	bne.n	8006d4a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	7c9b      	ldrb	r3, [r3, #18]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d831      	bhi.n	8006d28 <USB_HC_StartXfer+0x4c8>
 8006cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <USB_HC_StartXfer+0x46c>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006d01 	.word	0x08006d01
 8006cd4:	08006cdd 	.word	0x08006cdd
 8006cd8:	08006d01 	.word	0x08006d01
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	089b      	lsrs	r3, r3, #2
 8006ce4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ce6:	8afa      	ldrh	r2, [r7, #22]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d91c      	bls.n	8006d2c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f043 0220 	orr.w	r2, r3, #32
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cfe:	e015      	b.n	8006d2c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	3303      	adds	r3, #3
 8006d06:	089b      	lsrs	r3, r3, #2
 8006d08:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d0a:	8afa      	ldrh	r2, [r7, #22]
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d90a      	bls.n	8006d30 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d26:	e003      	b.n	8006d30 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <USB_HC_StartXfer+0x4d2>
        break;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <USB_HC_StartXfer+0x4d2>
        break;
 8006d30:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	6999      	ldr	r1, [r3, #24]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	785a      	ldrb	r2, [r3, #1]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2000      	movs	r0, #0
 8006d42:	9000      	str	r0, [sp, #0]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff f9c9 	bl	80060dc <USB_WritePacket>
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3728      	adds	r7, #40	@ 0x28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	b29b      	uxth	r3, r3
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b089      	sub	sp, #36	@ 0x24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	0c9b      	lsrs	r3, r3, #18
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	0fdb      	lsrs	r3, r3, #31
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	0fdb      	lsrs	r3, r3, #31
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d10d      	bne.n	8006df8 <USB_HC_Halt+0x82>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <USB_HC_Halt+0x82>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d005      	beq.n	8006df4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d002      	beq.n	8006df4 <USB_HC_Halt+0x7e>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d101      	bne.n	8006df8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e0d8      	b.n	8006faa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <USB_HC_Halt+0x8e>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d173      	bne.n	8006eec <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	0151      	lsls	r1, r2, #5
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	440a      	add	r2, r1
 8006e1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e22:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d14a      	bne.n	8006ec6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d133      	bne.n	8006ea4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e5a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e7a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e88:	d82e      	bhi.n	8006ee8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ea0:	d0ec      	beq.n	8006e7c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ea2:	e081      	b.n	8006fa8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ebe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ec2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ec4:	e070      	b.n	8006fa8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ee4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ee6:	e05f      	b.n	8006fa8 <USB_HC_Halt+0x232>
            break;
 8006ee8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eea:	e05d      	b.n	8006fa8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f0a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d133      	bne.n	8006f84 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f3a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	69fa      	ldr	r2, [r7, #28]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f5a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f68:	d81d      	bhi.n	8006fa6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f80:	d0ec      	beq.n	8006f5c <USB_HC_Halt+0x1e6>
 8006f82:	e011      	b.n	8006fa8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	e000      	b.n	8006fa8 <USB_HC_Halt+0x232>
          break;
 8006fa6:	bf00      	nop
    }
  }

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3724      	adds	r7, #36	@ 0x24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
	...

08006fb8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	04da      	lsls	r2, r3, #19
 8006fd4:	4b15      	ldr	r3, [pc, #84]	@ (800702c <USB_DoPing+0x74>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fe4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fe8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007000:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007008:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007016:	461a      	mov	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	371c      	adds	r7, #28
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	1ff80000 	.word	0x1ff80000

08007030 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe ff8c 	bl	8005f62 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800704a:	2110      	movs	r1, #16
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7fe ffe5 	bl	800601c <USB_FlushTxFifo>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff f80f 	bl	8006080 <USB_FlushRxFifo>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	e01f      	b.n	80070b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007088:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007090:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007098:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	461a      	mov	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	3301      	adds	r3, #1
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	2b0f      	cmp	r3, #15
 80070b6:	d9dc      	bls.n	8007072 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e034      	b.n	8007128 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f2:	461a      	mov	r2, r3
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007104:	d80c      	bhi.n	8007120 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007118:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800711c:	d0ec      	beq.n	80070f8 <USB_StopHost+0xc8>
 800711e:	e000      	b.n	8007122 <USB_StopHost+0xf2>
        break;
 8007120:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	3301      	adds	r3, #1
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	d9c7      	bls.n	80070be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007134:	461a      	mov	r2, r3
 8007136:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800713a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007142:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fe fefb 	bl	8005f40 <USB_EnableGlobalInt>

  return ret;
 800714a:	7ffb      	ldrb	r3, [r7, #31]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3720      	adds	r7, #32
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b089      	sub	sp, #36	@ 0x24
 8007158:	af04      	add	r7, sp, #16
 800715a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800715c:	2301      	movs	r3, #1
 800715e:	2202      	movs	r2, #2
 8007160:	2102      	movs	r1, #2
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fc85 	bl	8007a72 <USBH_FindInterface>
 8007168:	4603      	mov	r3, r0
 800716a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2bff      	cmp	r3, #255	@ 0xff
 8007170:	d002      	beq.n	8007178 <USBH_CDC_InterfaceInit+0x24>
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d901      	bls.n	800717c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	e13d      	b.n	80073f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fc5a 	bl	8007a3a <USBH_SelectInterface>
 8007186:	4603      	mov	r3, r0
 8007188:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007190:	2302      	movs	r3, #2
 8007192:	e131      	b.n	80073f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800719a:	2050      	movs	r0, #80	@ 0x50
 800719c:	f002 fb64 	bl	8009868 <malloc>
 80071a0:	4603      	mov	r3, r0
 80071a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80071b4:	2302      	movs	r3, #2
 80071b6:	e11f      	b.n	80073f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80071b8:	2250      	movs	r2, #80	@ 0x50
 80071ba:	2100      	movs	r1, #0
 80071bc:	68b8      	ldr	r0, [r7, #8]
 80071be:	f002 fc11 	bl	80099e4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	211a      	movs	r1, #26
 80071c8:	fb01 f303 	mul.w	r3, r1, r3
 80071cc:	4413      	add	r3, r2
 80071ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da15      	bge.n	8007206 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	211a      	movs	r1, #26
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	4413      	add	r3, r2
 80071e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	211a      	movs	r1, #26
 80071f6:	fb01 f303 	mul.w	r3, r1, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007200:	881a      	ldrh	r2, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	785b      	ldrb	r3, [r3, #1]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 ffbe 	bl	800918e <USBH_AllocPipe>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	7819      	ldrb	r1, [r3, #0]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	7858      	ldrb	r0, [r3, #1]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	8952      	ldrh	r2, [r2, #10]
 8007232:	9202      	str	r2, [sp, #8]
 8007234:	2203      	movs	r2, #3
 8007236:	9201      	str	r2, [sp, #4]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4623      	mov	r3, r4
 800723c:	4602      	mov	r2, r0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 ff76 	bl	8009130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2200      	movs	r2, #0
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f002 fa85 	bl	800975c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007252:	2300      	movs	r3, #0
 8007254:	2200      	movs	r2, #0
 8007256:	210a      	movs	r1, #10
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc0a 	bl	8007a72 <USBH_FindInterface>
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2bff      	cmp	r3, #255	@ 0xff
 8007266:	d002      	beq.n	800726e <USBH_CDC_InterfaceInit+0x11a>
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d901      	bls.n	8007272 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	e0c2      	b.n	80073f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	211a      	movs	r1, #26
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	4413      	add	r3, r2
 800727e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b25b      	sxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	da16      	bge.n	80072b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	211a      	movs	r1, #26
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800729a:	781a      	ldrb	r2, [r3, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	211a      	movs	r1, #26
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072b0:	881a      	ldrh	r2, [r3, #0]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	835a      	strh	r2, [r3, #26]
 80072b6:	e015      	b.n	80072e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	211a      	movs	r1, #26
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	211a      	movs	r1, #26
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072de:	881a      	ldrh	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	211a      	movs	r1, #26
 80072ea:	fb01 f303 	mul.w	r3, r1, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b25b      	sxtb	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da16      	bge.n	800732a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	211a      	movs	r1, #26
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	211a      	movs	r1, #26
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007322:	881a      	ldrh	r2, [r3, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	835a      	strh	r2, [r3, #26]
 8007328:	e015      	b.n	8007356 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	211a      	movs	r1, #26
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007350:	881a      	ldrh	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	7b9b      	ldrb	r3, [r3, #14]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 ff16 	bl	800918e <USBH_AllocPipe>
 8007362:	4603      	mov	r3, r0
 8007364:	461a      	mov	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	7bdb      	ldrb	r3, [r3, #15]
 800736e:	4619      	mov	r1, r3
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f001 ff0c 	bl	800918e <USBH_AllocPipe>
 8007376:	4603      	mov	r3, r0
 8007378:	461a      	mov	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	7b59      	ldrb	r1, [r3, #13]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	7b98      	ldrb	r0, [r3, #14]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	8b12      	ldrh	r2, [r2, #24]
 8007396:	9202      	str	r2, [sp, #8]
 8007398:	2202      	movs	r2, #2
 800739a:	9201      	str	r2, [sp, #4]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	4623      	mov	r3, r4
 80073a0:	4602      	mov	r2, r0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fec4 	bl	8009130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	7b19      	ldrb	r1, [r3, #12]
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	7bd8      	ldrb	r0, [r3, #15]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	8b52      	ldrh	r2, [r2, #26]
 80073c0:	9202      	str	r2, [sp, #8]
 80073c2:	2202      	movs	r2, #2
 80073c4:	9201      	str	r2, [sp, #4]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4623      	mov	r3, r4
 80073ca:	4602      	mov	r2, r0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 feaf 	bl	8009130 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	7b5b      	ldrb	r3, [r3, #13]
 80073de:	2200      	movs	r2, #0
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f002 f9ba 	bl	800975c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	7b1b      	ldrb	r3, [r3, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 f9b3 	bl	800975c <USBH_LL_SetToggle>

  return USBH_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd90      	pop	{r4, r7, pc}

08007400 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 fea4 	bl	800916e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f001 fecf 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	7b1b      	ldrb	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	7b1b      	ldrb	r3, [r3, #12]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fe91 	bl	800916e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	7b1b      	ldrb	r3, [r3, #12]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f001 febc 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	7b5b      	ldrb	r3, [r3, #13]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	7b5b      	ldrb	r3, [r3, #13]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fe7e 	bl	800916e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	7b5b      	ldrb	r3, [r3, #13]
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f001 fea9 	bl	80091d0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	4618      	mov	r0, r3
 800749a:	f002 f9ed 	bl	8009878 <free>
    phost->pActiveClass->pData = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074a4:	2200      	movs	r2, #0
 80074a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3340      	adds	r3, #64	@ 0x40
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8b1 	bl	8007632 <GetLineCoding>
 80074d0:	4603      	mov	r3, r0
 80074d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074e0:	2102      	movs	r1, #2
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074e6:	7afb      	ldrb	r3, [r7, #11]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007510:	2b04      	cmp	r3, #4
 8007512:	d877      	bhi.n	8007604 <USBH_CDC_Process+0x114>
 8007514:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <USBH_CDC_Process+0x2c>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	08007531 	.word	0x08007531
 8007520:	08007537 	.word	0x08007537
 8007524:	08007567 	.word	0x08007567
 8007528:	080075db 	.word	0x080075db
 800752c:	080075e9 	.word	0x080075e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e06d      	b.n	8007612 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f897 	bl	8007670 <SetLineCoding>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007554:	e058      	b.n	8007608 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d055      	beq.n	8007608 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2204      	movs	r2, #4
 8007560:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007564:	e050      	b.n	8007608 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	3340      	adds	r3, #64	@ 0x40
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f860 	bl	8007632 <GetLineCoding>
 8007572:	4603      	mov	r3, r0
 8007574:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d126      	bne.n	80075ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758e:	791b      	ldrb	r3, [r3, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d13b      	bne.n	800760c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d133      	bne.n	800760c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d12b      	bne.n	800760c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075be:	429a      	cmp	r2, r3
 80075c0:	d124      	bne.n	800760c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f958 	bl	8007878 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075c8:	e020      	b.n	800760c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d01d      	beq.n	800760c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2204      	movs	r2, #4
 80075d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80075d8:	e018      	b.n	800760c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f867 	bl	80076ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8da 	bl	800779a <CDC_ProcessReception>
      break;
 80075e6:	e014      	b.n	8007612 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f81a 	bl	8008624 <USBH_ClrFeature>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10a      	bne.n	8007610 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007602:	e005      	b.n	8007610 <USBH_CDC_Process+0x120>

    default:
      break;
 8007604:	bf00      	nop
 8007606:	e004      	b.n	8007612 <USBH_CDC_Process+0x122>
      break;
 8007608:	bf00      	nop
 800760a:	e002      	b.n	8007612 <USBH_CDC_Process+0x122>
      break;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <USBH_CDC_Process+0x122>
      break;
 8007610:	bf00      	nop

  }

  return status;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	22a1      	movs	r2, #161	@ 0xa1
 8007640:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2221      	movs	r2, #33	@ 0x21
 8007646:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2207      	movs	r2, #7
 8007658:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2207      	movs	r2, #7
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fb14 	bl	8008c8e <USBH_CtlReq>
 8007666:	4603      	mov	r3, r0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2221      	movs	r2, #33	@ 0x21
 800767e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2207      	movs	r2, #7
 8007696:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2207      	movs	r2, #7
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 faf5 	bl	8008c8e <USBH_CtlReq>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af02      	add	r7, sp, #8
 80076b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d002      	beq.n	80076d4 <CDC_ProcessTransmission+0x26>
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d023      	beq.n	800771a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076d2:	e05e      	b.n	8007792 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	8b12      	ldrh	r2, [r2, #24]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d90b      	bls.n	80076f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	69d9      	ldr	r1, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8b1a      	ldrh	r2, [r3, #24]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	7b5b      	ldrb	r3, [r3, #13]
 80076ec:	2001      	movs	r0, #1
 80076ee:	9000      	str	r0, [sp, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 fcda 	bl	80090aa <USBH_BulkSendData>
 80076f6:	e00b      	b.n	8007710 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	7b5b      	ldrb	r3, [r3, #13]
 8007706:	2001      	movs	r0, #1
 8007708:	9000      	str	r0, [sp, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 fccd 	bl	80090aa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007718:	e03b      	b.n	8007792 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	7b5b      	ldrb	r3, [r3, #13]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fff1 	bl	8009708 <USBH_LL_GetURBState>
 8007726:	4603      	mov	r3, r0
 8007728:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d128      	bne.n	8007782 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	8b12      	ldrh	r2, [r2, #24]
 8007738:	4293      	cmp	r3, r2
 800773a:	d90e      	bls.n	800775a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	8b12      	ldrh	r2, [r2, #24]
 8007744:	1a9a      	subs	r2, r3, r2
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	8b12      	ldrh	r2, [r2, #24]
 8007752:	441a      	add	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	61da      	str	r2, [r3, #28]
 8007758:	e002      	b.n	8007760 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007770:	e00e      	b.n	8007790 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f868 	bl	8007850 <USBH_CDC_TransmitCallback>
      break;
 8007780:	e006      	b.n	8007790 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d103      	bne.n	8007790 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007790:	bf00      	nop
  }
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d002      	beq.n	80077c0 <CDC_ProcessReception+0x26>
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d00e      	beq.n	80077dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077be:	e043      	b.n	8007848 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	6a19      	ldr	r1, [r3, #32]
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	8b5a      	ldrh	r2, [r3, #26]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	7b1b      	ldrb	r3, [r3, #12]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fc91 	bl	80090f4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2204      	movs	r2, #4
 80077d6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80077da:	e035      	b.n	8007848 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	7b1b      	ldrb	r3, [r3, #12]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f001 ff90 	bl	8009708 <USBH_LL_GetURBState>
 80077e8:	4603      	mov	r3, r0
 80077ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077ec:	7cfb      	ldrb	r3, [r7, #19]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d129      	bne.n	8007846 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	7b1b      	ldrb	r3, [r3, #12]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fef3 	bl	80095e4 <USBH_LL_GetLastXferSize>
 80077fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	429a      	cmp	r2, r3
 8007808:	d016      	beq.n	8007838 <CDC_ProcessReception+0x9e>
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	8b5b      	ldrh	r3, [r3, #26]
 800780e:	461a      	mov	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4293      	cmp	r3, r2
 8007814:	d110      	bne.n	8007838 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	1ad2      	subs	r2, r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	441a      	add	r2, r3
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2203      	movs	r2, #3
 8007832:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007836:	e006      	b.n	8007846 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f80f 	bl	8007864 <USBH_CDC_ReceiveCallback>
      break;
 8007846:	bf00      	nop
  }
}
 8007848:	bf00      	nop
 800784a:	3718      	adds	r7, #24
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80078a0:	2302      	movs	r3, #2
 80078a2:	e029      	b.n	80078f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	79fa      	ldrb	r2, [r7, #7]
 80078a8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f81f 	bl	8007900 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fdc3 	bl	800947c <USBH_LL_Init>

  return USBH_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	e009      	b.n	8007926 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	33e0      	adds	r3, #224	@ 0xe0
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	2200      	movs	r2, #0
 800791e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d9f2      	bls.n	8007912 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e009      	b.n	8007946 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800794c:	d3f1      	bcc.n	8007932 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2240      	movs	r2, #64	@ 0x40
 8007972:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	331c      	adds	r3, #28
 800799e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80079a2:	2100      	movs	r1, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f002 f81d 	bl	80099e4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80079b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f002 f814 	bl	80099e4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80079c2:	2212      	movs	r2, #18
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 f80c 	bl	80099e4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079d2:	223e      	movs	r2, #62	@ 0x3e
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f002 f804 	bl	80099e4 <memset>

  return USBH_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10e      	bne.n	8007a22 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007a0a:	1c59      	adds	r1, r3, #1
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	33de      	adds	r3, #222	@ 0xde
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
 8007a20:	e004      	b.n	8007a2c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a22:	2302      	movs	r3, #2
 8007a24:	73fb      	strb	r3, [r7, #15]
 8007a26:	e001      	b.n	8007a2c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007a50:	78fa      	ldrb	r2, [r7, #3]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d204      	bcs.n	8007a60 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007a5e:	e001      	b.n	8007a64 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a60:	2302      	movs	r3, #2
 8007a62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b087      	sub	sp, #28
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	4608      	mov	r0, r1
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	461a      	mov	r2, r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	70fb      	strb	r3, [r7, #3]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70bb      	strb	r3, [r7, #2]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a9a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a9c:	e025      	b.n	8007aea <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	221a      	movs	r2, #26
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3302      	adds	r3, #2
 8007aae:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	795b      	ldrb	r3, [r3, #5]
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d002      	beq.n	8007ac0 <USBH_FindInterface+0x4e>
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	2bff      	cmp	r3, #255	@ 0xff
 8007abe:	d111      	bne.n	8007ae4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ac4:	78ba      	ldrb	r2, [r7, #2]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d002      	beq.n	8007ad0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aca:	78bb      	ldrb	r3, [r7, #2]
 8007acc:	2bff      	cmp	r3, #255	@ 0xff
 8007ace:	d109      	bne.n	8007ae4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ad4:	787a      	ldrb	r2, [r7, #1]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d002      	beq.n	8007ae0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ada:	787b      	ldrb	r3, [r7, #1]
 8007adc:	2bff      	cmp	r3, #255	@ 0xff
 8007ade:	d101      	bne.n	8007ae4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	e006      	b.n	8007af2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d9d6      	bls.n	8007a9e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007af0:	23ff      	movs	r3, #255	@ 0xff
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fcf4 	bl	80094f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 fe0d 	bl	800972e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af04      	add	r7, sp, #16
 8007b26:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d102      	bne.n	8007b42 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b0b      	cmp	r3, #11
 8007b4a:	f200 81bb 	bhi.w	8007ec4 <USBH_Process+0x3a4>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <USBH_Process+0x34>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007bb7 	.word	0x08007bb7
 8007b5c:	08007c1f 	.word	0x08007c1f
 8007b60:	08007e5f 	.word	0x08007e5f
 8007b64:	08007ec5 	.word	0x08007ec5
 8007b68:	08007cbf 	.word	0x08007cbf
 8007b6c:	08007e05 	.word	0x08007e05
 8007b70:	08007cf5 	.word	0x08007cf5
 8007b74:	08007d15 	.word	0x08007d15
 8007b78:	08007d33 	.word	0x08007d33
 8007b7c:	08007d77 	.word	0x08007d77
 8007b80:	08007e47 	.word	0x08007e47
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 819b 	beq.w	8007ec8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b98:	20c8      	movs	r0, #200	@ 0xc8
 8007b9a:	f001 fe12 	bl	80097c2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fd05 	bl	80095ae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bb4:	e188      	b.n	8007ec8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d107      	bne.n	8007bd0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bce:	e18a      	b.n	8007ee6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007bd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bda:	d914      	bls.n	8007c06 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d903      	bls.n	8007bfe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220d      	movs	r2, #13
 8007bfa:	701a      	strb	r2, [r3, #0]
      break;
 8007bfc:	e173      	b.n	8007ee6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	701a      	strb	r2, [r3, #0]
      break;
 8007c04:	e16f      	b.n	8007ee6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007c0c:	f103 020a 	add.w	r2, r3, #10
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007c16:	200a      	movs	r0, #10
 8007c18:	f001 fdd3 	bl	80097c2 <USBH_Delay>
      break;
 8007c1c:	e163      	b.n	8007ee6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c2e:	2104      	movs	r1, #4
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c34:	2064      	movs	r0, #100	@ 0x64
 8007c36:	f001 fdc4 	bl	80097c2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fc90 	bl	8009560 <USBH_LL_GetSpeed>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2205      	movs	r2, #5
 8007c4e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fa9b 	bl	800918e <USBH_AllocPipe>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c60:	2180      	movs	r1, #128	@ 0x80
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fa93 	bl	800918e <USBH_AllocPipe>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7919      	ldrb	r1, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c84:	9202      	str	r2, [sp, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	9201      	str	r2, [sp, #4]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2280      	movs	r2, #128	@ 0x80
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fa4d 	bl	8009130 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7959      	ldrb	r1, [r3, #5]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007caa:	9202      	str	r2, [sp, #8]
 8007cac:	2200      	movs	r2, #0
 8007cae:	9201      	str	r2, [sp, #4]
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fa3a 	bl	8009130 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cbc:	e113      	b.n	8007ee6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f916 	bl	8007ef0 <USBH_HandleEnum>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 80fd 	bne.w	8007ecc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d103      	bne.n	8007cec <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cea:	e0ef      	b.n	8007ecc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2207      	movs	r2, #7
 8007cf0:	701a      	strb	r2, [r3, #0]
      break;
 8007cf2:	e0eb      	b.n	8007ecc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80e8 	beq.w	8007ed0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d06:	2101      	movs	r1, #1
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2208      	movs	r2, #8
 8007d10:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d12:	e0dd      	b.n	8007ed0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fc3a 	bl	8008596 <USBH_SetCfg>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 80d5 	bne.w	8007ed4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2209      	movs	r2, #9
 8007d2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d30:	e0d0      	b.n	8007ed4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d016      	beq.n	8007d6e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d40:	2101      	movs	r1, #1
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc4a 	bl	80085dc <USBH_SetFeature>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d103      	bne.n	8007d5c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	220a      	movs	r2, #10
 8007d58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d5a:	e0bd      	b.n	8007ed8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007d5c:	7bbb      	ldrb	r3, [r7, #14]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	f040 80b9 	bne.w	8007ed8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	220a      	movs	r2, #10
 8007d6a:	701a      	strb	r2, [r3, #0]
      break;
 8007d6c:	e0b4      	b.n	8007ed8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	220a      	movs	r2, #10
 8007d72:	701a      	strb	r2, [r3, #0]
      break;
 8007d74:	e0b0      	b.n	8007ed8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80ad 	beq.w	8007edc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e016      	b.n	8007dbe <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32de      	adds	r2, #222	@ 0xde
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	791a      	ldrb	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d108      	bne.n	8007db8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32de      	adds	r2, #222	@ 0xde
 8007dac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007db6:	e005      	b.n	8007dc4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0e5      	beq.n	8007d90 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d016      	beq.n	8007dfc <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2206      	movs	r2, #6
 8007de4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dec:	2103      	movs	r1, #3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007df2:	e073      	b.n	8007edc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	220d      	movs	r2, #13
 8007df8:	701a      	strb	r2, [r3, #0]
      break;
 8007dfa:	e06f      	b.n	8007edc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220d      	movs	r2, #13
 8007e00:	701a      	strb	r2, [r3, #0]
      break;
 8007e02:	e06b      	b.n	8007edc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d017      	beq.n	8007e3e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220b      	movs	r2, #11
 8007e2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e2c:	e058      	b.n	8007ee0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d154      	bne.n	8007ee0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220d      	movs	r2, #13
 8007e3a:	701a      	strb	r2, [r3, #0]
      break;
 8007e3c:	e050      	b.n	8007ee0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	220d      	movs	r2, #13
 8007e42:	701a      	strb	r2, [r3, #0]
      break;
 8007e44:	e04c      	b.n	8007ee0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d049      	beq.n	8007ee4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
      }
      break;
 8007e5c:	e042      	b.n	8007ee4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fd4a 	bl	8007900 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e9a:	2105      	movs	r1, #5
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d107      	bne.n	8007ebc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fe22 	bl	8007afe <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eba:	e014      	b.n	8007ee6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fb19 	bl	80094f4 <USBH_LL_Start>
      break;
 8007ec2:	e010      	b.n	8007ee6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e00e      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ec8:	bf00      	nop
 8007eca:	e00c      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e00a      	b.n	8007ee6 <USBH_Process+0x3c6>
    break;
 8007ed0:	bf00      	nop
 8007ed2:	e008      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ed4:	bf00      	nop
 8007ed6:	e006      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ed8:	bf00      	nop
 8007eda:	e004      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007edc:	bf00      	nop
 8007ede:	e002      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <USBH_Process+0x3c6>
      break;
 8007ee4:	bf00      	nop
  }
  return USBH_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af04      	add	r7, sp, #16
 8007ef6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	f200 81bd 	bhi.w	8008284 <USBH_HandleEnum+0x394>
 8007f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <USBH_HandleEnum+0x20>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007feb 	.word	0x08007feb
 8007f18:	08008055 	.word	0x08008055
 8007f1c:	080080df 	.word	0x080080df
 8007f20:	08008149 	.word	0x08008149
 8007f24:	080081b9 	.word	0x080081b9
 8007f28:	080081ff 	.word	0x080081ff
 8007f2c:	08008245 	.word	0x08008245
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f30:	2108      	movs	r1, #8
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa4c 	bl	80083d0 <USBH_Get_DevDesc>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d12e      	bne.n	8007fa0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7919      	ldrb	r1, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f66:	9202      	str	r2, [sp, #8]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2280      	movs	r2, #128	@ 0x80
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 f8dc 	bl	8009130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	7959      	ldrb	r1, [r3, #5]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f8c:	9202      	str	r2, [sp, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	9201      	str	r2, [sp, #4]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4603      	mov	r3, r0
 8007f96:	2200      	movs	r2, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f8c9 	bl	8009130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f9e:	e173      	b.n	8008288 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	f040 8170 	bne.w	8008288 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fae:	3301      	adds	r3, #1
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d903      	bls.n	8007fca <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	220d      	movs	r2, #13
 8007fc6:	701a      	strb	r2, [r3, #0]
      break;
 8007fc8:	e15e      	b.n	8008288 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	795b      	ldrb	r3, [r3, #5]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f8fd 	bl	80091d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	791b      	ldrb	r3, [r3, #4]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f8f7 	bl	80091d0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
      break;
 8007fe8:	e14e      	b.n	8008288 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007fea:	2112      	movs	r1, #18
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9ef 	bl	80083d0 <USBH_Get_DevDesc>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008002:	e143      	b.n	800828c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b03      	cmp	r3, #3
 8008008:	f040 8140 	bne.w	800828c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008012:	3301      	adds	r3, #1
 8008014:	b2da      	uxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008022:	2b03      	cmp	r3, #3
 8008024:	d903      	bls.n	800802e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	220d      	movs	r2, #13
 800802a:	701a      	strb	r2, [r3, #0]
      break;
 800802c:	e12e      	b.n	800828c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	795b      	ldrb	r3, [r3, #5]
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f8cb 	bl	80091d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	791b      	ldrb	r3, [r3, #4]
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f8c5 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
      break;
 8008052:	e11b      	b.n	800828c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008054:	2101      	movs	r1, #1
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa79 	bl	800854e <USBH_SetAddress>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d130      	bne.n	80080c8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008066:	2002      	movs	r0, #2
 8008068:	f001 fbab 	bl	80097c2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2203      	movs	r2, #3
 8008078:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7919      	ldrb	r1, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800808e:	9202      	str	r2, [sp, #8]
 8008090:	2200      	movs	r2, #0
 8008092:	9201      	str	r2, [sp, #4]
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4603      	mov	r3, r0
 8008098:	2280      	movs	r2, #128	@ 0x80
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 f848 	bl	8009130 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7959      	ldrb	r1, [r3, #5]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080b4:	9202      	str	r2, [sp, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	9201      	str	r2, [sp, #4]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	4603      	mov	r3, r0
 80080be:	2200      	movs	r2, #0
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f835 	bl	8009130 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080c6:	e0e3      	b.n	8008290 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	f040 80e0 	bne.w	8008290 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	220d      	movs	r2, #13
 80080d4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	705a      	strb	r2, [r3, #1]
      break;
 80080dc:	e0d8      	b.n	8008290 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80080de:	2109      	movs	r1, #9
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f9a1 	bl	8008428 <USBH_Get_CfgDesc>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2204      	movs	r2, #4
 80080f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080f6:	e0cd      	b.n	8008294 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	f040 80ca 	bne.w	8008294 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008106:	3301      	adds	r3, #1
 8008108:	b2da      	uxtb	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008116:	2b03      	cmp	r3, #3
 8008118:	d903      	bls.n	8008122 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	220d      	movs	r2, #13
 800811e:	701a      	strb	r2, [r3, #0]
      break;
 8008120:	e0b8      	b.n	8008294 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 f851 	bl	80091d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f84b 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
      break;
 8008146:	e0a5      	b.n	8008294 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f969 	bl	8008428 <USBH_Get_CfgDesc>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d103      	bne.n	8008168 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2205      	movs	r2, #5
 8008164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008166:	e097      	b.n	8008298 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	2b03      	cmp	r3, #3
 800816c:	f040 8094 	bne.w	8008298 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008176:	3301      	adds	r3, #1
 8008178:	b2da      	uxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008186:	2b03      	cmp	r3, #3
 8008188:	d903      	bls.n	8008192 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	220d      	movs	r2, #13
 800818e:	701a      	strb	r2, [r3, #0]
      break;
 8008190:	e082      	b.n	8008298 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f819 	bl	80091d0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	791b      	ldrb	r3, [r3, #4]
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f813 	bl	80091d0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
      break;
 80081b6:	e06f      	b.n	8008298 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d019      	beq.n	80081f6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081ce:	23ff      	movs	r3, #255	@ 0xff
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f953 	bl	800847c <USBH_Get_StringDesc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d103      	bne.n	80081e8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2206      	movs	r2, #6
 80081e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081e6:	e059      	b.n	800829c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d156      	bne.n	800829c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2206      	movs	r2, #6
 80081f2:	705a      	strb	r2, [r3, #1]
      break;
 80081f4:	e052      	b.n	800829c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2206      	movs	r2, #6
 80081fa:	705a      	strb	r2, [r3, #1]
      break;
 80081fc:	e04e      	b.n	800829c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008204:	2b00      	cmp	r3, #0
 8008206:	d019      	beq.n	800823c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008214:	23ff      	movs	r3, #255	@ 0xff
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f930 	bl	800847c <USBH_Get_StringDesc>
 800821c:	4603      	mov	r3, r0
 800821e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2207      	movs	r2, #7
 800822a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800822c:	e038      	b.n	80082a0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b03      	cmp	r3, #3
 8008232:	d135      	bne.n	80082a0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2207      	movs	r2, #7
 8008238:	705a      	strb	r2, [r3, #1]
      break;
 800823a:	e031      	b.n	80082a0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2207      	movs	r2, #7
 8008240:	705a      	strb	r2, [r3, #1]
      break;
 8008242:	e02d      	b.n	80082a0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800824a:	2b00      	cmp	r3, #0
 800824c:	d017      	beq.n	800827e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800825a:	23ff      	movs	r3, #255	@ 0xff
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f90d 	bl	800847c <USBH_Get_StringDesc>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008266:	7bbb      	ldrb	r3, [r7, #14]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008270:	e018      	b.n	80082a4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d115      	bne.n	80082a4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
      break;
 800827c:	e012      	b.n	80082a4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
      break;
 8008282:	e00f      	b.n	80082a4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008284:	bf00      	nop
 8008286:	e00e      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 8008288:	bf00      	nop
 800828a:	e00c      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 800828c:	bf00      	nop
 800828e:	e00a      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 8008290:	bf00      	nop
 8008292:	e008      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 8008294:	bf00      	nop
 8008296:	e006      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 8008298:	bf00      	nop
 800829a:	e004      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <USBH_HandleEnum+0x3b6>
      break;
 80082a4:	bf00      	nop
  }
  return Status;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f804 	bl	80082f2 <USBH_HandleSof>
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b0b      	cmp	r3, #11
 8008302:	d10a      	bne.n	800831a <USBH_HandleSof+0x28>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
  }
}
 800831a:	bf00      	nop
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008332:	bf00      	nop
}
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800834e:	bf00      	nop
}
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800835a:	b480      	push	{r7}
 800835c:	b083      	sub	sp, #12
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 f8be 	bl	800952a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	791b      	ldrb	r3, [r3, #4]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 ff0b 	bl	80091d0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	795b      	ldrb	r3, [r3, #5]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 ff05 	bl	80091d0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af02      	add	r7, sp, #8
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80083dc:	887b      	ldrh	r3, [r7, #2]
 80083de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e2:	d901      	bls.n	80083e8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e01b      	b.n	8008420 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80083ee:	887b      	ldrh	r3, [r7, #2]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4613      	mov	r3, r2
 80083f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f872 	bl	80084e4 <USBH_GetDescriptor>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008410:	887a      	ldrh	r2, [r7, #2]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f929 	bl	800866c <USBH_ParseDevDesc>
 800841a:	4603      	mov	r3, r0
 800841c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	331c      	adds	r3, #28
 8008438:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008440:	d901      	bls.n	8008446 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008442:	2303      	movs	r3, #3
 8008444:	e016      	b.n	8008474 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008446:	887b      	ldrh	r3, [r7, #2]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008450:	2100      	movs	r1, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f846 	bl	80084e4 <USBH_GetDescriptor>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d107      	bne.n	8008472 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	461a      	mov	r2, r3
 8008466:	68b9      	ldr	r1, [r7, #8]
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f9af 	bl	80087cc <USBH_ParseCfgDesc>
 800846e:	4603      	mov	r3, r0
 8008470:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	461a      	mov	r2, r3
 8008488:	460b      	mov	r3, r1
 800848a:	72fb      	strb	r3, [r7, #11]
 800848c:	4613      	mov	r3, r2
 800848e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008490:	893b      	ldrh	r3, [r7, #8]
 8008492:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008496:	d802      	bhi.n	800849e <USBH_Get_StringDesc+0x22>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800849e:	2303      	movs	r3, #3
 80084a0:	e01c      	b.n	80084dc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80084aa:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f812 	bl	80084e4 <USBH_GetDescriptor>
 80084c0:	4603      	mov	r3, r0
 80084c2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d107      	bne.n	80084da <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084d0:	893a      	ldrh	r2, [r7, #8]
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fb8d 	bl	8008bf4 <USBH_ParseStringDesc>
  }

  return status;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	607b      	str	r3, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	72fb      	strb	r3, [r7, #11]
 80084f2:	4613      	mov	r3, r2
 80084f4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	789b      	ldrb	r3, [r3, #2]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d11c      	bne.n	8008538 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80084fe:	7afb      	ldrb	r3, [r7, #11]
 8008500:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008504:	b2da      	uxtb	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2206      	movs	r2, #6
 800850e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	893a      	ldrh	r2, [r7, #8]
 8008514:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008516:	893b      	ldrh	r3, [r7, #8]
 8008518:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800851c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008520:	d104      	bne.n	800852c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f240 4209 	movw	r2, #1033	@ 0x409
 8008528:	829a      	strh	r2, [r3, #20]
 800852a:	e002      	b.n	8008532 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	8b3a      	ldrh	r2, [r7, #24]
 8008536:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008538:	8b3b      	ldrh	r3, [r7, #24]
 800853a:	461a      	mov	r2, r3
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fba5 	bl	8008c8e <USBH_CtlReq>
 8008544:	4603      	mov	r3, r0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	789b      	ldrb	r3, [r3, #2]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d10f      	bne.n	8008582 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2205      	movs	r2, #5
 800856c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	b29a      	uxth	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008582:	2200      	movs	r2, #0
 8008584:	2100      	movs	r1, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fb81 	bl	8008c8e <USBH_CtlReq>
 800858c:	4603      	mov	r3, r0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	460b      	mov	r3, r1
 80085a0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	789b      	ldrb	r3, [r3, #2]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d10e      	bne.n	80085c8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2209      	movs	r2, #9
 80085b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	887a      	ldrh	r2, [r7, #2]
 80085ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fb5e 	bl	8008c8e <USBH_CtlReq>
 80085d2:	4603      	mov	r3, r0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	789b      	ldrb	r3, [r3, #2]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d10f      	bne.n	8008610 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008610:	2200      	movs	r2, #0
 8008612:	2100      	movs	r1, #0
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fb3a 	bl	8008c8e <USBH_CtlReq>
 800861a:	4603      	mov	r3, r0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	789b      	ldrb	r3, [r3, #2]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d10f      	bne.n	8008658 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2202      	movs	r2, #2
 800863c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	b29a      	uxth	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008658:	2200      	movs	r2, #0
 800865a:	2100      	movs	r1, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fb16 	bl	8008c8e <USBH_CtlReq>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008680:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800868c:	2302      	movs	r3, #2
 800868e:	e094      	b.n	80087ba <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	785a      	ldrb	r2, [r3, #1]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	3302      	adds	r3, #2
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	3303      	adds	r3, #3
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	021b      	lsls	r3, r3, #8
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	4313      	orrs	r3, r2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	791a      	ldrb	r2, [r3, #4]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	795a      	ldrb	r2, [r3, #5]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	799a      	ldrb	r2, [r3, #6]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	79da      	ldrb	r2, [r3, #7]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d004      	beq.n	80086ee <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d11b      	bne.n	8008726 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	79db      	ldrb	r3, [r3, #7]
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	dc0f      	bgt.n	8008716 <USBH_ParseDevDesc+0xaa>
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	db0f      	blt.n	800871a <USBH_ParseDevDesc+0xae>
 80086fa:	3b08      	subs	r3, #8
 80086fc:	4a32      	ldr	r2, [pc, #200]	@ (80087c8 <USBH_ParseDevDesc+0x15c>)
 80086fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	bf14      	ite	ne
 800870a:	2301      	movne	r3, #1
 800870c:	2300      	moveq	r3, #0
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <USBH_ParseDevDesc+0xb6>
 8008714:	e001      	b.n	800871a <USBH_ParseDevDesc+0xae>
 8008716:	2b40      	cmp	r3, #64	@ 0x40
 8008718:	d003      	beq.n	8008722 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2208      	movs	r2, #8
 800871e:	71da      	strb	r2, [r3, #7]
        break;
 8008720:	e000      	b.n	8008724 <USBH_ParseDevDesc+0xb8>
        break;
 8008722:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008724:	e00e      	b.n	8008744 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800872c:	2b02      	cmp	r3, #2
 800872e:	d107      	bne.n	8008740 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	79db      	ldrb	r3, [r3, #7]
 8008734:	2b08      	cmp	r3, #8
 8008736:	d005      	beq.n	8008744 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	2208      	movs	r2, #8
 800873c:	71da      	strb	r2, [r3, #7]
 800873e:	e001      	b.n	8008744 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008740:	2303      	movs	r3, #3
 8008742:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008744:	88fb      	ldrh	r3, [r7, #6]
 8008746:	2b08      	cmp	r3, #8
 8008748:	d936      	bls.n	80087b8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3308      	adds	r3, #8
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	3309      	adds	r3, #9
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b29b      	uxth	r3, r3
 800875c:	4313      	orrs	r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	330a      	adds	r3, #10
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	330b      	adds	r3, #11
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	021b      	lsls	r3, r3, #8
 8008774:	b29b      	uxth	r3, r3
 8008776:	4313      	orrs	r3, r2
 8008778:	b29a      	uxth	r2, r3
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	330c      	adds	r3, #12
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	330d      	adds	r3, #13
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	b29b      	uxth	r3, r3
 8008790:	4313      	orrs	r3, r2
 8008792:	b29a      	uxth	r2, r3
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	7b9a      	ldrb	r2, [r3, #14]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7bda      	ldrb	r2, [r3, #15]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	7c1a      	ldrb	r2, [r3, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	7c5a      	ldrb	r2, [r3, #17]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	01000101 	.word	0x01000101

080087cc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	@ 0x30
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087e0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80087fa:	2302      	movs	r3, #2
 80087fc:	e0da      	b.n	80089b4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b09      	cmp	r3, #9
 8008808:	d002      	beq.n	8008810 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	2209      	movs	r2, #9
 800880e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	785a      	ldrb	r2, [r3, #1]
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	3302      	adds	r3, #2
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	3303      	adds	r3, #3
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	b29b      	uxth	r3, r3
 8008832:	4313      	orrs	r3, r2
 8008834:	b29b      	uxth	r3, r3
 8008836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800883a:	bf28      	it	cs
 800883c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008840:	b29a      	uxth	r2, r3
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	791a      	ldrb	r2, [r3, #4]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	795a      	ldrb	r2, [r3, #5]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	799a      	ldrb	r2, [r3, #6]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	79da      	ldrb	r2, [r3, #7]
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	7a1a      	ldrb	r2, [r3, #8]
 800886a:	6a3b      	ldr	r3, [r7, #32]
 800886c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	2b09      	cmp	r3, #9
 8008872:	f240 809d 	bls.w	80089b0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008876:	2309      	movs	r3, #9
 8008878:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800887a:	2300      	movs	r3, #0
 800887c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800887e:	e081      	b.n	8008984 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008880:	f107 0316 	add.w	r3, r7, #22
 8008884:	4619      	mov	r1, r3
 8008886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008888:	f000 f9e7 	bl	8008c5a <USBH_GetNextDesc>
 800888c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	785b      	ldrb	r3, [r3, #1]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d176      	bne.n	8008984 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b09      	cmp	r3, #9
 800889c:	d002      	beq.n	80088a4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	2209      	movs	r2, #9
 80088a2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a8:	221a      	movs	r2, #26
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	3308      	adds	r3, #8
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	4413      	add	r3, r2
 80088b4:	3302      	adds	r3, #2
 80088b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80088b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ba:	69f8      	ldr	r0, [r7, #28]
 80088bc:	f000 f87e 	bl	80089bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088ca:	e043      	b.n	8008954 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088cc:	f107 0316 	add.w	r3, r7, #22
 80088d0:	4619      	mov	r1, r3
 80088d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088d4:	f000 f9c1 	bl	8008c5a <USBH_GetNextDesc>
 80088d8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088dc:	785b      	ldrb	r3, [r3, #1]
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d138      	bne.n	8008954 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	795b      	ldrb	r3, [r3, #5]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d113      	bne.n	8008912 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d003      	beq.n	80088fa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	799b      	ldrb	r3, [r3, #6]
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d10b      	bne.n	8008912 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	79db      	ldrb	r3, [r3, #7]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <USBH_ParseCfgDesc+0x14e>
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b09      	cmp	r3, #9
 8008908:	d007      	beq.n	800891a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	2209      	movs	r2, #9
 800890e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008910:	e003      	b.n	800891a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	2207      	movs	r2, #7
 8008916:	701a      	strb	r2, [r3, #0]
 8008918:	e000      	b.n	800891c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800891a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800891c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008920:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008924:	3201      	adds	r2, #1
 8008926:	00d2      	lsls	r2, r2, #3
 8008928:	211a      	movs	r1, #26
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	3308      	adds	r3, #8
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	4413      	add	r3, r2
 8008936:	3304      	adds	r3, #4
 8008938:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800893a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800893c:	69b9      	ldr	r1, [r7, #24]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f870 	bl	8008a24 <USBH_ParseEPDesc>
 8008944:	4603      	mov	r3, r0
 8008946:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800894a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800894e:	3301      	adds	r3, #1
 8008950:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	791b      	ldrb	r3, [r3, #4]
 8008958:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800895c:	429a      	cmp	r2, r3
 800895e:	d204      	bcs.n	800896a <USBH_ParseCfgDesc+0x19e>
 8008960:	6a3b      	ldr	r3, [r7, #32]
 8008962:	885a      	ldrh	r2, [r3, #2]
 8008964:	8afb      	ldrh	r3, [r7, #22]
 8008966:	429a      	cmp	r2, r3
 8008968:	d8b0      	bhi.n	80088cc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	791b      	ldrb	r3, [r3, #4]
 800896e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008972:	429a      	cmp	r2, r3
 8008974:	d201      	bcs.n	800897a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008976:	2303      	movs	r3, #3
 8008978:	e01c      	b.n	80089b4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800897a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800897e:	3301      	adds	r3, #1
 8008980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008988:	2b01      	cmp	r3, #1
 800898a:	d805      	bhi.n	8008998 <USBH_ParseCfgDesc+0x1cc>
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	885a      	ldrh	r2, [r3, #2]
 8008990:	8afb      	ldrh	r3, [r7, #22]
 8008992:	429a      	cmp	r2, r3
 8008994:	f63f af74 	bhi.w	8008880 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	2b02      	cmp	r3, #2
 800899e:	bf28      	it	cs
 80089a0:	2302      	movcs	r3, #2
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d201      	bcs.n	80089b0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e001      	b.n	80089b4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80089b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3730      	adds	r7, #48	@ 0x30
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	785a      	ldrb	r2, [r3, #1]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	789a      	ldrb	r2, [r3, #2]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	78da      	ldrb	r2, [r3, #3]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	3304      	adds	r3, #4
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	bf28      	it	cs
 80089f0:	2302      	movcs	r3, #2
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	795a      	ldrb	r2, [r3, #5]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	799a      	ldrb	r2, [r3, #6]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	79da      	ldrb	r2, [r3, #7]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	7a1a      	ldrb	r2, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	721a      	strb	r2, [r3, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	785a      	ldrb	r2, [r3, #1]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	789a      	ldrb	r2, [r3, #2]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	78da      	ldrb	r2, [r3, #3]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	3304      	adds	r3, #4
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3305      	adds	r3, #5
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	4313      	orrs	r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	799a      	ldrb	r2, [r3, #6]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	889b      	ldrh	r3, [r3, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a86:	d804      	bhi.n	8008a92 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a90:	d901      	bls.n	8008a96 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008a92:	2303      	movs	r3, #3
 8008a94:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d136      	bne.n	8008b0e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	78db      	ldrb	r3, [r3, #3]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d108      	bne.n	8008abe <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	889b      	ldrh	r3, [r3, #4]
 8008ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab4:	f240 8097 	bls.w	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	75fb      	strb	r3, [r7, #23]
 8008abc:	e093      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	78db      	ldrb	r3, [r3, #3]
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d107      	bne.n	8008ada <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	f240 8089 	bls.w	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	75fb      	strb	r3, [r7, #23]
 8008ad8:	e085      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	78db      	ldrb	r3, [r3, #3]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d005      	beq.n	8008af2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	78db      	ldrb	r3, [r3, #3]
 8008aea:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d10a      	bne.n	8008b08 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	799b      	ldrb	r3, [r3, #6]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <USBH_ParseEPDesc+0xde>
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	799b      	ldrb	r3, [r3, #6]
 8008afe:	2b10      	cmp	r3, #16
 8008b00:	d970      	bls.n	8008be4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008b02:	2303      	movs	r3, #3
 8008b04:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b06:	e06d      	b.n	8008be4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	75fb      	strb	r3, [r7, #23]
 8008b0c:	e06b      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d13c      	bne.n	8008b92 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	78db      	ldrb	r3, [r3, #3]
 8008b1c:	f003 0303 	and.w	r3, r3, #3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d005      	beq.n	8008b30 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	78db      	ldrb	r3, [r3, #3]
 8008b28:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d106      	bne.n	8008b3e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	889b      	ldrh	r3, [r3, #4]
 8008b34:	2b40      	cmp	r3, #64	@ 0x40
 8008b36:	d956      	bls.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b3c:	e053      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	78db      	ldrb	r3, [r3, #3]
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d10e      	bne.n	8008b68 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	799b      	ldrb	r3, [r3, #6]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d803      	bhi.n	8008b62 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d941      	bls.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b62:	2303      	movs	r3, #3
 8008b64:	75fb      	strb	r3, [r7, #23]
 8008b66:	e03e      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	78db      	ldrb	r3, [r3, #3]
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d10b      	bne.n	8008b8c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	799b      	ldrb	r3, [r3, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <USBH_ParseEPDesc+0x162>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	889b      	ldrh	r3, [r3, #4]
 8008b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b84:	d32f      	bcc.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b86:	2303      	movs	r3, #3
 8008b88:	75fb      	strb	r3, [r7, #23]
 8008b8a:	e02c      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	75fb      	strb	r3, [r7, #23]
 8008b90:	e029      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d120      	bne.n	8008bde <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	78db      	ldrb	r3, [r3, #3]
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	889b      	ldrh	r3, [r3, #4]
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d01a      	beq.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	75fb      	strb	r3, [r7, #23]
 8008bb4:	e017      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	78db      	ldrb	r3, [r3, #3]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d10a      	bne.n	8008bd8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	799b      	ldrb	r3, [r3, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <USBH_ParseEPDesc+0x1ae>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	889b      	ldrh	r3, [r3, #4]
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d909      	bls.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	75fb      	strb	r3, [r7, #23]
 8008bd6:	e006      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	75fb      	strb	r3, [r7, #23]
 8008bdc:	e003      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008bde:	2303      	movs	r3, #3
 8008be0:	75fb      	strb	r3, [r7, #23]
 8008be2:	e000      	b.n	8008be6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008be4:	bf00      	nop
  }

  return status;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3301      	adds	r3, #1
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d120      	bne.n	8008c4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	1e9a      	subs	r2, r3, #2
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	4293      	cmp	r3, r2
 8008c16:	bf28      	it	cs
 8008c18:	4613      	movcs	r3, r2
 8008c1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3302      	adds	r3, #2
 8008c20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c22:	2300      	movs	r3, #0
 8008c24:	82fb      	strh	r3, [r7, #22]
 8008c26:	e00b      	b.n	8008c40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c28:	8afb      	ldrh	r3, [r7, #22]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c3a:	8afb      	ldrh	r3, [r7, #22]
 8008c3c:	3302      	adds	r3, #2
 8008c3e:	82fb      	strh	r3, [r7, #22]
 8008c40:	8afa      	ldrh	r2, [r7, #22]
 8008c42:	8abb      	ldrh	r3, [r7, #20]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3ef      	bcc.n	8008c28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c4e:	bf00      	nop
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	7812      	ldrb	r2, [r2, #0]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c80:	68fb      	ldr	r3, [r7, #12]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	60b9      	str	r1, [r7, #8]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	789b      	ldrb	r3, [r3, #2]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d002      	beq.n	8008cae <USBH_CtlReq+0x20>
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d00f      	beq.n	8008ccc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008cac:	e027      	b.n	8008cfe <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	88fa      	ldrh	r2, [r7, #6]
 8008cb8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2202      	movs	r2, #2
 8008cc4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cca:	e018      	b.n	8008cfe <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 f81b 	bl	8008d08 <USBH_HandleControl>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <USBH_CtlReq+0x54>
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d106      	bne.n	8008cf0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	761a      	strb	r2, [r3, #24]
      break;
 8008cee:	e005      	b.n	8008cfc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008cf0:	7dfb      	ldrb	r3, [r7, #23]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d102      	bne.n	8008cfc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	709a      	strb	r2, [r3, #2]
      break;
 8008cfc:	bf00      	nop
  }
  return status;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af02      	add	r7, sp, #8
 8008d0e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d10:	2301      	movs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7e1b      	ldrb	r3, [r3, #24]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	2b0a      	cmp	r3, #10
 8008d20:	f200 8156 	bhi.w	8008fd0 <USBH_HandleControl+0x2c8>
 8008d24:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <USBH_HandleControl+0x24>)
 8008d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2a:	bf00      	nop
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	08008d73 	.word	0x08008d73
 8008d34:	08008ddd 	.word	0x08008ddd
 8008d38:	08008e03 	.word	0x08008e03
 8008d3c:	08008e3b 	.word	0x08008e3b
 8008d40:	08008e65 	.word	0x08008e65
 8008d44:	08008eb7 	.word	0x08008eb7
 8008d48:	08008ed9 	.word	0x08008ed9
 8008d4c:	08008f15 	.word	0x08008f15
 8008d50:	08008f3b 	.word	0x08008f3b
 8008d54:	08008f79 	.word	0x08008f79
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f103 0110 	add.w	r1, r3, #16
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	795b      	ldrb	r3, [r3, #5]
 8008d62:	461a      	mov	r2, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f943 	bl	8008ff0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	761a      	strb	r2, [r3, #24]
      break;
 8008d70:	e139      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fcc5 	bl	8009708 <USBH_LL_GetURBState>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d11e      	bne.n	8008dc6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7c1b      	ldrb	r3, [r3, #16]
 8008d8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d90:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	8adb      	ldrh	r3, [r3, #22]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d9a:	7b7b      	ldrb	r3, [r7, #13]
 8008d9c:	2b80      	cmp	r3, #128	@ 0x80
 8008d9e:	d103      	bne.n	8008da8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2203      	movs	r2, #3
 8008da4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008da6:	e115      	b.n	8008fd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2205      	movs	r2, #5
 8008dac:	761a      	strb	r2, [r3, #24]
      break;
 8008dae:	e111      	b.n	8008fd4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008db0:	7b7b      	ldrb	r3, [r7, #13]
 8008db2:	2b80      	cmp	r3, #128	@ 0x80
 8008db4:	d103      	bne.n	8008dbe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2209      	movs	r2, #9
 8008dba:	761a      	strb	r2, [r3, #24]
      break;
 8008dbc:	e10a      	b.n	8008fd4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2207      	movs	r2, #7
 8008dc2:	761a      	strb	r2, [r3, #24]
      break;
 8008dc4:	e106      	b.n	8008fd4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d003      	beq.n	8008dd4 <USBH_HandleControl+0xcc>
 8008dcc:	7bbb      	ldrb	r3, [r7, #14]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	f040 8100 	bne.w	8008fd4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	220b      	movs	r2, #11
 8008dd8:	761a      	strb	r2, [r3, #24]
      break;
 8008dda:	e0fb      	b.n	8008fd4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6899      	ldr	r1, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	899a      	ldrh	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	791b      	ldrb	r3, [r3, #4]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f93a 	bl	800906e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	761a      	strb	r2, [r3, #24]
      break;
 8008e00:	e0f1      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	791b      	ldrb	r3, [r3, #4]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 fc7d 	bl	8009708 <USBH_LL_GetURBState>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d102      	bne.n	8008e1e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2209      	movs	r2, #9
 8008e1c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b05      	cmp	r3, #5
 8008e22:	d102      	bne.n	8008e2a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e24:	2303      	movs	r3, #3
 8008e26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e28:	e0d6      	b.n	8008fd8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	f040 80d3 	bne.w	8008fd8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	220b      	movs	r2, #11
 8008e36:	761a      	strb	r2, [r3, #24]
      break;
 8008e38:	e0ce      	b.n	8008fd8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6899      	ldr	r1, [r3, #8]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	899a      	ldrh	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	795b      	ldrb	r3, [r3, #5]
 8008e46:	2001      	movs	r0, #1
 8008e48:	9000      	str	r0, [sp, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f8ea 	bl	8009024 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2206      	movs	r2, #6
 8008e60:	761a      	strb	r2, [r3, #24]
      break;
 8008e62:	e0c0      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	795b      	ldrb	r3, [r3, #5]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fc4c 	bl	8009708 <USBH_LL_GetURBState>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d103      	bne.n	8008e82 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2207      	movs	r2, #7
 8008e7e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e80:	e0ac      	b.n	8008fdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	d105      	bne.n	8008e94 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	220c      	movs	r2, #12
 8008e8c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	73fb      	strb	r3, [r7, #15]
      break;
 8008e92:	e0a3      	b.n	8008fdc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d103      	bne.n	8008ea2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2205      	movs	r2, #5
 8008e9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ea0:	e09c      	b.n	8008fdc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	f040 8099 	bne.w	8008fdc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	220b      	movs	r2, #11
 8008eae:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008eb4:	e092      	b.n	8008fdc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	791b      	ldrb	r3, [r3, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f8d5 	bl	800906e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2208      	movs	r2, #8
 8008ed4:	761a      	strb	r2, [r3, #24]

      break;
 8008ed6:	e086      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	791b      	ldrb	r3, [r3, #4]
 8008edc:	4619      	mov	r1, r3
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fc12 	bl	8009708 <USBH_LL_GetURBState>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220d      	movs	r2, #13
 8008ef2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ef8:	e072      	b.n	8008fe0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d103      	bne.n	8008f08 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220b      	movs	r2, #11
 8008f04:	761a      	strb	r2, [r3, #24]
      break;
 8008f06:	e06b      	b.n	8008fe0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d168      	bne.n	8008fe0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
      break;
 8008f12:	e065      	b.n	8008fe0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	795b      	ldrb	r3, [r3, #5]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	9200      	str	r2, [sp, #0]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f87f 	bl	8009024 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	220a      	movs	r2, #10
 8008f36:	761a      	strb	r2, [r3, #24]
      break;
 8008f38:	e055      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	795b      	ldrb	r3, [r3, #5]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fbe1 	bl	8009708 <USBH_LL_GetURBState>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d105      	bne.n	8008f5c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220d      	movs	r2, #13
 8008f58:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f5a:	e043      	b.n	8008fe4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d103      	bne.n	8008f6a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2209      	movs	r2, #9
 8008f66:	761a      	strb	r2, [r3, #24]
      break;
 8008f68:	e03c      	b.n	8008fe4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d139      	bne.n	8008fe4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	220b      	movs	r2, #11
 8008f74:	761a      	strb	r2, [r3, #24]
      break;
 8008f76:	e035      	b.n	8008fe4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7e5b      	ldrb	r3, [r3, #25]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	765a      	strb	r2, [r3, #25]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7e5b      	ldrb	r3, [r3, #25]
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d806      	bhi.n	8008f9a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f98:	e025      	b.n	8008fe6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fa0:	2106      	movs	r1, #6
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	795b      	ldrb	r3, [r3, #5]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f90c 	bl	80091d0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f906 	bl	80091d0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fce:	e00a      	b.n	8008fe6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e008      	b.n	8008fe6 <USBH_HandleControl+0x2de>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e006      	b.n	8008fe6 <USBH_HandleControl+0x2de>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e004      	b.n	8008fe6 <USBH_HandleControl+0x2de>
      break;
 8008fdc:	bf00      	nop
 8008fde:	e002      	b.n	8008fe6 <USBH_HandleControl+0x2de>
      break;
 8008fe0:	bf00      	nop
 8008fe2:	e000      	b.n	8008fe6 <USBH_HandleControl+0x2de>
      break;
 8008fe4:	bf00      	nop
  }

  return status;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af04      	add	r7, sp, #16
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ffe:	79f9      	ldrb	r1, [r7, #7]
 8009000:	2300      	movs	r3, #0
 8009002:	9303      	str	r3, [sp, #12]
 8009004:	2308      	movs	r3, #8
 8009006:	9302      	str	r3, [sp, #8]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	2300      	movs	r3, #0
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fb46 	bl	80096a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af04      	add	r7, sp, #16
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	4611      	mov	r1, r2
 8009030:	461a      	mov	r2, r3
 8009032:	460b      	mov	r3, r1
 8009034:	80fb      	strh	r3, [r7, #6]
 8009036:	4613      	mov	r3, r2
 8009038:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009048:	7979      	ldrb	r1, [r7, #5]
 800904a:	7e3b      	ldrb	r3, [r7, #24]
 800904c:	9303      	str	r3, [sp, #12]
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	9302      	str	r3, [sp, #8]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	2301      	movs	r3, #1
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	2200      	movs	r2, #0
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fb21 	bl	80096a6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b088      	sub	sp, #32
 8009072:	af04      	add	r7, sp, #16
 8009074:	60f8      	str	r0, [r7, #12]
 8009076:	60b9      	str	r1, [r7, #8]
 8009078:	4611      	mov	r1, r2
 800907a:	461a      	mov	r2, r3
 800907c:	460b      	mov	r3, r1
 800907e:	80fb      	strh	r3, [r7, #6]
 8009080:	4613      	mov	r3, r2
 8009082:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009084:	7979      	ldrb	r1, [r7, #5]
 8009086:	2300      	movs	r3, #0
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	2301      	movs	r3, #1
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	2300      	movs	r3, #0
 8009098:	2201      	movs	r2, #1
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fb03 	bl	80096a6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80090a0:	2300      	movs	r3, #0

}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b088      	sub	sp, #32
 80090ae:	af04      	add	r7, sp, #16
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	460b      	mov	r3, r1
 80090ba:	80fb      	strh	r3, [r7, #6]
 80090bc:	4613      	mov	r3, r2
 80090be:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090ce:	7979      	ldrb	r1, [r7, #5]
 80090d0:	7e3b      	ldrb	r3, [r7, #24]
 80090d2:	9303      	str	r3, [sp, #12]
 80090d4:	88fb      	ldrh	r3, [r7, #6]
 80090d6:	9302      	str	r3, [sp, #8]
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	2301      	movs	r3, #1
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	2302      	movs	r3, #2
 80090e2:	2200      	movs	r2, #0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fade 	bl	80096a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af04      	add	r7, sp, #16
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	4611      	mov	r1, r2
 8009100:	461a      	mov	r2, r3
 8009102:	460b      	mov	r3, r1
 8009104:	80fb      	strh	r3, [r7, #6]
 8009106:	4613      	mov	r3, r2
 8009108:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800910a:	7979      	ldrb	r1, [r7, #5]
 800910c:	2300      	movs	r3, #0
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2301      	movs	r3, #1
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	2302      	movs	r3, #2
 800911e:	2201      	movs	r2, #1
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f000 fac0 	bl	80096a6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af04      	add	r7, sp, #16
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	4608      	mov	r0, r1
 800913a:	4611      	mov	r1, r2
 800913c:	461a      	mov	r2, r3
 800913e:	4603      	mov	r3, r0
 8009140:	70fb      	strb	r3, [r7, #3]
 8009142:	460b      	mov	r3, r1
 8009144:	70bb      	strb	r3, [r7, #2]
 8009146:	4613      	mov	r3, r2
 8009148:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800914a:	7878      	ldrb	r0, [r7, #1]
 800914c:	78ba      	ldrb	r2, [r7, #2]
 800914e:	78f9      	ldrb	r1, [r7, #3]
 8009150:	8b3b      	ldrh	r3, [r7, #24]
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	7d3b      	ldrb	r3, [r7, #20]
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	7c3b      	ldrb	r3, [r7, #16]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	4603      	mov	r3, r0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa53 	bl	800960a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fa72 	bl	8009668 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f836 	bl	800920c <USBH_GetFreePipe>
 80091a0:	4603      	mov	r3, r0
 80091a2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00a      	beq.n	80091c4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80091ae:	78fa      	ldrb	r2, [r7, #3]
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	33e0      	adds	r3, #224	@ 0xe0
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	440b      	add	r3, r1
 80091c2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	b2db      	uxtb	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b0f      	cmp	r3, #15
 80091e0:	d80d      	bhi.n	80091fe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	33e0      	adds	r3, #224	@ 0xe0
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	33e0      	adds	r3, #224	@ 0xe0
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e00f      	b.n	800923e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	33e0      	adds	r3, #224	@ 0xe0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	b29b      	uxth	r3, r3
 8009236:	e007      	b.n	8009248 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	3301      	adds	r3, #1
 800923c:	73fb      	strb	r3, [r7, #15]
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	2b0f      	cmp	r3, #15
 8009242:	d9ec      	bls.n	800921e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009244:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009258:	2201      	movs	r2, #1
 800925a:	490e      	ldr	r1, [pc, #56]	@ (8009294 <MX_USB_HOST_Init+0x40>)
 800925c:	480e      	ldr	r0, [pc, #56]	@ (8009298 <MX_USB_HOST_Init+0x44>)
 800925e:	f7fe fb15 	bl	800788c <USBH_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009268:	f7f7 fd02 	bl	8000c70 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800926c:	490b      	ldr	r1, [pc, #44]	@ (800929c <MX_USB_HOST_Init+0x48>)
 800926e:	480a      	ldr	r0, [pc, #40]	@ (8009298 <MX_USB_HOST_Init+0x44>)
 8009270:	f7fe fbb9 	bl	80079e6 <USBH_RegisterClass>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800927a:	f7f7 fcf9 	bl	8000c70 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800927e:	4806      	ldr	r0, [pc, #24]	@ (8009298 <MX_USB_HOST_Init+0x44>)
 8009280:	f7fe fc3d 	bl	8007afe <USBH_Start>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800928a:	f7f7 fcf1 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800928e:	bf00      	nop
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	080092b5 	.word	0x080092b5
 8009298:	200001f0 	.word	0x200001f0
 800929c:	2000000c 	.word	0x2000000c

080092a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80092a4:	4802      	ldr	r0, [pc, #8]	@ (80092b0 <MX_USB_HOST_Process+0x10>)
 80092a6:	f7fe fc3b 	bl	8007b20 <USBH_Process>
}
 80092aa:	bf00      	nop
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200001f0 	.word	0x200001f0

080092b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	3b01      	subs	r3, #1
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d819      	bhi.n	80092fc <USBH_UserProcess+0x48>
 80092c8:	a201      	add	r2, pc, #4	@ (adr r2, 80092d0 <USBH_UserProcess+0x1c>)
 80092ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ce:	bf00      	nop
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	080092ed 	.word	0x080092ed
 80092d8:	080092fd 	.word	0x080092fd
 80092dc:	080092f5 	.word	0x080092f5
 80092e0:	080092e5 	.word	0x080092e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80092e4:	4b09      	ldr	r3, [pc, #36]	@ (800930c <USBH_UserProcess+0x58>)
 80092e6:	2203      	movs	r2, #3
 80092e8:	701a      	strb	r2, [r3, #0]
  break;
 80092ea:	e008      	b.n	80092fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80092ec:	4b07      	ldr	r3, [pc, #28]	@ (800930c <USBH_UserProcess+0x58>)
 80092ee:	2202      	movs	r2, #2
 80092f0:	701a      	strb	r2, [r3, #0]
  break;
 80092f2:	e004      	b.n	80092fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80092f4:	4b05      	ldr	r3, [pc, #20]	@ (800930c <USBH_UserProcess+0x58>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	701a      	strb	r2, [r3, #0]
  break;
 80092fa:	e000      	b.n	80092fe <USBH_UserProcess+0x4a>

  default:
  break;
 80092fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	200005c8 	.word	0x200005c8

08009310 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08a      	sub	sp, #40	@ 0x28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009318:	f107 0314 	add.w	r3, r7, #20
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	605a      	str	r2, [r3, #4]
 8009322:	609a      	str	r2, [r3, #8]
 8009324:	60da      	str	r2, [r3, #12]
 8009326:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009330:	d147      	bne.n	80093c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	4b25      	ldr	r3, [pc, #148]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 8009338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933a:	4a24      	ldr	r2, [pc, #144]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 800933c:	f043 0301 	orr.w	r3, r3, #1
 8009340:	6313      	str	r3, [r2, #48]	@ 0x30
 8009342:	4b22      	ldr	r3, [pc, #136]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800934e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009358:	2300      	movs	r3, #0
 800935a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	4619      	mov	r1, r3
 8009362:	481b      	ldr	r0, [pc, #108]	@ (80093d0 <HAL_HCD_MspInit+0xc0>)
 8009364:	f7f8 f870 	bl	8001448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009368:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800936c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936e:	2302      	movs	r3, #2
 8009370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009372:	2300      	movs	r3, #0
 8009374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009376:	2300      	movs	r3, #0
 8009378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800937a:	230a      	movs	r3, #10
 800937c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	4619      	mov	r1, r3
 8009384:	4812      	ldr	r0, [pc, #72]	@ (80093d0 <HAL_HCD_MspInit+0xc0>)
 8009386:	f7f8 f85f 	bl	8001448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800938a:	4b10      	ldr	r3, [pc, #64]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 800938c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800938e:	4a0f      	ldr	r2, [pc, #60]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 8009390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009394:	6353      	str	r3, [r2, #52]	@ 0x34
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	4b0c      	ldr	r3, [pc, #48]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 800939c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800939e:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 80093a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80093a6:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <HAL_HCD_MspInit+0xbc>)
 80093a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093b2:	2200      	movs	r2, #0
 80093b4:	2100      	movs	r1, #0
 80093b6:	2043      	movs	r0, #67	@ 0x43
 80093b8:	f7f8 f80f 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093bc:	2043      	movs	r0, #67	@ 0x43
 80093be:	f7f8 f828 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093c2:	bf00      	nop
 80093c4:	3728      	adds	r7, #40	@ 0x28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	40023800 	.word	0x40023800
 80093d0:	40020000 	.word	0x40020000

080093d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe ff73 	bl	80082ce <USBH_LL_IncTimer>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe ffab 	bl	800835a <USBH_LL_Connect>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800941a:	4618      	mov	r0, r3
 800941c:	f7fe ffb4 	bl	8008388 <USBH_LL_Disconnect>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
 8009434:	4613      	mov	r3, r2
 8009436:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe ff65 	bl	8008322 <USBH_LL_PortEnabled>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe ff65 	bl	800833e <USBH_LL_PortDisabled>
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800948a:	2b01      	cmp	r3, #1
 800948c:	d12a      	bne.n	80094e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800948e:	4a18      	ldr	r2, [pc, #96]	@ (80094f0 <USBH_LL_Init+0x74>)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a15      	ldr	r2, [pc, #84]	@ (80094f0 <USBH_LL_Init+0x74>)
 800949a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800949e:	4b14      	ldr	r3, [pc, #80]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80094a6:	4b12      	ldr	r3, [pc, #72]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094a8:	2208      	movs	r2, #8
 80094aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80094ac:	4b10      	ldr	r3, [pc, #64]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094b2:	4b0f      	ldr	r3, [pc, #60]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80094b8:	4b0d      	ldr	r3, [pc, #52]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094ba:	2202      	movs	r2, #2
 80094bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094be:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80094c4:	480a      	ldr	r0, [pc, #40]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094c6:	f7f8 f974 	bl	80017b2 <HAL_HCD_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80094d0:	f7f7 fbce 	bl	8000c70 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80094d4:	4806      	ldr	r0, [pc, #24]	@ (80094f0 <USBH_LL_Init+0x74>)
 80094d6:	f7f8 fdd5 	bl	8002084 <HAL_HCD_GetCurrentFrame>
 80094da:	4603      	mov	r3, r0
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fe fee6 	bl	80082b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	200005cc 	.word	0x200005cc

080094f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800950a:	4618      	mov	r0, r3
 800950c:	f7f8 fd42 	bl	8001f94 <HAL_HCD_Start>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f95e 	bl	80097d8 <USBH_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009520:	7bbb      	ldrb	r3, [r7, #14]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009540:	4618      	mov	r0, r3
 8009542:	f7f8 fd4a 	bl	8001fda <HAL_HCD_Stop>
 8009546:	4603      	mov	r3, r0
 8009548:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f943 	bl	80097d8 <USBH_Get_USB_Status>
 8009552:	4603      	mov	r3, r0
 8009554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009556:	7bbb      	ldrb	r3, [r7, #14]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009568:	2301      	movs	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009572:	4618      	mov	r0, r3
 8009574:	f7f8 fd94 	bl	80020a0 <HAL_HCD_GetCurrentSpeed>
 8009578:	4603      	mov	r3, r0
 800957a:	2b02      	cmp	r3, #2
 800957c:	d00c      	beq.n	8009598 <USBH_LL_GetSpeed+0x38>
 800957e:	2b02      	cmp	r3, #2
 8009580:	d80d      	bhi.n	800959e <USBH_LL_GetSpeed+0x3e>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <USBH_LL_GetSpeed+0x2c>
 8009586:	2b01      	cmp	r3, #1
 8009588:	d003      	beq.n	8009592 <USBH_LL_GetSpeed+0x32>
 800958a:	e008      	b.n	800959e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
    break;
 8009590:	e008      	b.n	80095a4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009592:	2301      	movs	r3, #1
 8009594:	73fb      	strb	r3, [r7, #15]
    break;
 8009596:	e005      	b.n	80095a4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009598:	2302      	movs	r3, #2
 800959a:	73fb      	strb	r3, [r7, #15]
    break;
 800959c:	e002      	b.n	80095a4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800959e:	2301      	movs	r3, #1
 80095a0:	73fb      	strb	r3, [r7, #15]
    break;
 80095a2:	bf00      	nop
  }
  return  speed;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f8 fd25 	bl	8002014 <HAL_HCD_ResetPort>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f901 	bl	80097d8 <USBH_Get_USB_Status>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095da:	7bbb      	ldrb	r3, [r7, #14]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f8 fd2d 	bl	800205a <HAL_HCD_HC_GetXferCount>
 8009600:	4603      	mov	r3, r0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800960a:	b590      	push	{r4, r7, lr}
 800960c:	b089      	sub	sp, #36	@ 0x24
 800960e:	af04      	add	r7, sp, #16
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	4608      	mov	r0, r1
 8009614:	4611      	mov	r1, r2
 8009616:	461a      	mov	r2, r3
 8009618:	4603      	mov	r3, r0
 800961a:	70fb      	strb	r3, [r7, #3]
 800961c:	460b      	mov	r3, r1
 800961e:	70bb      	strb	r3, [r7, #2]
 8009620:	4613      	mov	r3, r2
 8009622:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009632:	787c      	ldrb	r4, [r7, #1]
 8009634:	78ba      	ldrb	r2, [r7, #2]
 8009636:	78f9      	ldrb	r1, [r7, #3]
 8009638:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800963a:	9302      	str	r3, [sp, #8]
 800963c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4623      	mov	r3, r4
 800964a:	f7f8 f919 	bl	8001880 <HAL_HCD_HC_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009652:	7bfb      	ldrb	r3, [r7, #15]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 f8bf 	bl	80097d8 <USBH_Get_USB_Status>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800965e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	bd90      	pop	{r4, r7, pc}

08009668 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009682:	78fa      	ldrb	r2, [r7, #3]
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f7f8 f9b2 	bl	80019f0 <HAL_HCD_HC_Halt>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f8a0 	bl	80097d8 <USBH_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969c:	7bbb      	ldrb	r3, [r7, #14]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80096a6:	b590      	push	{r4, r7, lr}
 80096a8:	b089      	sub	sp, #36	@ 0x24
 80096aa:	af04      	add	r7, sp, #16
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	4608      	mov	r0, r1
 80096b0:	4611      	mov	r1, r2
 80096b2:	461a      	mov	r2, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	70fb      	strb	r3, [r7, #3]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70bb      	strb	r3, [r7, #2]
 80096bc:	4613      	mov	r3, r2
 80096be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80096ce:	787c      	ldrb	r4, [r7, #1]
 80096d0:	78ba      	ldrb	r2, [r7, #2]
 80096d2:	78f9      	ldrb	r1, [r7, #3]
 80096d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096dc:	9302      	str	r3, [sp, #8]
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4623      	mov	r3, r4
 80096ea:	f7f8 f9a5 	bl	8001a38 <HAL_HCD_HC_SubmitRequest>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f86f 	bl	80097d8 <USBH_Get_USB_Status>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}

08009708 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800971a:	78fa      	ldrb	r2, [r7, #3]
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f7f8 fc86 	bl	8002030 <HAL_HCD_HC_GetURBState>
 8009724:	4603      	mov	r3, r0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009740:	2b01      	cmp	r3, #1
 8009742:	d103      	bne.n	800974c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f872 	bl	8009830 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800974c:	20c8      	movs	r0, #200	@ 0xc8
 800974e:	f7f7 fd45 	bl	80011dc <HAL_Delay>
  return USBH_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
 8009768:	4613      	mov	r3, r2
 800976a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009772:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009774:	78fa      	ldrb	r2, [r7, #3]
 8009776:	68f9      	ldr	r1, [r7, #12]
 8009778:	4613      	mov	r3, r2
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	1a9b      	subs	r3, r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	3317      	adds	r3, #23
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00a      	beq.n	80097a0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	68f9      	ldr	r1, [r7, #12]
 800978e:	4613      	mov	r3, r2
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	333c      	adds	r3, #60	@ 0x3c
 800979a:	78ba      	ldrb	r2, [r7, #2]
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e009      	b.n	80097b4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	68f9      	ldr	r1, [r7, #12]
 80097a4:	4613      	mov	r3, r2
 80097a6:	011b      	lsls	r3, r3, #4
 80097a8:	1a9b      	subs	r3, r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	440b      	add	r3, r1
 80097ae:	333d      	adds	r3, #61	@ 0x3d
 80097b0:	78ba      	ldrb	r2, [r7, #2]
 80097b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7f7 fd06 	bl	80011dc <HAL_Delay>
}
 80097d0:	bf00      	nop
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d817      	bhi.n	800981c <USBH_Get_USB_Status+0x44>
 80097ec:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <USBH_Get_USB_Status+0x1c>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009805 	.word	0x08009805
 80097f8:	0800980b 	.word	0x0800980b
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009817 	.word	0x08009817
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e00b      	b.n	8009822 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e008      	b.n	8009822 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	e005      	b.n	8009822 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009816:	2302      	movs	r3, #2
 8009818:	73fb      	strb	r3, [r7, #15]
    break;
 800981a:	e002      	b.n	8009822 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800981c:	2302      	movs	r3, #2
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	bf00      	nop
  }
  return usb_status;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e001      	b.n	800984e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800984a:	2301      	movs	r3, #1
 800984c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	461a      	mov	r2, r3
 8009852:	2101      	movs	r1, #1
 8009854:	4803      	ldr	r0, [pc, #12]	@ (8009864 <MX_DriverVbusFS+0x34>)
 8009856:	f7f7 ff93 	bl	8001780 <HAL_GPIO_WritePin>
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	40020800 	.word	0x40020800

08009868 <malloc>:
 8009868:	4b02      	ldr	r3, [pc, #8]	@ (8009874 <malloc+0xc>)
 800986a:	4601      	mov	r1, r0
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f000 b82d 	b.w	80098cc <_malloc_r>
 8009872:	bf00      	nop
 8009874:	2000002c 	.word	0x2000002c

08009878 <free>:
 8009878:	4b02      	ldr	r3, [pc, #8]	@ (8009884 <free+0xc>)
 800987a:	4601      	mov	r1, r0
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	f000 b8f5 	b.w	8009a6c <_free_r>
 8009882:	bf00      	nop
 8009884:	2000002c 	.word	0x2000002c

08009888 <sbrk_aligned>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4e0f      	ldr	r6, [pc, #60]	@ (80098c8 <sbrk_aligned+0x40>)
 800988c:	460c      	mov	r4, r1
 800988e:	6831      	ldr	r1, [r6, #0]
 8009890:	4605      	mov	r5, r0
 8009892:	b911      	cbnz	r1, 800989a <sbrk_aligned+0x12>
 8009894:	f000 f8ae 	bl	80099f4 <_sbrk_r>
 8009898:	6030      	str	r0, [r6, #0]
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 f8a9 	bl	80099f4 <_sbrk_r>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d103      	bne.n	80098ae <sbrk_aligned+0x26>
 80098a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80098aa:	4620      	mov	r0, r4
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	1cc4      	adds	r4, r0, #3
 80098b0:	f024 0403 	bic.w	r4, r4, #3
 80098b4:	42a0      	cmp	r0, r4
 80098b6:	d0f8      	beq.n	80098aa <sbrk_aligned+0x22>
 80098b8:	1a21      	subs	r1, r4, r0
 80098ba:	4628      	mov	r0, r5
 80098bc:	f000 f89a 	bl	80099f4 <_sbrk_r>
 80098c0:	3001      	adds	r0, #1
 80098c2:	d1f2      	bne.n	80098aa <sbrk_aligned+0x22>
 80098c4:	e7ef      	b.n	80098a6 <sbrk_aligned+0x1e>
 80098c6:	bf00      	nop
 80098c8:	200009ac 	.word	0x200009ac

080098cc <_malloc_r>:
 80098cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d0:	1ccd      	adds	r5, r1, #3
 80098d2:	f025 0503 	bic.w	r5, r5, #3
 80098d6:	3508      	adds	r5, #8
 80098d8:	2d0c      	cmp	r5, #12
 80098da:	bf38      	it	cc
 80098dc:	250c      	movcc	r5, #12
 80098de:	2d00      	cmp	r5, #0
 80098e0:	4606      	mov	r6, r0
 80098e2:	db01      	blt.n	80098e8 <_malloc_r+0x1c>
 80098e4:	42a9      	cmp	r1, r5
 80098e6:	d904      	bls.n	80098f2 <_malloc_r+0x26>
 80098e8:	230c      	movs	r3, #12
 80098ea:	6033      	str	r3, [r6, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099c8 <_malloc_r+0xfc>
 80098f6:	f000 f869 	bl	80099cc <__malloc_lock>
 80098fa:	f8d8 3000 	ldr.w	r3, [r8]
 80098fe:	461c      	mov	r4, r3
 8009900:	bb44      	cbnz	r4, 8009954 <_malloc_r+0x88>
 8009902:	4629      	mov	r1, r5
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff ffbf 	bl	8009888 <sbrk_aligned>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	4604      	mov	r4, r0
 800990e:	d158      	bne.n	80099c2 <_malloc_r+0xf6>
 8009910:	f8d8 4000 	ldr.w	r4, [r8]
 8009914:	4627      	mov	r7, r4
 8009916:	2f00      	cmp	r7, #0
 8009918:	d143      	bne.n	80099a2 <_malloc_r+0xd6>
 800991a:	2c00      	cmp	r4, #0
 800991c:	d04b      	beq.n	80099b6 <_malloc_r+0xea>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4639      	mov	r1, r7
 8009922:	4630      	mov	r0, r6
 8009924:	eb04 0903 	add.w	r9, r4, r3
 8009928:	f000 f864 	bl	80099f4 <_sbrk_r>
 800992c:	4581      	cmp	r9, r0
 800992e:	d142      	bne.n	80099b6 <_malloc_r+0xea>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	1a6d      	subs	r5, r5, r1
 8009934:	4629      	mov	r1, r5
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ffa6 	bl	8009888 <sbrk_aligned>
 800993c:	3001      	adds	r0, #1
 800993e:	d03a      	beq.n	80099b6 <_malloc_r+0xea>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	442b      	add	r3, r5
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	f8d8 3000 	ldr.w	r3, [r8]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	bb62      	cbnz	r2, 80099a8 <_malloc_r+0xdc>
 800994e:	f8c8 7000 	str.w	r7, [r8]
 8009952:	e00f      	b.n	8009974 <_malloc_r+0xa8>
 8009954:	6822      	ldr	r2, [r4, #0]
 8009956:	1b52      	subs	r2, r2, r5
 8009958:	d420      	bmi.n	800999c <_malloc_r+0xd0>
 800995a:	2a0b      	cmp	r2, #11
 800995c:	d917      	bls.n	800998e <_malloc_r+0xc2>
 800995e:	1961      	adds	r1, r4, r5
 8009960:	42a3      	cmp	r3, r4
 8009962:	6025      	str	r5, [r4, #0]
 8009964:	bf18      	it	ne
 8009966:	6059      	strne	r1, [r3, #4]
 8009968:	6863      	ldr	r3, [r4, #4]
 800996a:	bf08      	it	eq
 800996c:	f8c8 1000 	streq.w	r1, [r8]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4630      	mov	r0, r6
 8009976:	f000 f82f 	bl	80099d8 <__malloc_unlock>
 800997a:	f104 000b 	add.w	r0, r4, #11
 800997e:	1d23      	adds	r3, r4, #4
 8009980:	f020 0007 	bic.w	r0, r0, #7
 8009984:	1ac2      	subs	r2, r0, r3
 8009986:	bf1c      	itt	ne
 8009988:	1a1b      	subne	r3, r3, r0
 800998a:	50a3      	strne	r3, [r4, r2]
 800998c:	e7af      	b.n	80098ee <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	f8c8 2000 	streq.w	r2, [r8]
 8009998:	605a      	strne	r2, [r3, #4]
 800999a:	e7eb      	b.n	8009974 <_malloc_r+0xa8>
 800999c:	4623      	mov	r3, r4
 800999e:	6864      	ldr	r4, [r4, #4]
 80099a0:	e7ae      	b.n	8009900 <_malloc_r+0x34>
 80099a2:	463c      	mov	r4, r7
 80099a4:	687f      	ldr	r7, [r7, #4]
 80099a6:	e7b6      	b.n	8009916 <_malloc_r+0x4a>
 80099a8:	461a      	mov	r2, r3
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d1fb      	bne.n	80099a8 <_malloc_r+0xdc>
 80099b0:	2300      	movs	r3, #0
 80099b2:	6053      	str	r3, [r2, #4]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa8>
 80099b6:	230c      	movs	r3, #12
 80099b8:	6033      	str	r3, [r6, #0]
 80099ba:	4630      	mov	r0, r6
 80099bc:	f000 f80c 	bl	80099d8 <__malloc_unlock>
 80099c0:	e794      	b.n	80098ec <_malloc_r+0x20>
 80099c2:	6005      	str	r5, [r0, #0]
 80099c4:	e7d6      	b.n	8009974 <_malloc_r+0xa8>
 80099c6:	bf00      	nop
 80099c8:	200009b0 	.word	0x200009b0

080099cc <__malloc_lock>:
 80099cc:	4801      	ldr	r0, [pc, #4]	@ (80099d4 <__malloc_lock+0x8>)
 80099ce:	f000 b84b 	b.w	8009a68 <__retarget_lock_acquire_recursive>
 80099d2:	bf00      	nop
 80099d4:	20000aec 	.word	0x20000aec

080099d8 <__malloc_unlock>:
 80099d8:	4801      	ldr	r0, [pc, #4]	@ (80099e0 <__malloc_unlock+0x8>)
 80099da:	f000 b846 	b.w	8009a6a <__retarget_lock_release_recursive>
 80099de:	bf00      	nop
 80099e0:	20000aec 	.word	0x20000aec

080099e4 <memset>:
 80099e4:	4402      	add	r2, r0
 80099e6:	4603      	mov	r3, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <_sbrk_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	@ (8009a10 <_sbrk_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f7 fb08 	bl	8001014 <_sbrk>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_sbrk_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_sbrk_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20000af0 	.word	0x20000af0

08009a14 <__errno>:
 8009a14:	4b01      	ldr	r3, [pc, #4]	@ (8009a1c <__errno+0x8>)
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	2000002c 	.word	0x2000002c

08009a20 <__libc_init_array>:
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4d0d      	ldr	r5, [pc, #52]	@ (8009a58 <__libc_init_array+0x38>)
 8009a24:	4c0d      	ldr	r4, [pc, #52]	@ (8009a5c <__libc_init_array+0x3c>)
 8009a26:	1b64      	subs	r4, r4, r5
 8009a28:	10a4      	asrs	r4, r4, #2
 8009a2a:	2600      	movs	r6, #0
 8009a2c:	42a6      	cmp	r6, r4
 8009a2e:	d109      	bne.n	8009a44 <__libc_init_array+0x24>
 8009a30:	4d0b      	ldr	r5, [pc, #44]	@ (8009a60 <__libc_init_array+0x40>)
 8009a32:	4c0c      	ldr	r4, [pc, #48]	@ (8009a64 <__libc_init_array+0x44>)
 8009a34:	f000 f864 	bl	8009b00 <_init>
 8009a38:	1b64      	subs	r4, r4, r5
 8009a3a:	10a4      	asrs	r4, r4, #2
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	42a6      	cmp	r6, r4
 8009a40:	d105      	bne.n	8009a4e <__libc_init_array+0x2e>
 8009a42:	bd70      	pop	{r4, r5, r6, pc}
 8009a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a48:	4798      	blx	r3
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	e7ee      	b.n	8009a2c <__libc_init_array+0xc>
 8009a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a52:	4798      	blx	r3
 8009a54:	3601      	adds	r6, #1
 8009a56:	e7f2      	b.n	8009a3e <__libc_init_array+0x1e>
 8009a58:	08009b3c 	.word	0x08009b3c
 8009a5c:	08009b3c 	.word	0x08009b3c
 8009a60:	08009b3c 	.word	0x08009b3c
 8009a64:	08009b40 	.word	0x08009b40

08009a68 <__retarget_lock_acquire_recursive>:
 8009a68:	4770      	bx	lr

08009a6a <__retarget_lock_release_recursive>:
 8009a6a:	4770      	bx	lr

08009a6c <_free_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4605      	mov	r5, r0
 8009a70:	2900      	cmp	r1, #0
 8009a72:	d041      	beq.n	8009af8 <_free_r+0x8c>
 8009a74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a78:	1f0c      	subs	r4, r1, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bfb8      	it	lt
 8009a7e:	18e4      	addlt	r4, r4, r3
 8009a80:	f7ff ffa4 	bl	80099cc <__malloc_lock>
 8009a84:	4a1d      	ldr	r2, [pc, #116]	@ (8009afc <_free_r+0x90>)
 8009a86:	6813      	ldr	r3, [r2, #0]
 8009a88:	b933      	cbnz	r3, 8009a98 <_free_r+0x2c>
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	6014      	str	r4, [r2, #0]
 8009a8e:	4628      	mov	r0, r5
 8009a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a94:	f7ff bfa0 	b.w	80099d8 <__malloc_unlock>
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d908      	bls.n	8009aae <_free_r+0x42>
 8009a9c:	6820      	ldr	r0, [r4, #0]
 8009a9e:	1821      	adds	r1, r4, r0
 8009aa0:	428b      	cmp	r3, r1
 8009aa2:	bf01      	itttt	eq
 8009aa4:	6819      	ldreq	r1, [r3, #0]
 8009aa6:	685b      	ldreq	r3, [r3, #4]
 8009aa8:	1809      	addeq	r1, r1, r0
 8009aaa:	6021      	streq	r1, [r4, #0]
 8009aac:	e7ed      	b.n	8009a8a <_free_r+0x1e>
 8009aae:	461a      	mov	r2, r3
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	b10b      	cbz	r3, 8009ab8 <_free_r+0x4c>
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d9fa      	bls.n	8009aae <_free_r+0x42>
 8009ab8:	6811      	ldr	r1, [r2, #0]
 8009aba:	1850      	adds	r0, r2, r1
 8009abc:	42a0      	cmp	r0, r4
 8009abe:	d10b      	bne.n	8009ad8 <_free_r+0x6c>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	4401      	add	r1, r0
 8009ac4:	1850      	adds	r0, r2, r1
 8009ac6:	4283      	cmp	r3, r0
 8009ac8:	6011      	str	r1, [r2, #0]
 8009aca:	d1e0      	bne.n	8009a8e <_free_r+0x22>
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	6053      	str	r3, [r2, #4]
 8009ad2:	4408      	add	r0, r1
 8009ad4:	6010      	str	r0, [r2, #0]
 8009ad6:	e7da      	b.n	8009a8e <_free_r+0x22>
 8009ad8:	d902      	bls.n	8009ae0 <_free_r+0x74>
 8009ada:	230c      	movs	r3, #12
 8009adc:	602b      	str	r3, [r5, #0]
 8009ade:	e7d6      	b.n	8009a8e <_free_r+0x22>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf04      	itt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	6063      	str	r3, [r4, #4]
 8009aee:	bf04      	itt	eq
 8009af0:	1809      	addeq	r1, r1, r0
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	6054      	str	r4, [r2, #4]
 8009af6:	e7ca      	b.n	8009a8e <_free_r+0x22>
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	200009b0 	.word	0x200009b0

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
