
2025_STM32F407_BlinkLED_10Hz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009410  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009598  08009598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b4  080095b4  0000b07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080095b4  080095b4  0000a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095bc  080095bc  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095bc  080095bc  0000a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095c0  080095c0  0000a5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080095c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a6c  20000080  20000080  0000b080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000aec  20000aec  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001987a  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df9  00000000  00000000  00024926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00028720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117e  00000000  00000000  00029dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243b6  00000000  00000000  0002af3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce66  00000000  00000000  0004f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4109  00000000  00000000  0006c15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140263  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000636c  00000000  00000000  001402a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00146614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009580 	.word	0x08009580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08009580 	.word	0x08009580

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fcc4 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f814 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f95c 	bl	80007bc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f87a 	bl	80005fc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8a6 	bl	8000658 <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f8d4 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f008 fbe0 	bl	8008cd4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000514:	f000 f906 	bl	8000724 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000518:	4802      	ldr	r0, [pc, #8]	@ (8000524 <main+0x30>)
 800051a:	f004 fdc7 	bl	80050ac <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051e:	f008 fbff 	bl	8008d20 <MX_USB_HOST_Process>
 8000522:	e7fc      	b.n	800051e <main+0x2a>
 8000524:	20000190 	.word	0x20000190

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	@ 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f008 ff94 	bl	8009464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a27      	ldr	r2, [pc, #156]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b25      	ldr	r3, [pc, #148]	@ (80005f4 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fede 	bl	8004370 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 fa49 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	2105      	movs	r1, #5
 80005dc:	4618      	mov	r0, r3
 80005de:	f004 f93f 	bl	8004860 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e8:	f000 fa32 	bl	8000a50 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3750      	adds	r7, #80	@ 0x50
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	@ (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	@ (800064c <MX_I2C1_Init+0x50>)
 800063a:	f003 f8b5 	bl	80037a8 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 fa04 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000009c 	.word	0x2000009c
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <MX_I2S3_Init+0x54>)
 800065e:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <MX_I2S3_Init+0x58>)
 8000660:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000662:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000668:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800067c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <MX_I2S3_Init+0x5c>)
 8000682:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_I2S3_Init+0x54>)
 8000698:	f003 f9ca 	bl	8003a30 <HAL_I2S_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a2:	f000 f9d5 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000f0 	.word	0x200000f0
 80006b0:	40003c00 	.word	0x40003c00
 80006b4:	00017700 	.word	0x00017700

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_SPI1_Init+0x64>)
 800070a:	f004 fbf7 	bl	8004efc <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f99c 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000138 	.word	0x20000138
 8000720:	40013000 	.word	0x40013000

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_TIM2_Init+0x94>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_TIM2_Init+0x94>)
 800074a:	2208      	movs	r2, #8
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_TIM2_Init+0x94>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_TIM2_Init+0x94>)
 8000756:	f241 3287 	movw	r2, #4999	@ 0x1387
 800075a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_TIM2_Init+0x94>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_TIM2_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000768:	4813      	ldr	r0, [pc, #76]	@ (80007b8 <MX_TIM2_Init+0x94>)
 800076a:	f004 fc50 	bl	800500e <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000774:	f000 f96c 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000778:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4619      	mov	r1, r3
 8000784:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_TIM2_Init+0x94>)
 8000786:	f004 fdf1 	bl	800536c <HAL_TIM_ConfigClockSource>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f95e 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_TIM2_Init+0x94>)
 80007a2:	f005 f819 	bl	80057d8 <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007ac:	f000 f950 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000190 	.word	0x20000190

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b72      	ldr	r3, [pc, #456]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a71      	ldr	r2, [pc, #452]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007dc:	f043 0310 	orr.w	r3, r3, #16
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b6f      	ldr	r3, [pc, #444]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0310 	and.w	r3, r3, #16
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b6b      	ldr	r3, [pc, #428]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a6a      	ldr	r2, [pc, #424]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b68      	ldr	r3, [pc, #416]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b64      	ldr	r3, [pc, #400]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a63      	ldr	r2, [pc, #396]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b61      	ldr	r3, [pc, #388]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b5d      	ldr	r3, [pc, #372]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a5c      	ldr	r2, [pc, #368]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b5a      	ldr	r3, [pc, #360]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b56      	ldr	r3, [pc, #344]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a55      	ldr	r2, [pc, #340]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b53      	ldr	r3, [pc, #332]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b4f      	ldr	r3, [pc, #316]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a4e      	ldr	r2, [pc, #312]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b4c      	ldr	r3, [pc, #304]	@ (80009a0 <MX_GPIO_Init+0x1e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4849      	ldr	r0, [pc, #292]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 8000880:	f000 fe44 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	4847      	ldr	r0, [pc, #284]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fe3f 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088e:	2200      	movs	r2, #0
 8000890:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000894:	4845      	ldr	r0, [pc, #276]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000896:	f000 fe39 	bl	800150c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800089a:	2308      	movs	r3, #8
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	483c      	ldr	r0, [pc, #240]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 80008b2:	f000 fc8f 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4836      	ldr	r0, [pc, #216]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ce:	f000 fc81 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482e      	ldr	r0, [pc, #184]	@ (80009a8 <MX_GPIO_Init+0x1ec>)
 80008ee:	f000 fc71 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	482a      	ldr	r0, [pc, #168]	@ (80009b0 <MX_GPIO_Init+0x1f4>)
 8000908:	f000 fc64 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800090c:	2304      	movs	r3, #4
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4825      	ldr	r0, [pc, #148]	@ (80009b4 <MX_GPIO_Init+0x1f8>)
 8000920:	f000 fc58 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000936:	2305      	movs	r3, #5
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	@ (80009b4 <MX_GPIO_Init+0x1f8>)
 8000942:	f000 fc47 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000946:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800094a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4813      	ldr	r0, [pc, #76]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000960:	f000 fc38 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <MX_GPIO_Init+0x1f0>)
 8000978:	f000 fc2c 	bl	80011d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000980:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <MX_GPIO_Init+0x1e8>)
 8000992:	f000 fc1f 	bl	80011d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	@ 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400

080009b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009b8:	b5b0      	push	{r4, r5, r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009c8:	d13a      	bne.n	8000a40 <HAL_TIM_PeriodElapsedCallback+0x88>
		if (gCounter > 10000) {
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d0:	f242 7111 	movw	r1, #10001	@ 0x2711
 80009d4:	428a      	cmp	r2, r1
 80009d6:	f173 0300 	sbcs.w	r3, r3, #0
 80009da:	db13      	blt.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0x4c>
			gCounter = 0;
 80009dc:	491a      	ldr	r1, [pc, #104]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80009de:	f04f 0200 	mov.w	r2, #0
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	e9c1 2300 	strd	r2, r3, [r1]
			// Cycle 1: LED 12 ON, LED 14 OFF
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f0:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009f2:	f000 fd8b 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009fc:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80009fe:	f000 fd85 	bl	800150c <HAL_GPIO_WritePin>
 8000a02:	e014      	b.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x76>
		} else if (gCounter > 5000) {
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a0a:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000a0e:	428a      	cmp	r2, r1
 8000a10:	f173 0300 	sbcs.w	r3, r3, #0
 8000a14:	db0b      	blt.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x76>
			// Cycle 2: LED 12 OFF, LED 14 ON
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a1e:	f000 fd75 	bl	800150c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a28:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a2a:	f000 fd6f 	bl	800150c <HAL_GPIO_WritePin>
		}
		gCounter++;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a34:	1c54      	adds	r4, r2, #1
 8000a36:	f143 0500 	adc.w	r5, r3, #0
 8000a3a:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a3c:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bdb0      	pop	{r4, r5, r7, pc}
 8000a48:	200001d8 	.word	0x200001d8
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fb58 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_I2C_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aea:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000afc:	2304      	movs	r3, #4
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <HAL_I2C_MspInit+0x8c>)
 8000b08:	f000 fb64 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a07      	ldr	r2, [pc, #28]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	@ 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005400 	.word	0x40005400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a31      	ldr	r2, [pc, #196]	@ (8000c2c <HAL_I2S_MspInit+0xf0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d15a      	bne.n	8000c22 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b70:	23c0      	movs	r3, #192	@ 0xc0
 8000b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f004 f87b 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b88:	f7ff ff62 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000be0:	2310      	movs	r3, #16
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf0:	2306      	movs	r3, #6
 8000bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <HAL_I2S_MspInit+0xf8>)
 8000bfc:	f000 faea 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c00:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c12:	2306      	movs	r3, #6
 8000c14:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <HAL_I2S_MspInit+0xfc>)
 8000c1e:	f000 fad9 	bl	80011d4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000c22:	bf00      	nop
 8000c24:	3738      	adds	r7, #56	@ 0x38
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40003c00 	.word	0x40003c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020000 	.word	0x40020000
 8000c38:	40020800 	.word	0x40020800

08000c3c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	@ (8000cc0 <HAL_SPI_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_SPI_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c96:	23e0      	movs	r3, #224	@ 0xe0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <HAL_SPI_MspInit+0x8c>)
 8000cb2:	f000 fa8f 	bl	80011d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	201c      	movs	r0, #28
 8000d00:	f000 fa31 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d04:	201c      	movs	r0, #28
 8000d06:	f000 fa4a 	bl	800119e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <MemManage_Handler+0x4>

08000d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f8db 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <TIM2_IRQHandler+0x10>)
 8000d7e:	f004 fa05 	bl	800518c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000190 	.word	0x20000190

08000d8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <OTG_FS_IRQHandler+0x10>)
 8000d92:	f000 feb5 	bl	8001b00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200005c4 	.word	0x200005c4

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f008 fb60 	bl	8009494 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200001e0 	.word	0x200001e0
 8000e08:	20000af0 	.word	0x20000af0

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f008 fb1f 	bl	80094a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb47 	bl	80004f4 <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e74:	080095c4 	.word	0x080095c4
  ldr r2, =_sbss
 8000e78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e7c:	20000aec 	.word	0x20000aec

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fdd0 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001e4 	.word	0x200001e4

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001e4 	.word	0x200001e4

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	@ 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e16b      	b.n	80014c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 815a 	bne.w	80014c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d005      	beq.n	8001226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	2b02      	cmp	r3, #2
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b03      	cmp	r3, #3
 8001292:	d017      	beq.n	80012c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d123      	bne.n	8001318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	08da      	lsrs	r2, r3, #3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3208      	adds	r2, #8
 8001312:	69b9      	ldr	r1, [r7, #24]
 8001314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0203 	and.w	r2, r3, #3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80b4 	beq.w	80014c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b60      	ldr	r3, [pc, #384]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a5f      	ldr	r2, [pc, #380]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 8001364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b5d      	ldr	r3, [pc, #372]	@ (80014e0 <HAL_GPIO_Init+0x30c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001376:	4a5b      	ldr	r2, [pc, #364]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a52      	ldr	r2, [pc, #328]	@ (80014e8 <HAL_GPIO_Init+0x314>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d02b      	beq.n	80013fa <HAL_GPIO_Init+0x226>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a51      	ldr	r2, [pc, #324]	@ (80014ec <HAL_GPIO_Init+0x318>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x222>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a50      	ldr	r2, [pc, #320]	@ (80014f0 <HAL_GPIO_Init+0x31c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x21e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	@ (80014f4 <HAL_GPIO_Init+0x320>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x21a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4e      	ldr	r2, [pc, #312]	@ (80014f8 <HAL_GPIO_Init+0x324>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x216>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4d      	ldr	r2, [pc, #308]	@ (80014fc <HAL_GPIO_Init+0x328>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x212>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001500 <HAL_GPIO_Init+0x32c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x20e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001504 <HAL_GPIO_Init+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x20a>
 80013da:	2307      	movs	r3, #7
 80013dc:	e00e      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013de:	2308      	movs	r3, #8
 80013e0:	e00c      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e2:	2306      	movs	r3, #6
 80013e4:	e00a      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013e6:	2305      	movs	r3, #5
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ea:	2304      	movs	r3, #4
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x228>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	@ (80014e4 <HAL_GPIO_Init+0x310>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a32      	ldr	r2, [pc, #200]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1d      	ldr	r2, [pc, #116]	@ (8001508 <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <HAL_GPIO_Init+0x334>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f ae90 	bls.w	80011f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021400 	.word	0x40021400
 8001500:	40021800 	.word	0x40021800
 8001504:	40021c00 	.word	0x40021c00
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af02      	add	r7, sp, #8
 8001544:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e059      	b.n	8001604 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d106      	bne.n	8001570 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f007 fc10 	bl	8008d90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800157e:	d102      	bne.n	8001586 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fa29 	bl	80059e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7c1a      	ldrb	r2, [r3, #16]
 8001598:	f88d 2000 	strb.w	r2, [sp]
 800159c:	3304      	adds	r3, #4
 800159e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a0:	f004 f9aa 	bl	80058f8 <USB_CoreInit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e026      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fa21 	bl	8005a04 <USB_SetCurrentMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e017      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7c1a      	ldrb	r2, [r3, #16]
 80015dc:	f88d 2000 	strb.w	r2, [sp]
 80015e0:	3304      	adds	r3, #4
 80015e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e4:	f004 fbc4 	bl	8005d70 <USB_HostInit>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e004      	b.n	8001604 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b08b      	sub	sp, #44	@ 0x2c
 8001610:	af04      	add	r7, sp, #16
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	70fb      	strb	r3, [r7, #3]
 800161e:	460b      	mov	r3, r1
 8001620:	70bb      	strb	r3, [r7, #2]
 8001622:	4613      	mov	r3, r2
 8001624:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001626:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001628:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_HCD_HC_Init+0x2c>
 8001634:	2302      	movs	r3, #2
 8001636:	e09d      	b.n	8001774 <HAL_HCD_HC_Init+0x168>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	1a9b      	subs	r3, r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	3319      	adds	r3, #25
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3314      	adds	r3, #20
 8001664:	787a      	ldrb	r2, [r7, #1]
 8001666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001668:	78fa      	ldrb	r2, [r7, #3]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	1a9b      	subs	r3, r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	3315      	adds	r3, #21
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	1a9b      	subs	r3, r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	3326      	adds	r3, #38	@ 0x26
 800168c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001692:	78fa      	ldrb	r2, [r7, #3]
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800169a:	b2d8      	uxtb	r0, r3
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3316      	adds	r3, #22
 80016aa:	4602      	mov	r2, r0
 80016ac:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fbc8 	bl	8001e48 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80016b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da0a      	bge.n	80016d6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3317      	adds	r3, #23
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
 80016d4:	e009      	b.n	80016ea <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3317      	adds	r3, #23
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fca2 	bl	8006038 <USB_GetHostSpeed>
 80016f4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80016f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10b      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d104      	bne.n	8001716 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001710:	d901      	bls.n	8001716 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001712:	23bc      	movs	r3, #188	@ 0xbc
 8001714:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3318      	adds	r3, #24
 8001726:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800172a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	b298      	uxth	r0, r3
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	1a9b      	subs	r3, r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	440b      	add	r3, r1
 800173e:	3328      	adds	r3, #40	@ 0x28
 8001740:	4602      	mov	r2, r0
 8001742:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	b29b      	uxth	r3, r3
 800174c:	787c      	ldrb	r4, [r7, #1]
 800174e:	78ba      	ldrb	r2, [r7, #2]
 8001750:	78f9      	ldrb	r1, [r7, #3]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4623      	mov	r3, r4
 8001762:	f004 fc91 	bl	8006088 <USB_HC_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_HCD_HC_Halt+0x1e>
 8001796:	2302      	movs	r3, #2
 8001798:	e00f      	b.n	80017ba <HAL_HCD_HC_Halt+0x3e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 f823 	bl	80067f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70bb      	strb	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	1a9b      	subs	r3, r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3317      	adds	r3, #23
 80017ee:	78ba      	ldrb	r2, [r7, #2]
 80017f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a9b      	subs	r3, r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	440b      	add	r3, r1
 8001800:	3326      	adds	r3, #38	@ 0x26
 8001802:	787a      	ldrb	r2, [r7, #1]
 8001804:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001806:	7c3b      	ldrb	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d114      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332a      	adds	r3, #42	@ 0x2a
 800181c:	2203      	movs	r2, #3
 800181e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	3319      	adds	r3, #25
 8001830:	7f3a      	ldrb	r2, [r7, #28]
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e009      	b.n	800184a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	332a      	adds	r3, #42	@ 0x2a
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800184a:	787b      	ldrb	r3, [r7, #1]
 800184c:	2b03      	cmp	r3, #3
 800184e:	f200 8102 	bhi.w	8001a56 <HAL_HCD_HC_SubmitRequest+0x292>
 8001852:	a201      	add	r2, pc, #4	@ (adr r2, 8001858 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001858:	08001869 	.word	0x08001869
 800185c:	08001a41 	.word	0x08001a41
 8001860:	0800192d 	.word	0x0800192d
 8001864:	080019b7 	.word	0x080019b7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001868:	7c3b      	ldrb	r3, [r7, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	f040 80f5 	bne.w	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001870:	78bb      	ldrb	r3, [r7, #2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12d      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001876:	8b3b      	ldrh	r3, [r7, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	333d      	adds	r3, #61	@ 0x3d
 800188c:	2201      	movs	r2, #1
 800188e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	333d      	adds	r3, #61	@ 0x3d
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	332a      	adds	r3, #42	@ 0x2a
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80018ba:	e0ce      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	332a      	adds	r3, #42	@ 0x2a
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e0c3      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	331a      	adds	r3, #26
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f040 80b8 	bne.w	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80018ea:	78fa      	ldrb	r2, [r7, #3]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	1a9b      	subs	r3, r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	333c      	adds	r3, #60	@ 0x3c
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	332a      	adds	r3, #42	@ 0x2a
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
      break;
 8001914:	e0a1      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	332a      	adds	r3, #42	@ 0x2a
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
      break;
 800192a:	e096      	b.n	8001a5a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d120      	bne.n	8001974 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	333d      	adds	r3, #61	@ 0x3d
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10a      	bne.n	800195e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	332a      	adds	r3, #42	@ 0x2a
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800195c:	e07e      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195e:	78fa      	ldrb	r2, [r7, #3]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	332a      	adds	r3, #42	@ 0x2a
 800196e:	2202      	movs	r2, #2
 8001970:	701a      	strb	r2, [r3, #0]
      break;
 8001972:	e073      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	333c      	adds	r3, #60	@ 0x3c
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	332a      	adds	r3, #42	@ 0x2a
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e05d      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332a      	adds	r3, #42	@ 0x2a
 80019b0:	2202      	movs	r2, #2
 80019b2:	701a      	strb	r2, [r3, #0]
      break;
 80019b4:	e052      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b6:	78bb      	ldrb	r3, [r7, #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d120      	bne.n	80019fe <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	333d      	adds	r3, #61	@ 0x3d
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10a      	bne.n	80019e8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	332a      	adds	r3, #42	@ 0x2a
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019e6:	e039      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	332a      	adds	r3, #42	@ 0x2a
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
      break;
 80019fc:	e02e      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333c      	adds	r3, #60	@ 0x3c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	332a      	adds	r3, #42	@ 0x2a
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
      break;
 8001a28:	e018      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332a      	adds	r3, #42	@ 0x2a
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
      break;
 8001a3e:	e00d      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	332a      	adds	r3, #42	@ 0x2a
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
      break;
 8001a54:	e002      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001a56:	bf00      	nop
 8001a58:	e000      	b.n	8001a5c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001a5a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	332c      	adds	r3, #44	@ 0x2c
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	8b39      	ldrh	r1, [r7, #24]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4403      	add	r3, r0
 8001a80:	3334      	adds	r3, #52	@ 0x34
 8001a82:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	334c      	adds	r3, #76	@ 0x4c
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3338      	adds	r3, #56	@ 0x38
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	011b      	lsls	r3, r3, #4
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	3315      	adds	r3, #21
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	334d      	adds	r3, #77	@ 0x4d
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	78fa      	ldrb	r2, [r7, #3]
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	1d19      	adds	r1, r3, #4
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	799b      	ldrb	r3, [r3, #6]
 8001aee:	461a      	mov	r2, r3
 8001af0:	f004 fbf6 	bl	80062e0 <USB_HC_StartXfer>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop

08001b00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f004 f8ea 	bl	8005cf0 <USB_GetMode>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	f040 80fb 	bne.w	8001d1a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 f8ad 	bl	8005c88 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80f1 	beq.w	8001d18 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 f8a4 	bl	8005c88 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f894 	bl	8005c88 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f884 	bl	8005c88 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b8a:	d104      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 f874 	bl	8005c88 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d103      	bne.n	8001bb2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 f866 	bl	8005c88 <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bc6:	d120      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001bd0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d113      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001be2:	2110      	movs	r1, #16
 8001be4:	6938      	ldr	r0, [r7, #16]
 8001be6:	f003 ff59 	bl	8005a9c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bea:	6938      	ldr	r0, [r7, #16]
 8001bec:	f003 ff88 	bl	8005b00 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7a5b      	ldrb	r3, [r3, #9]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d105      	bne.n	8001c04 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 f97a 	bl	8005ef8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f007 f941 	bl	8008e8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 f83a 	bl	8005c88 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c1e:	d102      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f001 fd4d 	bl	80036c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 f82c 	bl	8005c88 <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d106      	bne.n	8001c48 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f007 f90a 	bl	8008e54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2208      	movs	r2, #8
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f004 f81b 	bl	8005c88 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c5c:	d139      	bne.n	8001cd2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fdb6 	bl	80067d4 <USB_HC_ReadInterrupt>
 8001c68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e025      	b.n	8001cbc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d018      	beq.n	8001cb6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c9a:	d106      	bne.n	8001caa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f905 	bl	8001eb2 <HCD_HC_IN_IRQHandler>
 8001ca8:	e005      	b.n	8001cb6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 ff67 	bl	8002b84 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	795b      	ldrb	r3, [r3, #5]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d3d3      	bcc.n	8001c70 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 ffd6 	bl	8005c88 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d101      	bne.n	8001cea <HAL_HCD_IRQHandler+0x1ea>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_HCD_IRQHandler+0x1ec>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0210 	bic.w	r2, r2, #16
 8001cfe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 fbfe 	bl	8003502 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0210 	orr.w	r2, r2, #16
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	e000      	b.n	8001d1a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d18:	bf00      	nop
    }
  }
}
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_HCD_Start+0x16>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e013      	b.n	8001d5e <HAL_HCD_Start+0x3e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 f93e 	bl	8005fc6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fe36 	bl	80059c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_HCD_Stop+0x16>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00d      	b.n	8001d98 <HAL_HCD_Stop+0x32>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 fe91 	bl	8006ab0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 f8e0 	bl	8005f72 <USB_ResetPort>
 8001db2:	4603      	mov	r3, r0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	334c      	adds	r3, #76	@ 0x4c
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001df2:	78fa      	ldrb	r2, [r7, #3]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	1a9b      	subs	r3, r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3338      	adds	r3, #56	@ 0x38
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f004 f922 	bl	8006066 <USB_GetCurrentFrame>
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f004 f8fd 	bl	8006038 <USB_GetHostSpeed>
 8001e3e:	4603      	mov	r3, r0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	331a      	adds	r3, #26
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	6879      	ldr	r1, [r7, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	1a9b      	subs	r3, r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	331b      	adds	r3, #27
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e7c:	78fa      	ldrb	r2, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	3325      	adds	r3, #37	@ 0x25
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3324      	adds	r3, #36	@ 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 feec 	bl	8005cae <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11a      	bne.n	8001f16 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2304      	movs	r3, #4
 8001ef0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ef2:	78fa      	ldrb	r2, [r7, #3]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	334d      	adds	r3, #77	@ 0x4d
 8001f02:	2207      	movs	r2, #7
 8001f04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fc71 	bl	80067f6 <USB_HC_Halt>
 8001f14:	e09e      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fec5 	bl	8005cae <USB_ReadChInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f2e:	d11b      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	334d      	adds	r3, #77	@ 0x4d
 8001f54:	2208      	movs	r2, #8
 8001f56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 fc48 	bl	80067f6 <USB_HC_Halt>
 8001f66:	e075      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 fe9c 	bl	8005cae <USB_ReadChInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d11a      	bne.n	8001fb6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2308      	movs	r3, #8
 8001f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f92:	78fa      	ldrb	r2, [r7, #3]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	334d      	adds	r3, #77	@ 0x4d
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fc21 	bl	80067f6 <USB_HC_Halt>
 8001fb4:	e04e      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fe75 	bl	8005cae <USB_ReadChInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fce:	d11b      	bne.n	8002008 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	334d      	adds	r3, #77	@ 0x4d
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f004 fbf8 	bl	80067f6 <USB_HC_Halt>
 8002006:	e025      	b.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	78fa      	ldrb	r2, [r7, #3]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fe4c 	bl	8005cae <USB_ReadChInterrupts>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201c:	2b80      	cmp	r3, #128	@ 0x80
 800201e:	d119      	bne.n	8002054 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334d      	adds	r3, #77	@ 0x4d
 8002042:	2207      	movs	r2, #7
 8002044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fbd1 	bl	80067f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fe26 	bl	8005cae <USB_ReadChInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d112      	bne.n	8002094 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f004 fbbd 	bl	80067f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002088:	461a      	mov	r2, r3
 800208a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800208e:	6093      	str	r3, [r2, #8]
 8002090:	f000 bd75 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	78fa      	ldrb	r2, [r7, #3]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fe06 	bl	8005cae <USB_ReadChInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 8128 	bne.w	80022fe <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	015a      	lsls	r2, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4413      	add	r3, r2
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ba:	461a      	mov	r2, r3
 80020bc:	2320      	movs	r3, #32
 80020be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80020c0:	78fa      	ldrb	r2, [r7, #3]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	331b      	adds	r3, #27
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d119      	bne.n	800210a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	331b      	adds	r3, #27
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	78fa      	ldrb	r2, [r7, #3]
 80020fa:	0151      	lsls	r1, r2, #5
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	440a      	add	r2, r1
 8002100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002108:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	799b      	ldrb	r3, [r3, #6]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01b      	beq.n	800214a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3330      	adds	r3, #48	@ 0x30
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	1ac9      	subs	r1, r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4403      	add	r3, r0
 8002146:	3338      	adds	r3, #56	@ 0x38
 8002148:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	334d      	adds	r3, #77	@ 0x4d
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3344      	adds	r3, #68	@ 0x44
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2301      	movs	r3, #1
 8002182:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3326      	adds	r3, #38	@ 0x26
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	3326      	adds	r3, #38	@ 0x26
 80021aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d110      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 fb1c 	bl	80067f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ca:	461a      	mov	r2, r3
 80021cc:	2310      	movs	r3, #16
 80021ce:	6093      	str	r3, [r2, #8]
 80021d0:	e03d      	b.n	800224e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3326      	adds	r3, #38	@ 0x26
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d00a      	beq.n	80021fe <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	1a9b      	subs	r3, r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3326      	adds	r3, #38	@ 0x26
 80021f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d127      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	0151      	lsls	r1, r2, #5
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	440a      	add	r2, r1
 8002214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800221c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	334c      	adds	r3, #76	@ 0x4c
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	440b      	add	r3, r1
 8002240:	334c      	adds	r3, #76	@ 0x4c
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	4619      	mov	r1, r3
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f006 fe2d 	bl	8008ea8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	799b      	ldrb	r3, [r3, #6]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d13b      	bne.n	80022ce <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3338      	adds	r3, #56	@ 0x38
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3328      	adds	r3, #40	@ 0x28
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	440b      	add	r3, r1
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4403      	add	r3, r0
 800228c:	3328      	adds	r3, #40	@ 0x28
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8470 	beq.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333c      	adds	r3, #60	@ 0x3c
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	@ 0x3c
 80022c6:	4602      	mov	r2, r0
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	f000 bc58 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	333c      	adds	r3, #60	@ 0x3c
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	f083 0301 	eor.w	r3, r3, #1
 80022e6:	b2d8      	uxtb	r0, r3
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	333c      	adds	r3, #60	@ 0x3c
 80022f6:	4602      	mov	r2, r0
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	f000 bc40 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fcd1 	bl	8005cae <USB_ReadChInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b20      	cmp	r3, #32
 8002314:	d131      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	2320      	movs	r3, #32
 8002326:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	331a      	adds	r3, #26
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 841f 	bne.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331b      	adds	r3, #27
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334d      	adds	r3, #77	@ 0x4d
 8002364:	2203      	movs	r2, #3
 8002366:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f004 fa40 	bl	80067f6 <USB_HC_Halt>
 8002376:	f000 bc02 	b.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f003 fc93 	bl	8005cae <USB_ReadChInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	f040 8305 	bne.w	800299e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	2302      	movs	r3, #2
 80023a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	334d      	adds	r3, #77	@ 0x4d
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d114      	bne.n	80023e6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	334d      	adds	r3, #77	@ 0x4d
 80023cc:	2202      	movs	r2, #2
 80023ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	334c      	adds	r3, #76	@ 0x4c
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e2cc      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	334d      	adds	r3, #77	@ 0x4d
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d114      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2202      	movs	r2, #2
 800240e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	334c      	adds	r3, #76	@ 0x4c
 8002420:	2205      	movs	r2, #5
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e2ac      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	334d      	adds	r3, #77	@ 0x4d
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b07      	cmp	r3, #7
 800243a:	d00b      	beq.n	8002454 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800243c:	78fa      	ldrb	r2, [r7, #3]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	334d      	adds	r3, #77	@ 0x4d
 800244c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800244e:	2b09      	cmp	r3, #9
 8002450:	f040 80a6 	bne.w	80025a0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334d      	adds	r3, #77	@ 0x4d
 8002464:	2202      	movs	r2, #2
 8002466:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3344      	adds	r3, #68	@ 0x44
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	1c59      	adds	r1, r3, #1
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4403      	add	r3, r0
 8002488:	3344      	adds	r3, #68	@ 0x44
 800248a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3344      	adds	r3, #68	@ 0x44
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d943      	bls.n	800252a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3344      	adds	r3, #68	@ 0x44
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80024b6:	78fa      	ldrb	r2, [r7, #3]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	331a      	adds	r3, #26
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d123      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	331b      	adds	r3, #27
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	331c      	adds	r3, #28
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	0151      	lsls	r1, r2, #5
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	440a      	add	r2, r1
 800250a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800250e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002512:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002514:	78fa      	ldrb	r2, [r7, #3]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a9b      	subs	r3, r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	334c      	adds	r3, #76	@ 0x4c
 8002524:	2204      	movs	r2, #4
 8002526:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002528:	e229      	b.n	800297e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	334c      	adds	r3, #76	@ 0x4c
 800253a:	2202      	movs	r2, #2
 800253c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	3326      	adds	r3, #38	@ 0x26
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00b      	beq.n	800256c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	3326      	adds	r3, #38	@ 0x26
 8002564:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 8209 	bne.w	800297e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002582:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800258a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800259e:	e1ee      	b.n	800297e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334d      	adds	r3, #77	@ 0x4d
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	f040 80c8 	bne.w	8002748 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	334d      	adds	r3, #77	@ 0x4d
 80025c8:	2202      	movs	r2, #2
 80025ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	331b      	adds	r3, #27
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f040 81ce 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3326      	adds	r3, #38	@ 0x26
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d16b      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3348      	adds	r3, #72	@ 0x48
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1c59      	adds	r1, r3, #1
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4403      	add	r3, r0
 800261a:	3348      	adds	r3, #72	@ 0x48
 800261c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3348      	adds	r3, #72	@ 0x48
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d943      	bls.n	80026bc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3348      	adds	r3, #72	@ 0x48
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	331b      	adds	r3, #27
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	3344      	adds	r3, #68	@ 0x44
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d809      	bhi.n	8002686 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002672:	78fa      	ldrb	r2, [r7, #3]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	331c      	adds	r3, #28
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	440a      	add	r2, r1
 800269c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	334c      	adds	r3, #76	@ 0x4c
 80026b6:	2204      	movs	r2, #4
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e014      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026bc:	78fa      	ldrb	r2, [r7, #3]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334c      	adds	r3, #76	@ 0x4c
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e009      	b.n	80026e6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	334c      	adds	r3, #76	@ 0x4c
 80026e2:	2202      	movs	r2, #2
 80026e4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3326      	adds	r3, #38	@ 0x26
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3326      	adds	r3, #38	@ 0x26
 800270c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800270e:	2b02      	cmp	r3, #2
 8002710:	f040 8136 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800272a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002732:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e11b      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	334d      	adds	r3, #77	@ 0x4d
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f040 8081 	bne.w	8002862 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334d      	adds	r3, #77	@ 0x4d
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	331b      	adds	r3, #27
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	f040 80fa 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	334c      	adds	r3, #76	@ 0x4c
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027be:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027de:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027fa:	f023 0320 	bic.w	r3, r3, #32
 80027fe:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	3326      	adds	r3, #38	@ 0x26
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3326      	adds	r3, #38	@ 0x26
 8002826:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 80a9 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002844:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800284c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e08e      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334d      	adds	r3, #77	@ 0x4d
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d143      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	1a9b      	subs	r3, r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	334d      	adds	r3, #77	@ 0x4d
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	334c      	adds	r3, #76	@ 0x4c
 800289c:	2202      	movs	r2, #2
 800289e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3326      	adds	r3, #38	@ 0x26
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	3326      	adds	r3, #38	@ 0x26
 80028c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d159      	bne.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e03f      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	@ 0x4d
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d126      	bne.n	8002964 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	334d      	adds	r3, #77	@ 0x4d
 8002926:	2202      	movs	r2, #2
 8002928:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	3344      	adds	r3, #68	@ 0x44
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c59      	adds	r1, r3, #1
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4403      	add	r3, r0
 800294a:	3344      	adds	r3, #68	@ 0x44
 800294c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	334c      	adds	r3, #76	@ 0x4c
 800295e:	2204      	movs	r2, #4
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	e00d      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	@ 0x4d
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	f000 8100 	beq.w	8002b7c <HCD_HC_IN_IRQHandler+0xcca>
 800297c:	e000      	b.n	8002980 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800297e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	334c      	adds	r3, #76	@ 0x4c
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	4619      	mov	r1, r3
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f006 fa86 	bl	8008ea8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800299c:	e0ef      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 f981 	bl	8005cae <USB_ReadChInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b2:	2b40      	cmp	r3, #64	@ 0x40
 80029b4:	d12f      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80029b6:	78fb      	ldrb	r3, [r7, #3]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c2:	461a      	mov	r2, r3
 80029c4:	2340      	movs	r3, #64	@ 0x40
 80029c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	@ 0x4d
 80029d8:	2205      	movs	r2, #5
 80029da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	331a      	adds	r3, #26
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3344      	adds	r3, #68	@ 0x44
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fef1 	bl	80067f6 <USB_HC_Halt>
 8002a14:	e0b3      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f003 f945 	bl	8005cae <USB_ReadChInterrupts>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	f040 80a7 	bne.w	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3326      	adds	r3, #38	@ 0x26
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d11b      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3344      	adds	r3, #68	@ 0x44
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	334d      	adds	r3, #77	@ 0x4d
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 febd 	bl	80067f6 <USB_HC_Halt>
 8002a7c:	e03f      	b.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3326      	adds	r3, #38	@ 0x26
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3326      	adds	r3, #38	@ 0x26
 8002aa4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d129      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3344      	adds	r3, #68	@ 0x44
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	799b      	ldrb	r3, [r3, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HCD_HC_IN_IRQHandler+0xc2a>
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d110      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	334d      	adds	r3, #77	@ 0x4d
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f003 fe7c 	bl	80067f6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d129      	bne.n	8002b68 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	331b      	adds	r3, #27
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	0151      	lsls	r1, r2, #5
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	440a      	add	r2, r1
 8002b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b46:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2310      	movs	r3, #16
 8002b78:	6093      	str	r3, [r2, #8]
 8002b7a:	e000      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b7c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 f883 	bl	8005cae <USB_ReadChInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d11b      	bne.n	8002bea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	334d      	adds	r3, #77	@ 0x4d
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 fe08 	bl	80067f6 <USB_HC_Halt>
 8002be6:	f000 bc89 	b.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 f85b 	bl	8005cae <USB_ReadChInterrupts>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	f040 8082 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	2320      	movs	r3, #32
 8002c14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	3319      	adds	r3, #25
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d124      	bne.n	8002c76 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3319      	adds	r3, #25
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	334c      	adds	r3, #76	@ 0x4c
 8002c50:	2202      	movs	r2, #2
 8002c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	2203      	movs	r2, #3
 8002c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fdc0 	bl	80067f6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	331a      	adds	r3, #26
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	f040 8437 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	331b      	adds	r3, #27
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 842b 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3326      	adds	r3, #38	@ 0x26
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d009      	beq.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	331b      	adds	r3, #27
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	334d      	adds	r3, #77	@ 0x4d
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fd82 	bl	80067f6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3344      	adds	r3, #68	@ 0x44
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e3f9      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 ffcc 	bl	8005cae <USB_ReadChInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d20:	d111      	bne.n	8002d46 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fd59 	bl	80067f6 <USB_HC_Halt>
 8002d44:	e3da      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 ffad 	bl	8005cae <USB_ReadChInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d168      	bne.n	8002e30 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3344      	adds	r3, #68	@ 0x44
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 ff97 	bl	8005cae <USB_ReadChInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d86:	2b40      	cmp	r3, #64	@ 0x40
 8002d88:	d112      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3319      	adds	r3, #25
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2340      	movs	r3, #64	@ 0x40
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	331b      	adds	r3, #27
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d019      	beq.n	8002dfa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	331b      	adds	r3, #27
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	0151      	lsls	r1, r2, #5
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	440a      	add	r2, r1
 8002df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334d      	adds	r3, #77	@ 0x4d
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f003 fce4 	bl	80067f6 <USB_HC_Halt>
 8002e2e:	e365      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 ff38 	bl	8005cae <USB_ReadChInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d139      	bne.n	8002ebc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334d      	adds	r3, #77	@ 0x4d
 8002e58:	2205      	movs	r2, #5
 8002e5a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	331a      	adds	r3, #26
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3319      	adds	r3, #25
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3344      	adds	r3, #68	@ 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fca7 	bl	80067f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2340      	movs	r3, #64	@ 0x40
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	e31f      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fef2 	bl	8005cae <USB_ReadChInterrupts>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d11a      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	334d      	adds	r3, #77	@ 0x4d
 8002ef6:	2206      	movs	r2, #6
 8002ef8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fc77 	bl	80067f6 <USB_HC_Halt>
 8002f08:	e2f8      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fecb 	bl	8005cae <USB_ReadChInterrupts>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d144      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	3344      	adds	r3, #68	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334d      	adds	r3, #77	@ 0x4d
 8002f46:	2204      	movs	r2, #4
 8002f48:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3319      	adds	r3, #25
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d114      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3318      	adds	r3, #24
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3319      	adds	r3, #25
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fc2f 	bl	80067f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	6093      	str	r3, [r2, #8]
 8002faa:	e2a7      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 fe7a 	bl	8005cae <USB_ReadChInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	f040 8083 	bne.w	80030cc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	799b      	ldrb	r3, [r3, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	334d      	adds	r3, #77	@ 0x4d
 8002fde:	2207      	movs	r2, #7
 8002fe0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fc03 	bl	80067f6 <USB_HC_Halt>
 8002ff0:	e062      	b.n	80030b8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3344      	adds	r3, #68	@ 0x44
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1c59      	adds	r1, r3, #1
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4403      	add	r3, r0
 8003012:	3344      	adds	r3, #68	@ 0x44
 8003014:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3344      	adds	r3, #68	@ 0x44
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d922      	bls.n	8003072 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3344      	adds	r3, #68	@ 0x44
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	@ 0x4c
 8003050:	2204      	movs	r2, #4
 8003052:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	334c      	adds	r3, #76	@ 0x4c
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f005 ff1c 	bl	8008ea8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003070:	e022      	b.n	80030b8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	@ 0x4c
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003086:	78fb      	ldrb	r3, [r7, #3]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800309c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030a4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2380      	movs	r3, #128	@ 0x80
 80030c8:	6093      	str	r3, [r2, #8]
 80030ca:	e217      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 fdea 	bl	8005cae <USB_ReadChInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e4:	d11b      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	@ 0x4d
 80030f6:	2209      	movs	r2, #9
 80030f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	4611      	mov	r1, r2
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fb77 	bl	80067f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003114:	461a      	mov	r2, r3
 8003116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800311a:	6093      	str	r3, [r2, #8]
 800311c:	e1ee      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f002 fdc1 	bl	8005cae <USB_ReadChInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	f040 81df 	bne.w	80034f6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2302      	movs	r3, #2
 8003148:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 8093 	bne.w	8003288 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	2201      	movs	r2, #1
 8003188:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3326      	adds	r3, #38	@ 0x26
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d00b      	beq.n	80031b8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3326      	adds	r3, #38	@ 0x26
 80031b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f040 8190 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	799b      	ldrb	r3, [r3, #6]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d115      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	333d      	adds	r3, #61	@ 0x3d
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2d8      	uxtb	r0, r3
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	333d      	adds	r3, #61	@ 0x3d
 80031e8:	4602      	mov	r2, r0
 80031ea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	799b      	ldrb	r3, [r3, #6]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 8171 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3334      	adds	r3, #52	@ 0x34
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 8165 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3334      	adds	r3, #52	@ 0x34
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4403      	add	r3, r0
 800322e:	3328      	adds	r3, #40	@ 0x28
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	440b      	add	r3, r1
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4403      	add	r3, r0
 8003244:	3328      	adds	r3, #40	@ 0x28
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	fbb1 f3f3 	udiv	r3, r1, r3
 800324c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 813f 	beq.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	333d      	adds	r3, #61	@ 0x3d
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	333d      	adds	r3, #61	@ 0x3d
 8003282:	4602      	mov	r2, r0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e127      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d120      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	334d      	adds	r3, #77	@ 0x4d
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	331b      	adds	r3, #27
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	f040 8107 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	334c      	adds	r3, #76	@ 0x4c
 80032da:	2202      	movs	r2, #2
 80032dc:	701a      	strb	r2, [r3, #0]
 80032de:	e0fb      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	334d      	adds	r3, #77	@ 0x4d
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d13a      	bne.n	800336c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334d      	adds	r3, #77	@ 0x4d
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	@ 0x4c
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	331b      	adds	r3, #27
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 80d1 	bne.w	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331b      	adds	r3, #27
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	6053      	str	r3, [r2, #4]
 800336a:	e0b5      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334d      	adds	r3, #77	@ 0x4d
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d114      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334d      	adds	r3, #77	@ 0x4d
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	334c      	adds	r3, #76	@ 0x4c
 80033a6:	2202      	movs	r2, #2
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e095      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334d      	adds	r3, #77	@ 0x4d
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d114      	bne.n	80033ec <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	334d      	adds	r3, #77	@ 0x4d
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334c      	adds	r3, #76	@ 0x4c
 80033e6:	2205      	movs	r2, #5
 80033e8:	701a      	strb	r2, [r3, #0]
 80033ea:	e075      	b.n	80034d8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334d      	adds	r3, #77	@ 0x4d
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b07      	cmp	r3, #7
 8003400:	d00a      	beq.n	8003418 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334d      	adds	r3, #77	@ 0x4d
 8003412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003414:	2b09      	cmp	r3, #9
 8003416:	d170      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334d      	adds	r3, #77	@ 0x4d
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3344      	adds	r3, #68	@ 0x44
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	3344      	adds	r3, #68	@ 0x44
 800344e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3344      	adds	r3, #68	@ 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d914      	bls.n	8003490 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3344      	adds	r3, #68	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	334c      	adds	r3, #76	@ 0x4c
 800348a:	2204      	movs	r2, #4
 800348c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800348e:	e022      	b.n	80034d6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	334c      	adds	r3, #76	@ 0x4c
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d0:	461a      	mov	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	334c      	adds	r3, #76	@ 0x4c
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f005 fcda 	bl	8008ea8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034f4:	e002      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80034fa:	bf00      	nop
  }
}
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b08a      	sub	sp, #40	@ 0x28
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	0c5b      	lsrs	r3, r3, #17
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003536:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d004      	beq.n	8003548 <HCD_RXQLVL_IRQHandler+0x46>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b05      	cmp	r3, #5
 8003542:	f000 80b6 	beq.w	80036b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003546:	e0b7      	b.n	80036b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80b3 	beq.w	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	332c      	adds	r3, #44	@ 0x2c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a7 	beq.w	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3338      	adds	r3, #56	@ 0x38
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	18d1      	adds	r1, r2, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4403      	add	r3, r0
 800358c:	3334      	adds	r3, #52	@ 0x34
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4299      	cmp	r1, r3
 8003592:	f200 8083 	bhi.w	800369c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	332c      	adds	r3, #44	@ 0x2c
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	b292      	uxth	r2, r2
 80035b0:	4619      	mov	r1, r3
 80035b2:	f002 fb11 	bl	8005bd8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	332c      	adds	r3, #44	@ 0x2c
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	18d1      	adds	r1, r2, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	332c      	adds	r3, #44	@ 0x2c
 80035dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3338      	adds	r3, #56	@ 0x38
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	18d1      	adds	r1, r2, r3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3338      	adds	r3, #56	@ 0x38
 8003604:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	4413      	add	r3, r2
 800360e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	0cdb      	lsrs	r3, r3, #19
 8003616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3328      	adds	r3, #40	@ 0x28
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4293      	cmp	r3, r2
 8003634:	d13f      	bne.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03c      	beq.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800365a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	333c      	adds	r3, #60	@ 0x3c
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2d8      	uxtb	r0, r3
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	333c      	adds	r3, #60	@ 0x3c
 8003696:	4602      	mov	r2, r0
 8003698:	701a      	strb	r2, [r3, #0]
      break;
 800369a:	e00c      	b.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334c      	adds	r3, #76	@ 0x4c
 80036ac:	2204      	movs	r2, #4
 80036ae:	701a      	strb	r2, [r3, #0]
      break;
 80036b0:	e001      	b.n	80036b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036b6:	bf00      	nop
  }
}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80036ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d10b      	bne.n	8003710 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d102      	bne.n	8003708 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f005 fbb4 	bl	8008e70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b08      	cmp	r3, #8
 8003718:	d132      	bne.n	8003780 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f043 0308 	orr.w	r3, r3, #8
 8003720:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d126      	bne.n	800377a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7a5b      	ldrb	r3, [r3, #9]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d113      	bne.n	800375c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800373a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800373e:	d106      	bne.n	800374e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2102      	movs	r1, #2
 8003746:	4618      	mov	r0, r3
 8003748:	f002 fbd6 	bl	8005ef8 <USB_InitFSLSPClkSel>
 800374c:	e011      	b.n	8003772 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fbcf 	bl	8005ef8 <USB_InitFSLSPClkSel>
 800375a:	e00a      	b.n	8003772 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	79db      	ldrb	r3, [r3, #7]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800376a:	461a      	mov	r2, r3
 800376c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003770:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 fba6 	bl	8008ec4 <HAL_HCD_PortEnabled_Callback>
 8003778:	e002      	b.n	8003780 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f005 fbb0 	bl	8008ee0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d103      	bne.n	8003792 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f043 0320 	orr.w	r3, r3, #32
 8003790:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6013      	str	r3, [r2, #0]
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e12b      	b.n	8003a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd f96c 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	@ 0x24
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800380a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800380c:	f001 fa20 	bl	8004c50 <HAL_RCC_GetPCLK1Freq>
 8003810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a81      	ldr	r2, [pc, #516]	@ (8003a1c <HAL_I2C_Init+0x274>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d807      	bhi.n	800382c <HAL_I2C_Init+0x84>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a80      	ldr	r2, [pc, #512]	@ (8003a20 <HAL_I2C_Init+0x278>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	e006      	b.n	800383a <HAL_I2C_Init+0x92>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a24 <HAL_I2C_Init+0x27c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	bf94      	ite	ls
 8003834:	2301      	movls	r3, #1
 8003836:	2300      	movhi	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0e7      	b.n	8003a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a78      	ldr	r2, [pc, #480]	@ (8003a28 <HAL_I2C_Init+0x280>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0c9b      	lsrs	r3, r3, #18
 800384c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4a6a      	ldr	r2, [pc, #424]	@ (8003a1c <HAL_I2C_Init+0x274>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d802      	bhi.n	800387c <HAL_I2C_Init+0xd4>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	3301      	adds	r3, #1
 800387a:	e009      	b.n	8003890 <HAL_I2C_Init+0xe8>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	4a69      	ldr	r2, [pc, #420]	@ (8003a2c <HAL_I2C_Init+0x284>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	099b      	lsrs	r3, r3, #6
 800388e:	3301      	adds	r3, #1
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	430b      	orrs	r3, r1
 8003896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	495c      	ldr	r1, [pc, #368]	@ (8003a1c <HAL_I2C_Init+0x274>)
 80038ac:	428b      	cmp	r3, r1
 80038ae:	d819      	bhi.n	80038e4 <HAL_I2C_Init+0x13c>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e59      	subs	r1, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80038be:	1c59      	adds	r1, r3, #1
 80038c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038c4:	400b      	ands	r3, r1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_I2C_Init+0x138>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e59      	subs	r1, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d8:	3301      	adds	r3, #1
 80038da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038de:	e051      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 80038e0:	2304      	movs	r3, #4
 80038e2:	e04f      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <HAL_I2C_Init+0x168>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	440b      	add	r3, r1
 80038fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	2b00      	cmp	r3, #0
 8003906:	bf0c      	ite	eq
 8003908:	2301      	moveq	r3, #1
 800390a:	2300      	movne	r3, #0
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e012      	b.n	8003936 <HAL_I2C_Init+0x18e>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Init+0x196>
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10e      	bne.n	8003964 <HAL_I2C_Init+0x1bc>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e58      	subs	r0, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6859      	ldr	r1, [r3, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	440b      	add	r3, r1
 8003954:	fbb0 f3f3 	udiv	r3, r0, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003962:	e00f      	b.n	8003984 <HAL_I2C_Init+0x1dc>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e58      	subs	r0, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	0099      	lsls	r1, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	6809      	ldr	r1, [r1, #0]
 8003988:	4313      	orrs	r3, r2
 800398a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6911      	ldr	r1, [r2, #16]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68d2      	ldr	r2, [r2, #12]
 80039be:	4311      	orrs	r1, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	000186a0 	.word	0x000186a0
 8003a20:	001e847f 	.word	0x001e847f
 8003a24:	003d08ff 	.word	0x003d08ff
 8003a28:	431bde83 	.word	0x431bde83
 8003a2c:	10624dd3 	.word	0x10624dd3

08003a30 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e128      	b.n	8003c94 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a90      	ldr	r2, [pc, #576]	@ (8003c9c <HAL_I2S_Init+0x26c>)
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd f86d 	bl	8000b3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a78:	f023 030f 	bic.w	r3, r3, #15
 8003a7c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2202      	movs	r2, #2
 8003a84:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d060      	beq.n	8003b50 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a96:	2310      	movs	r3, #16
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d802      	bhi.n	8003aae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f001 f9c4 	bl	8004e3c <HAL_RCCEx_GetPeriphCLKFreq>
 8003ab4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003abe:	d125      	bne.n	8003b0c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	3305      	adds	r3, #5
 8003ae6:	613b      	str	r3, [r7, #16]
 8003ae8:	e01f      	b.n	8003b2a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b06:	3305      	adds	r3, #5
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e00e      	b.n	8003b2a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	3305      	adds	r3, #5
 8003b28:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca0 <HAL_I2S_Init+0x270>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e003      	b.n	8003b58 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b50:	2302      	movs	r3, #2
 8003b52:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d902      	bls.n	8003b64 <HAL_I2S_Init+0x134>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2bff      	cmp	r3, #255	@ 0xff
 8003b62:	d907      	bls.n	8003b74 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	f043 0210 	orr.w	r2, r3, #16
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e08f      	b.n	8003c94 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	ea42 0103 	orr.w	r1, r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b92:	f023 030f 	bic.w	r3, r3, #15
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6851      	ldr	r1, [r2, #4]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68d2      	ldr	r2, [r2, #12]
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6992      	ldr	r2, [r2, #24]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bb6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d161      	bne.n	8003c84 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <HAL_I2S_Init+0x274>)
 8003bc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a37      	ldr	r2, [pc, #220]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2S_Init+0x1a4>
 8003bd0:	4b36      	ldr	r3, [pc, #216]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x1a8>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4932      	ldr	r1, [pc, #200]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003be0:	428a      	cmp	r2, r1
 8003be2:	d101      	bne.n	8003be8 <HAL_I2S_Init+0x1b8>
 8003be4:	4a31      	ldr	r2, [pc, #196]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003be6:	e001      	b.n	8003bec <HAL_I2S_Init+0x1bc>
 8003be8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003bec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bf0:	f023 030f 	bic.w	r3, r3, #15
 8003bf4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2S_Init+0x1d4>
 8003c00:	4b2a      	ldr	r3, [pc, #168]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c02:	e001      	b.n	8003c08 <HAL_I2S_Init+0x1d8>
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c08:	2202      	movs	r2, #2
 8003c0a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <HAL_I2S_Init+0x1ea>
 8003c16:	4b25      	ldr	r3, [pc, #148]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c18:	e001      	b.n	8003c1e <HAL_I2S_Init+0x1ee>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c2a:	d003      	beq.n	8003c34 <HAL_I2S_Init+0x204>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e001      	b.n	8003c40 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c54:	4313      	orrs	r3, r2
 8003c56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c6c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca8 <HAL_I2S_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_I2S_Init+0x24c>
 8003c78:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_I2S_Init+0x27c>)
 8003c7a:	e001      	b.n	8003c80 <HAL_I2S_Init+0x250>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c80:	897a      	ldrh	r2, [r7, #10]
 8003c82:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3720      	adds	r7, #32
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08003da7 	.word	0x08003da7
 8003ca0:	cccccccd 	.word	0xcccccccd
 8003ca4:	08003ebd 	.word	0x08003ebd
 8003ca8:	40003800 	.word	0x40003800
 8003cac:	40003400 	.word	0x40003400

08003cb0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7ff ffb8 	bl	8003cb0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10e      	bne.n	8003d9e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d8e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff93 	bl	8003cc4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d13a      	bne.n	8003e38 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d109      	bne.n	8003de0 <I2S_IRQHandler+0x3a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd6:	2b40      	cmp	r3, #64	@ 0x40
 8003dd8:	d102      	bne.n	8003de0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffb4 	bl	8003d48 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de6:	2b40      	cmp	r3, #64	@ 0x40
 8003de8:	d126      	bne.n	8003e38 <I2S_IRQHandler+0x92>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d11f      	bne.n	8003e38 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e06:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ff50 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d136      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d109      	bne.n	8003e62 <I2S_IRQHandler+0xbc>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d102      	bne.n	8003e62 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff ff45 	bl	8003cec <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d122      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d11b      	bne.n	8003eb2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e88:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	f043 0204 	orr.w	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff ff13 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eb2:	bf00      	nop
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a92      	ldr	r2, [pc, #584]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ed6:	4b92      	ldr	r3, [pc, #584]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed8:	e001      	b.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a8b      	ldr	r2, [pc, #556]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef6:	e001      	b.n	8003efc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f08:	d004      	beq.n	8003f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 8099 	bne.w	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f925 	bl	8004178 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9c8 	bl	80042d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d13a      	bne.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6e      	ldr	r2, [pc, #440]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f66:	4b6e      	ldr	r3, [pc, #440]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f68:	e001      	b.n	8003f6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4969      	ldr	r1, [pc, #420]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f76:	428b      	cmp	r3, r1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f7a:	4b69      	ldr	r3, [pc, #420]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7c:	e001      	b.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fe88 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	f040 80c3 	bne.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80bd 	beq.w	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a49      	ldr	r2, [pc, #292]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ffa:	4b49      	ldr	r3, [pc, #292]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffc:	e001      	b.n	8004002 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4944      	ldr	r1, [pc, #272]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800400e:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800401a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fe4a 	bl	8003cd8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004044:	e089      	b.n	800415a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f8be 	bl	80041dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f8fd 	bl	8004274 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d12f      	bne.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02a      	beq.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1e      	ldr	r2, [pc, #120]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d101      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040aa:	e001      	b.n	80040b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4919      	ldr	r1, [pc, #100]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b8:	428b      	cmp	r3, r1
 80040ba:	d101      	bne.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040bc:	4b18      	ldr	r3, [pc, #96]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040be:	e001      	b.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f043 0202 	orr.w	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fdfa 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d136      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d031      	beq.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a07      	ldr	r2, [pc, #28]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004102:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004104:	e001      	b.n	800410a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004106:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4902      	ldr	r1, [pc, #8]	@ (800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004112:	428b      	cmp	r3, r1
 8004114:	d106      	bne.n	8004124 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004116:	4b02      	ldr	r3, [pc, #8]	@ (8004120 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004118:	e006      	b.n	8004128 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800411a:	bf00      	nop
 800411c:	40003800 	.word	0x40003800
 8004120:	40003400 	.word	0x40003400
 8004124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004128:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800412c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800413c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0204 	orr.w	r2, r3, #4
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fdc0 	bl	8003cd8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004158:	e000      	b.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800415a:	bf00      	nop
}
 800415c:	bf00      	nop
 800415e:	3720      	adds	r7, #32
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c99      	adds	r1, r3, #2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6251      	str	r1, [r2, #36]	@ 0x24
 800418a:	881a      	ldrh	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d113      	bne.n	80041d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ffc9 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e8:	1c99      	adds	r1, r3, #2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ee:	8819      	ldrh	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <I2SEx_TxISR_I2SExt+0x22>
 80041fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 80041fc:	e001      	b.n	8004202 <I2SEx_TxISR_I2SExt+0x26>
 80041fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004202:	460a      	mov	r2, r1
 8004204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d121      	bne.n	8004262 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a12      	ldr	r2, [pc, #72]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d101      	bne.n	800422c <I2SEx_TxISR_I2SExt+0x50>
 8004228:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 800422a:	e001      	b.n	8004230 <I2SEx_TxISR_I2SExt+0x54>
 800422c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	490d      	ldr	r1, [pc, #52]	@ (800426c <I2SEx_TxISR_I2SExt+0x90>)
 8004238:	428b      	cmp	r3, r1
 800423a:	d101      	bne.n	8004240 <I2SEx_TxISR_I2SExt+0x64>
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <I2SEx_TxISR_I2SExt+0x94>)
 800423e:	e001      	b.n	8004244 <I2SEx_TxISR_I2SExt+0x68>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004244:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004248:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff81 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40003800 	.word	0x40003800
 8004270:	40003400 	.word	0x40003400

08004274 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68d8      	ldr	r0, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	1c99      	adds	r1, r3, #2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800428c:	b282      	uxth	r2, r0
 800428e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d113      	bne.n	80042d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff4a 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a20      	ldr	r2, [pc, #128]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <I2SEx_RxISR_I2SExt+0x16>
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 80042ec:	e001      	b.n	80042f2 <I2SEx_RxISR_I2SExt+0x1a>
 80042ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042f2:	68d8      	ldr	r0, [r3, #12]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	1c99      	adds	r1, r3, #2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042fe:	b282      	uxth	r2, r0
 8004300:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d121      	bne.n	800435e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a12      	ldr	r2, [pc, #72]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d101      	bne.n	8004328 <I2SEx_RxISR_I2SExt+0x50>
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 8004326:	e001      	b.n	800432c <I2SEx_RxISR_I2SExt+0x54>
 8004328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	490d      	ldr	r1, [pc, #52]	@ (8004368 <I2SEx_RxISR_I2SExt+0x90>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d101      	bne.n	800433c <I2SEx_RxISR_I2SExt+0x64>
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <I2SEx_RxISR_I2SExt+0x94>)
 800433a:	e001      	b.n	8004340 <I2SEx_RxISR_I2SExt+0x68>
 800433c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004340:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004344:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff03 	bl	8004164 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40003800 	.word	0x40003800
 800436c:	40003400 	.word	0x40003400

08004370 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e267      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d075      	beq.n	800447a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800438e:	4b88      	ldr	r3, [pc, #544]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00c      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b85      	ldr	r3, [pc, #532]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d112      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a6:	4b82      	ldr	r3, [pc, #520]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4b7e      	ldr	r3, [pc, #504]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d05b      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d157      	bne.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e242      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043d4:	d106      	bne.n	80043e4 <HAL_RCC_OscConfig+0x74>
 80043d6:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a75      	ldr	r2, [pc, #468]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x98>
 80043ee:	4b70      	ldr	r3, [pc, #448]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6f      	ldr	r2, [pc, #444]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6d      	ldr	r3, [pc, #436]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6c      	ldr	r2, [pc, #432]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xb0>
 8004408:	4b69      	ldr	r3, [pc, #420]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fd92 	bl	8000f50 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fc fd8e 	bl	8000f50 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	@ 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e207      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b5b      	ldr	r3, [pc, #364]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xc0>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fc fd7e 	bl	8000f50 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fc fd7a 	bl	8000f50 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	@ 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1f3      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004486:	4b4a      	ldr	r3, [pc, #296]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b41      	ldr	r3, [pc, #260]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1c7      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4937      	ldr	r1, [pc, #220]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <HAL_RCC_OscConfig+0x244>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fc fd33 	bl	8000f50 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fc fd2f 	bl	8000f50 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e1a8      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b2b      	ldr	r3, [pc, #172]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b28      	ldr	r3, [pc, #160]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4925      	ldr	r1, [pc, #148]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b24      	ldr	r3, [pc, #144]	@ (80045b4 <HAL_RCC_OscConfig+0x244>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fc fd12 	bl	8000f50 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004530:	f7fc fd0e 	bl	8000f50 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e187      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d036      	beq.n	80045c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004568:	f7fc fcf2 	bl	8000f50 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004570:	f7fc fcee 	bl	8000f50 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e167      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_RCC_OscConfig+0x240>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x200>
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_OscConfig+0x248>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fc fcdb 	bl	8000f50 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	e00e      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459e:	f7fc fcd7 	bl	8000f50 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d907      	bls.n	80045bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e150      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	42470000 	.word	0x42470000
 80045b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045bc:	4b88      	ldr	r3, [pc, #544]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ea      	bne.n	800459e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 8097 	beq.w	8004704 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045da:	4b81      	ldr	r3, [pc, #516]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	4b7d      	ldr	r3, [pc, #500]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	4a7c      	ldr	r2, [pc, #496]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f6:	4b7a      	ldr	r3, [pc, #488]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d118      	bne.n	8004644 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004612:	4b74      	ldr	r3, [pc, #464]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a73      	ldr	r2, [pc, #460]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800461c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461e:	f7fc fc97 	bl	8000f50 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004626:	f7fc fc93 	bl	8000f50 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e10c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004638:	4b6a      	ldr	r3, [pc, #424]	@ (80047e4 <HAL_RCC_OscConfig+0x474>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x2ea>
 800464c:	4b64      	ldr	r3, [pc, #400]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a63      	ldr	r2, [pc, #396]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10c      	bne.n	800467c <HAL_RCC_OscConfig+0x30c>
 8004662:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 0304 	orr.w	r3, r3, #4
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
 800466e:	4b5c      	ldr	r3, [pc, #368]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004672:	4a5b      	ldr	r2, [pc, #364]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	6713      	str	r3, [r2, #112]	@ 0x70
 800467a:	e00b      	b.n	8004694 <HAL_RCC_OscConfig+0x324>
 800467c:	4b58      	ldr	r3, [pc, #352]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a57      	ldr	r2, [pc, #348]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
 8004688:	4b55      	ldr	r3, [pc, #340]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468c:	4a54      	ldr	r2, [pc, #336]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800468e:	f023 0304 	bic.w	r3, r3, #4
 8004692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fc fc58 	bl	8000f50 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fc fc54 	bl	8000f50 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0cb      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ee      	beq.n	80046a4 <HAL_RCC_OscConfig+0x334>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c8:	f7fc fc42 	bl	8000f50 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d0:	f7fc fc3e 	bl	8000f50 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046de:	4293      	cmp	r3, r2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0b5      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e6:	4b3e      	ldr	r3, [pc, #248]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1ee      	bne.n	80046d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f8:	4b39      	ldr	r3, [pc, #228]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	4a38      	ldr	r2, [pc, #224]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80046fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a1 	beq.w	8004850 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 030c 	and.w	r3, r3, #12
 8004716:	2b08      	cmp	r3, #8
 8004718:	d05c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d141      	bne.n	80047a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004722:	4b31      	ldr	r3, [pc, #196]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7fc fc12 	bl	8000f50 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fc fc0e 	bl	8000f50 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e087      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	491b      	ldr	r1, [pc, #108]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b1b      	ldr	r3, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc fbe7 	bl	8000f50 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fc fbe3 	bl	8000f50 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e05c      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f0      	beq.n	8004786 <HAL_RCC_OscConfig+0x416>
 80047a4:	e054      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x478>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fbd0 	bl	8000f50 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fc fbcc 	bl	8000f50 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e045      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCC_OscConfig+0x470>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x444>
 80047d2:	e03d      	b.n	8004850 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e038      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCC_OscConfig+0x4ec>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d028      	beq.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d121      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d11a      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d107      	bne.n	800484c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0cc      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004874:	4b68      	ldr	r3, [pc, #416]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d90c      	bls.n	800489c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b65      	ldr	r3, [pc, #404]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488a:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0b8      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b4:	4b59      	ldr	r3, [pc, #356]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a58      	ldr	r2, [pc, #352]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048cc:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a52      	ldr	r2, [pc, #328]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d8:	4b50      	ldr	r3, [pc, #320]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	494d      	ldr	r1, [pc, #308]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d044      	beq.n	8004980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fe:	4b47      	ldr	r3, [pc, #284]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d003      	beq.n	800491e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e067      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493e:	4b37      	ldr	r3, [pc, #220]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f023 0203 	bic.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4934      	ldr	r1, [pc, #208]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc fafe 	bl	8000f50 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	e00a      	b.n	800496e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004958:	f7fc fafa 	bl	8000f50 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e04f      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 020c 	and.w	r2, r3, #12
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	429a      	cmp	r2, r3
 800497e:	d1eb      	bne.n	8004958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004980:	4b25      	ldr	r3, [pc, #148]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d20c      	bcs.n	80049a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b20      	ldr	r3, [pc, #128]	@ (8004a18 <HAL_RCC_ClockConfig+0x1b8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e032      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b4:	4b19      	ldr	r3, [pc, #100]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4916      	ldr	r1, [pc, #88]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049d2:	4b12      	ldr	r3, [pc, #72]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	490e      	ldr	r1, [pc, #56]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049e6:	f000 f821 	bl	8004a2c <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	490a      	ldr	r1, [pc, #40]	@ (8004a20 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	fa22 f303 	lsr.w	r3, r2, r3
 80049fe:	4a09      	ldr	r2, [pc, #36]	@ (8004a24 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a02:	4b09      	ldr	r3, [pc, #36]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc fa5e 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	0800959c 	.word	0x0800959c
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004

08004a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a30:	b094      	sub	sp, #80	@ 0x50
 8004a32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4b79      	ldr	r3, [pc, #484]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0x40>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	f200 80e1 	bhi.w	8004c18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x34>
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5e:	e0db      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a60:	4b73      	ldr	r3, [pc, #460]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a64:	e0db      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a66:	4b73      	ldr	r3, [pc, #460]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a6a:	e0d8      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a76:	4b6d      	ldr	r3, [pc, #436]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d063      	beq.n	8004b4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a82:	4b6a      	ldr	r3, [pc, #424]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	099b      	lsrs	r3, r3, #6
 8004a88:	2200      	movs	r2, #0
 8004a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a96:	2300      	movs	r3, #0
 8004a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	0159      	lsls	r1, r3, #5
 8004aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab0:	0150      	lsls	r0, r2, #5
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	1a51      	subs	r1, r2, r1
 8004aba:	6139      	str	r1, [r7, #16]
 8004abc:	4629      	mov	r1, r5
 8004abe:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	018b      	lsls	r3, r1, #6
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ada:	4651      	mov	r1, sl
 8004adc:	018a      	lsls	r2, r1, #6
 8004ade:	4651      	mov	r1, sl
 8004ae0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ae4:	4659      	mov	r1, fp
 8004ae6:	eb63 0901 	sbc.w	r9, r3, r1
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004afe:	4690      	mov	r8, r2
 8004b00:	4699      	mov	r9, r3
 8004b02:	4623      	mov	r3, r4
 8004b04:	eb18 0303 	adds.w	r3, r8, r3
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	462b      	mov	r3, r5
 8004b0c:	eb49 0303 	adc.w	r3, r9, r3
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	024b      	lsls	r3, r1, #9
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b28:	4621      	mov	r1, r4
 8004b2a:	024a      	lsls	r2, r1, #9
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3c:	f7fb fb44 	bl	80001c8 <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b48:	e058      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4a:	4b38      	ldr	r3, [pc, #224]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	2200      	movs	r2, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	4611      	mov	r1, r2
 8004b56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b76:	0150      	lsls	r0, r2, #5
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b82:	4649      	mov	r1, r9
 8004b84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ba0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ba4:	f04f 0200 	mov.w	r2, #0
 8004ba8:	f04f 0300 	mov.w	r3, #0
 8004bac:	00eb      	lsls	r3, r5, #3
 8004bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb2:	00e2      	lsls	r2, r4, #3
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	18e3      	adds	r3, r4, r3
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	eb45 0303 	adc.w	r3, r5, r3
 8004bc4:	607b      	str	r3, [r7, #4]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	028b      	lsls	r3, r1, #10
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bdc:	4621      	mov	r1, r4
 8004bde:	028a      	lsls	r2, r1, #10
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be6:	2200      	movs	r2, #0
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	61fa      	str	r2, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	f7fb faea 	bl	80001c8 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	3301      	adds	r3, #1
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3750      	adds	r7, #80	@ 0x50
 8004c24:	46bd      	mov	sp, r7
 8004c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	007a1200 	.word	0x007a1200

08004c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	@ (8004c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000000 	.word	0x20000000

08004c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c54:	f7ff fff0 	bl	8004c38 <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0a9b      	lsrs	r3, r3, #10
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4903      	ldr	r1, [pc, #12]	@ (8004c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	080095ac 	.word	0x080095ac

08004c78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d035      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ca0:	4b62      	ldr	r3, [pc, #392]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca6:	f7fc f953 	bl	8000f50 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cae:	f7fc f94f 	bl	8000f50 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e0b0      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	019a      	lsls	r2, r3, #6
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	071b      	lsls	r3, r3, #28
 8004cd8:	4955      	ldr	r1, [pc, #340]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ce0:	4b52      	ldr	r3, [pc, #328]	@ (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc f933 	bl	8000f50 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cee:	f7fc f92f 	bl	8000f50 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e090      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d00:	4b4b      	ldr	r3, [pc, #300]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8083 	beq.w	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	4b44      	ldr	r3, [pc, #272]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	4a43      	ldr	r2, [pc, #268]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d2a:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d36:	4b3f      	ldr	r3, [pc, #252]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a3e      	ldr	r2, [pc, #248]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d42:	f7fc f905 	bl	8000f50 <HAL_GetTick>
 8004d46:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4a:	f7fc f901 	bl	8000f50 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e062      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d5c:	4b35      	ldr	r3, [pc, #212]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d68:	4b31      	ldr	r3, [pc, #196]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d70:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d028      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d86:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d90:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d96:	4b28      	ldr	r3, [pc, #160]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d9c:	4a24      	ldr	r2, [pc, #144]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004da2:	4b23      	ldr	r3, [pc, #140]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d114      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fc f8cf 	bl	8000f50 <HAL_GetTick>
 8004db2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fc f8cb 	bl	8000f50 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e02a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	4b18      	ldr	r3, [pc, #96]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ee      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de4:	d10d      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004de6:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfa:	490d      	ldr	r1, [pc, #52]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]
 8004e00:	e005      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e08:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e0c:	6093      	str	r3, [r2, #8]
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1a:	4905      	ldr	r1, [pc, #20]	@ (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	42470068 	.word	0x42470068
 8004e30:	40023800 	.word	0x40023800
 8004e34:	40007000 	.word	0x40007000
 8004e38:	42470e40 	.word	0x42470e40

08004e3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d13f      	bne.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e70:	d12f      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e72:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e74:	617b      	str	r3, [r7, #20]
          break;
 8004e76:	e02f      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e84:	d108      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e86:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e8e:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e007      	b.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e98:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea0:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ea8:	4b10      	ldr	r3, [pc, #64]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eae:	099b      	lsrs	r3, r3, #6
 8004eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec2:	0f1b      	lsrs	r3, r3, #28
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ece:	617b      	str	r3, [r7, #20]
          break;
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]
          break;
 8004ed6:	bf00      	nop
        }
      }
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004eda:	bf00      	nop
    }
  }
  return frequency;
 8004edc:	697b      	ldr	r3, [r7, #20]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	00bb8000 	.word	0x00bb8000
 8004ef4:	007a1200 	.word	0x007a1200
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e07b      	b.n	8005006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d108      	bne.n	8004f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f1e:	d009      	beq.n	8004f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	61da      	str	r2, [r3, #28]
 8004f26:	e005      	b.n	8004f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fb fe74 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f86:	431a      	orrs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb8:	ea42 0103 	orr.w	r1, r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0104 	and.w	r1, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	f003 0210 	and.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e041      	b.n	80050a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fb fe49 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3304      	adds	r3, #4
 800504a:	4619      	mov	r1, r3
 800504c:	4610      	mov	r0, r2
 800504e:	f000 fa7d 	bl	800554c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d001      	beq.n	80050c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e04e      	b.n	8005162 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	@ (8005170 <HAL_TIM_Base_Start_IT+0xc4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d022      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ee:	d01d      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005174 <HAL_TIM_Base_Start_IT+0xc8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d018      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <HAL_TIM_Base_Start_IT+0xcc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <HAL_TIM_Base_Start_IT+0xd0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00e      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <HAL_TIM_Base_Start_IT+0xd4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d009      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <HAL_TIM_Base_Start_IT+0xd8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d004      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x80>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_Base_Start_IT+0xdc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d111      	bne.n	8005150 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b06      	cmp	r3, #6
 800513c:	d010      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	e007      	b.n	8005160 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40010000 	.word	0x40010000
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40000c00 	.word	0x40000c00
 8005180:	40010400 	.word	0x40010400
 8005184:	40014000 	.word	0x40014000
 8005188:	40001800 	.word	0x40001800

0800518c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d020      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0202 	mvn.w	r2, #2
 80051c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f999 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f98b 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f99c 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d020      	beq.n	800523c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0204 	mvn.w	r2, #4
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2202      	movs	r2, #2
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f973 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f965 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f976 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0208 	mvn.w	r2, #8
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f94d 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f93f 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f950 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0310 	and.w	r3, r3, #16
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0210 	mvn.w	r2, #16
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2208      	movs	r2, #8
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f927 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f919 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f92a 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0201 	mvn.w	r2, #1
 80052f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fb fb60 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fae4 	bl	80058e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00c      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8fb 	bl	8005536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00c      	beq.n	8005364 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 0320 	and.w	r3, r3, #32
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0220 	mvn.w	r2, #32
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fab6 	bl	80058d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIM_ConfigClockSource+0x1c>
 8005384:	2302      	movs	r3, #2
 8005386:	e0b4      	b.n	80054f2 <HAL_TIM_ConfigClockSource+0x186>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c0:	d03e      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0xd4>
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053c6:	f200 8087 	bhi.w	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	f000 8086 	beq.w	80054de <HAL_TIM_ConfigClockSource+0x172>
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d87f      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b70      	cmp	r3, #112	@ 0x70
 80053da:	d01a      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xa6>
 80053dc:	2b70      	cmp	r3, #112	@ 0x70
 80053de:	d87b      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b60      	cmp	r3, #96	@ 0x60
 80053e2:	d050      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x11a>
 80053e4:	2b60      	cmp	r3, #96	@ 0x60
 80053e6:	d877      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b50      	cmp	r3, #80	@ 0x50
 80053ea:	d03c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xfa>
 80053ec:	2b50      	cmp	r3, #80	@ 0x50
 80053ee:	d873      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d058      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x13a>
 80053f4:	2b40      	cmp	r3, #64	@ 0x40
 80053f6:	d86f      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b30      	cmp	r3, #48	@ 0x30
 80053fa:	d064      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	2b30      	cmp	r3, #48	@ 0x30
 80053fe:	d86b      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b20      	cmp	r3, #32
 8005402:	d060      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005404:	2b20      	cmp	r3, #32
 8005406:	d867      	bhi.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d05c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x15a>
 800540c:	2b10      	cmp	r3, #16
 800540e:	d05a      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005410:	e062      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005422:	f000 f9b9 	bl	8005798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	609a      	str	r2, [r3, #8]
      break;
 800543e:	e04f      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005450:	f000 f9a2 	bl	8005798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005462:	609a      	str	r2, [r3, #8]
      break;
 8005464:	e03c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005472:	461a      	mov	r2, r3
 8005474:	f000 f916 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2150      	movs	r1, #80	@ 0x50
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f96f 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 8005484:	e02c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005492:	461a      	mov	r2, r3
 8005494:	f000 f935 	bl	8005702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2160      	movs	r1, #96	@ 0x60
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f95f 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054a4:	e01c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 f8f6 	bl	80056a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2140      	movs	r1, #64	@ 0x40
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f94f 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054c4:	e00c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f000 f946 	bl	8005762 <TIM_ITRx_SetConfig>
      break;
 80054d6:	e003      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      break;
 80054dc:	e000      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a46      	ldr	r2, [pc, #280]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800556a:	d00f      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a43      	ldr	r2, [pc, #268]	@ (800567c <TIM_Base_SetConfig+0x130>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00b      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a42      	ldr	r2, [pc, #264]	@ (8005680 <TIM_Base_SetConfig+0x134>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d007      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a41      	ldr	r2, [pc, #260]	@ (8005684 <TIM_Base_SetConfig+0x138>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a40      	ldr	r2, [pc, #256]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d108      	bne.n	800559e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a35      	ldr	r2, [pc, #212]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d02b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ac:	d027      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a32      	ldr	r2, [pc, #200]	@ (800567c <TIM_Base_SetConfig+0x130>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d023      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a31      	ldr	r2, [pc, #196]	@ (8005680 <TIM_Base_SetConfig+0x134>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d01f      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a30      	ldr	r2, [pc, #192]	@ (8005684 <TIM_Base_SetConfig+0x138>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d017      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2e      	ldr	r2, [pc, #184]	@ (800568c <TIM_Base_SetConfig+0x140>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005690 <TIM_Base_SetConfig+0x144>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2c      	ldr	r2, [pc, #176]	@ (8005694 <TIM_Base_SetConfig+0x148>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	@ (8005698 <TIM_Base_SetConfig+0x14c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2a      	ldr	r2, [pc, #168]	@ (800569c <TIM_Base_SetConfig+0x150>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a29      	ldr	r2, [pc, #164]	@ (80056a0 <TIM_Base_SetConfig+0x154>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d108      	bne.n	8005610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a10      	ldr	r2, [pc, #64]	@ (8005678 <TIM_Base_SetConfig+0x12c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_Base_SetConfig+0xf8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a12      	ldr	r2, [pc, #72]	@ (8005688 <TIM_Base_SetConfig+0x13c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d103      	bne.n	800564c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]
  }
}
 800566a:	bf00      	nop
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800
 8005698:	40001800 	.word	0x40001800
 800569c:	40001c00 	.word	0x40001c00
 80056a0:	40002000 	.word	0x40002000

080056a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0201 	bic.w	r2, r3, #1
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f023 030a 	bic.w	r3, r3, #10
 80056e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	621a      	str	r2, [r3, #32]
}
 80056f6:	bf00      	nop
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005702:	b480      	push	{r7}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0210 	bic.w	r2, r3, #16
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800572c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800573e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	f043 0307 	orr.w	r3, r3, #7
 8005784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	021a      	lsls	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e05a      	b.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	4313      	orrs	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d01d      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1d      	ldr	r2, [pc, #116]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1b      	ldr	r2, [pc, #108]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1a      	ldr	r2, [pc, #104]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a17      	ldr	r2, [pc, #92]	@ (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a15      	ldr	r2, [pc, #84]	@ (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10c      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	4313      	orrs	r3, r2
 800588a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40001800 	.word	0x40001800

080058d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f8:	b084      	sub	sp, #16
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	f107 001c 	add.w	r0, r7, #28
 8005906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800590a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800590e:	2b01      	cmp	r3, #1
 8005910:	d123      	bne.n	800595a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800593a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9dc 	bl	8005d0c <USB_CoreReset>
 8005954:	4603      	mov	r3, r0
 8005956:	73fb      	strb	r3, [r7, #15]
 8005958:	e01b      	b.n	8005992 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9d0 	bl	8005d0c <USB_CoreReset>
 800596c:	4603      	mov	r3, r0
 800596e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005970:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	639a      	str	r2, [r3, #56]	@ 0x38
 8005984:	e005      	b.n	8005992 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005992:	7fbb      	ldrb	r3, [r7, #30]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d10b      	bne.n	80059b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f043 0206 	orr.w	r2, r3, #6
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059bc:	b004      	add	sp, #16
 80059be:	4770      	bx	lr

080059c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 0201 	bic.w	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d115      	bne.n	8005a52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a32:	200a      	movs	r0, #10
 8005a34:	f7fb fa98 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	330a      	adds	r3, #10
 8005a3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f956 	bl	8005cf0 <USB_GetMode>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d01e      	beq.n	8005a88 <USB_SetCurrentMode+0x84>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a4e:	d9f0      	bls.n	8005a32 <USB_SetCurrentMode+0x2e>
 8005a50:	e01a      	b.n	8005a88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d115      	bne.n	8005a84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a64:	200a      	movs	r0, #10
 8005a66:	f7fb fa7f 	bl	8000f68 <HAL_Delay>
      ms += 10U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	330a      	adds	r3, #10
 8005a6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f93d 	bl	8005cf0 <USB_GetMode>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <USB_SetCurrentMode+0x84>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a80:	d9f0      	bls.n	8005a64 <USB_SetCurrentMode+0x60>
 8005a82:	e001      	b.n	8005a88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e005      	b.n	8005a94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a8c:	d101      	bne.n	8005a92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab6:	d901      	bls.n	8005abc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e01b      	b.n	8005af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	daf2      	bge.n	8005aaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	019b      	lsls	r3, r3, #6
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae0:	d901      	bls.n	8005ae6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e006      	b.n	8005af4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d0f0      	beq.n	8005ad4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e018      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	daf2      	bge.n	8005b0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2210      	movs	r2, #16
 8005b2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b3c:	d901      	bls.n	8005b42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e006      	b.n	8005b50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b10      	cmp	r3, #16
 8005b4c:	d0f0      	beq.n	8005b30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b089      	sub	sp, #36	@ 0x24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	71fb      	strb	r3, [r7, #7]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d123      	bne.n	8005bca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b82:	88bb      	ldrh	r3, [r7, #4]
 8005b84:	3303      	adds	r3, #3
 8005b86:	089b      	lsrs	r3, r3, #2
 8005b88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e018      	b.n	8005bc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	031a      	lsls	r2, r3, #12
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3301      	adds	r3, #1
 8005bae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3e2      	bcc.n	8005b90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3724      	adds	r7, #36	@ 0x24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b08b      	sub	sp, #44	@ 0x2c
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bfe:	2300      	movs	r3, #0
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	e014      	b.n	8005c2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	3301      	adds	r3, #1
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	3301      	adds	r3, #1
 8005c1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	3301      	adds	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	623b      	str	r3, [r7, #32]
 8005c2e:	6a3a      	ldr	r2, [r7, #32]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d3e6      	bcc.n	8005c04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c36:	8bfb      	ldrh	r3, [r7, #30]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01e      	beq.n	8005c7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c46:	461a      	mov	r2, r3
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	701a      	strb	r2, [r3, #0]
      i++;
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	3301      	adds	r3, #1
 8005c66:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c6e:	8bfb      	ldrh	r3, [r7, #30]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c74:	8bfb      	ldrh	r3, [r7, #30]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1ea      	bne.n	8005c50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	372c      	adds	r7, #44	@ 0x2c
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d24:	d901      	bls.n	8005d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e01b      	b.n	8005d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	daf2      	bge.n	8005d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d4e:	d901      	bls.n	8005d54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e006      	b.n	8005d62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d0f0      	beq.n	8005d42 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
	...

08005d70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d70:	b084      	sub	sp, #16
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d90:	461a      	mov	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d119      	bne.n	8005dfa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10a      	bne.n	8005de4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ddc:	f043 0304 	orr.w	r3, r3, #4
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e014      	b.n	8005e0e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005df2:	f023 0304 	bic.w	r3, r3, #4
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e009      	b.n	8005e0e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e0e:	2110      	movs	r1, #16
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff fe43 	bl	8005a9c <USB_FlushTxFifo>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe6d 	bl	8005b00 <USB_FlushRxFifo>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e015      	b.n	8005e62 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e48:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e56:	461a      	mov	r2, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e66:	461a      	mov	r2, r3
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d3e3      	bcc.n	8005e36 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e7a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <USB_HostInit+0x170>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d10b      	bne.n	8005e9c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ee4 <USB_HostInit+0x174>)
 8005e90:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a14      	ldr	r2, [pc, #80]	@ (8005ee8 <USB_HostInit+0x178>)
 8005e96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e9a:	e009      	b.n	8005eb0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2280      	movs	r2, #128	@ 0x80
 8005ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a11      	ldr	r2, [pc, #68]	@ (8005eec <USB_HostInit+0x17c>)
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a11      	ldr	r2, [pc, #68]	@ (8005ef0 <USB_HostInit+0x180>)
 8005eac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	f043 0210 	orr.w	r2, r3, #16
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <USB_HostInit+0x184>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005edc:	b004      	add	sp, #16
 8005ede:	4770      	bx	lr
 8005ee0:	40040000 	.word	0x40040000
 8005ee4:	01000200 	.word	0x01000200
 8005ee8:	00e00300 	.word	0x00e00300
 8005eec:	00600080 	.word	0x00600080
 8005ef0:	004000e0 	.word	0x004000e0
 8005ef4:	a3200008 	.word	0xa3200008

08005ef8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f30:	4313      	orrs	r3, r2
 8005f32:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d107      	bne.n	8005f4a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f40:	461a      	mov	r2, r3
 8005f42:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f46:	6053      	str	r3, [r2, #4]
 8005f48:	e00c      	b.n	8005f64 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d107      	bne.n	8005f60 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f56:	461a      	mov	r2, r3
 8005f58:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f5c:	6053      	str	r3, [r2, #4]
 8005f5e:	e001      	b.n	8005f64 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005fa2:	2064      	movs	r0, #100	@ 0x64
 8005fa4:	f7fa ffe0 	bl	8000f68 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	f7fa ffd6 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d109      	bne.n	800600a <USB_DriveVbus+0x44>
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d106      	bne.n	800600a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006004:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006008:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006014:	d109      	bne.n	800602a <USB_DriveVbus+0x64>
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006024:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006028:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0c5b      	lsrs	r3, r3, #17
 8006056:	f003 0303 	and.w	r3, r3, #3
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	b29b      	uxth	r3, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4603      	mov	r3, r0
 8006098:	70fb      	strb	r3, [r7, #3]
 800609a:	460b      	mov	r3, r1
 800609c:	70bb      	strb	r3, [r7, #2]
 800609e:	4613      	mov	r3, r2
 80060a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b6:	461a      	mov	r2, r3
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	d87c      	bhi.n	80061c0 <USB_HC_Init+0x138>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <USB_HC_Init+0x44>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060dd 	.word	0x080060dd
 80060d0:	08006183 	.word	0x08006183
 80060d4:	080060dd 	.word	0x080060dd
 80060d8:	08006145 	.word	0x08006145
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e8:	461a      	mov	r2, r3
 80060ea:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	da10      	bge.n	800611a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	440a      	add	r2, r1
 800610e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006116:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006118:	e055      	b.n	80061c6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a6f      	ldr	r2, [pc, #444]	@ (80062dc <USB_HC_Init+0x254>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d151      	bne.n	80061c6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	440a      	add	r2, r1
 8006138:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800613c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006140:	60d3      	str	r3, [r2, #12]
      break;
 8006142:	e040      	b.n	80061c6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006144:	78fb      	ldrb	r3, [r7, #3]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006150:	461a      	mov	r2, r3
 8006152:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006156:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006158:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	da34      	bge.n	80061ca <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	4413      	add	r3, r2
 8006168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	440a      	add	r2, r1
 8006176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800617a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800617e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006180:	e023      	b.n	80061ca <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618e:	461a      	mov	r2, r3
 8006190:	f240 2325 	movw	r3, #549	@ 0x225
 8006194:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006196:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	da17      	bge.n	80061ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061b8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061be:	e006      	b.n	80061ce <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	77fb      	strb	r3, [r7, #31]
      break;
 80061c4:	e004      	b.n	80061d0 <USB_HC_Init+0x148>
      break;
 80061c6:	bf00      	nop
 80061c8:	e002      	b.n	80061d0 <USB_HC_Init+0x148>
      break;
 80061ca:	bf00      	nop
 80061cc:	e000      	b.n	80061d0 <USB_HC_Init+0x148>
      break;
 80061ce:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061dc:	461a      	mov	r2, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061fc:	f043 0302 	orr.w	r3, r3, #2
 8006200:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	2101      	movs	r1, #1
 8006212:	fa01 f303 	lsl.w	r3, r1, r3
 8006216:	6939      	ldr	r1, [r7, #16]
 8006218:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800621c:	4313      	orrs	r3, r2
 800621e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800622c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da03      	bge.n	800623c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e001      	b.n	8006240 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff fef9 	bl	8006038 <USB_GetHostSpeed>
 8006246:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006248:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800624c:	2b02      	cmp	r3, #2
 800624e:	d106      	bne.n	800625e <USB_HC_Init+0x1d6>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006256:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e001      	b.n	8006262 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006262:	787b      	ldrb	r3, [r7, #1]
 8006264:	059b      	lsls	r3, r3, #22
 8006266:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800626a:	78bb      	ldrb	r3, [r7, #2]
 800626c:	02db      	lsls	r3, r3, #11
 800626e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006272:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006274:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006278:	049b      	lsls	r3, r3, #18
 800627a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800627e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006280:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006282:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006286:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	431a      	orrs	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	440a      	add	r2, r1
 8006298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800629c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d003      	beq.n	80062b2 <USB_HC_Init+0x22a>
 80062aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10f      	bne.n	80062d2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	78fa      	ldrb	r2, [r7, #3]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40040000 	.word	0x40040000

080062e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08c      	sub	sp, #48	@ 0x30
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80062f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062fc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4a5d      	ldr	r2, [pc, #372]	@ (8006478 <USB_HC_StartXfer+0x198>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d12f      	bne.n	8006366 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11c      	bne.n	8006346 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	7c9b      	ldrb	r3, [r3, #18]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <USB_HC_StartXfer+0x3c>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	7c9b      	ldrb	r3, [r3, #18]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d124      	bne.n	8006366 <USB_HC_StartXfer+0x86>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	799b      	ldrb	r3, [r3, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d120      	bne.n	8006366 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	4413      	add	r3, r2
 800632c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	440a      	add	r2, r1
 800633a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60d3      	str	r3, [r2, #12]
 8006344:	e00f      	b.n	8006366 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	791b      	ldrb	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10b      	bne.n	8006366 <USB_HC_StartXfer+0x86>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	795b      	ldrb	r3, [r3, #5]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d107      	bne.n	8006366 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	4619      	mov	r1, r3
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 fb6b 	bl	8006a38 <USB_DoPing>
        return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e232      	b.n	80067cc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	799b      	ldrb	r3, [r3, #6]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d158      	bne.n	8006420 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800636e:	2301      	movs	r3, #1
 8006370:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	78db      	ldrb	r3, [r3, #3]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d007      	beq.n	800638a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800637a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	8a92      	ldrh	r2, [r2, #20]
 8006380:	fb03 f202 	mul.w	r2, r3, r2
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61da      	str	r2, [r3, #28]
 8006388:	e07c      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	7c9b      	ldrb	r3, [r3, #18]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d130      	bne.n	80063f4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	2bbc      	cmp	r3, #188	@ 0xbc
 8006398:	d918      	bls.n	80063cc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	8a9b      	ldrh	r3, [r3, #20]
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d003      	beq.n	80063bc <USB_HC_StartXfer+0xdc>
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d103      	bne.n	80063c4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2202      	movs	r2, #2
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e05f      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2201      	movs	r2, #1
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	e05b      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6a1a      	ldr	r2, [r3, #32]
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d007      	beq.n	80063ec <USB_HC_StartXfer+0x10c>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d003      	beq.n	80063ec <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2204      	movs	r2, #4
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	e04b      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2203      	movs	r2, #3
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	e047      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10d      	bne.n	8006416 <USB_HC_StartXfer+0x136>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	8a92      	ldrh	r2, [r2, #20]
 8006402:	4293      	cmp	r3, r2
 8006404:	d907      	bls.n	8006416 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006406:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	8a92      	ldrh	r2, [r2, #20]
 800640c:	fb03 f202 	mul.w	r2, r3, r2
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	61da      	str	r2, [r3, #28]
 8006414:	e036      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	6a1a      	ldr	r2, [r3, #32]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61da      	str	r2, [r3, #28]
 800641e:	e031      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d018      	beq.n	800645a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	8a92      	ldrh	r2, [r2, #20]
 8006430:	4413      	add	r3, r2
 8006432:	3b01      	subs	r3, #1
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	8a92      	ldrh	r2, [r2, #20]
 8006438:	fbb3 f3f2 	udiv	r3, r3, r2
 800643c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800643e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006440:	8b7b      	ldrh	r3, [r7, #26]
 8006442:	429a      	cmp	r2, r3
 8006444:	d90b      	bls.n	800645e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006446:	8b7b      	ldrh	r3, [r7, #26]
 8006448:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800644a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	8a92      	ldrh	r2, [r2, #20]
 8006450:	fb03 f202 	mul.w	r2, r3, r2
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	61da      	str	r2, [r3, #28]
 8006458:	e001      	b.n	800645e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800645a:	2301      	movs	r3, #1
 800645c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	78db      	ldrb	r3, [r3, #3]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00a      	beq.n	800647c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006466:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	8a92      	ldrh	r2, [r2, #20]
 800646c:	fb03 f202 	mul.w	r2, r3, r2
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	61da      	str	r2, [r3, #28]
 8006474:	e006      	b.n	8006484 <USB_HC_StartXfer+0x1a4>
 8006476:	bf00      	nop
 8006478:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6a1a      	ldr	r2, [r3, #32]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800648c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800648e:	04d9      	lsls	r1, r3, #19
 8006490:	4ba3      	ldr	r3, [pc, #652]	@ (8006720 <USB_HC_StartXfer+0x440>)
 8006492:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006494:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	7d9b      	ldrb	r3, [r3, #22]
 800649a:	075b      	lsls	r3, r3, #29
 800649c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a0:	69f9      	ldr	r1, [r7, #28]
 80064a2:	0148      	lsls	r0, r1, #5
 80064a4:	6a39      	ldr	r1, [r7, #32]
 80064a6:	4401      	add	r1, r0
 80064a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c6:	460a      	mov	r2, r1
 80064c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	6a3a      	ldr	r2, [r7, #32]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006500:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	7e7b      	ldrb	r3, [r7, #25]
 8006512:	075b      	lsls	r3, r3, #29
 8006514:	69f9      	ldr	r1, [r7, #28]
 8006516:	0148      	lsls	r0, r1, #5
 8006518:	6a39      	ldr	r1, [r7, #32]
 800651a:	4401      	add	r1, r0
 800651c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	799b      	ldrb	r3, [r3, #6]
 8006528:	2b01      	cmp	r3, #1
 800652a:	f040 80c3 	bne.w	80066b4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	7c5b      	ldrb	r3, [r3, #17]
 8006532:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006538:	4313      	orrs	r3, r2
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	440a      	add	r2, r1
 8006542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800654a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	69fa      	ldr	r2, [r7, #28]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	6a3a      	ldr	r2, [r7, #32]
 8006560:	440a      	add	r2, r1
 8006562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006566:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800656a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	79db      	ldrb	r3, [r3, #7]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d123      	bne.n	80065bc <USB_HC_StartXfer+0x2dc>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11f      	bne.n	80065bc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ba:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	7c9b      	ldrb	r3, [r3, #18]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d003      	beq.n	80065cc <USB_HC_StartXfer+0x2ec>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	7c9b      	ldrb	r3, [r3, #18]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d117      	bne.n	80065fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d113      	bne.n	80065fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d10f      	bne.n	80065fc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	6a3a      	ldr	r2, [r7, #32]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065fa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	7c9b      	ldrb	r3, [r3, #18]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d162      	bne.n	80066ca <USB_HC_StartXfer+0x3ea>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	78db      	ldrb	r3, [r3, #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d15e      	bne.n	80066ca <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	3b01      	subs	r3, #1
 8006612:	2b03      	cmp	r3, #3
 8006614:	d858      	bhi.n	80066c8 <USB_HC_StartXfer+0x3e8>
 8006616:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <USB_HC_StartXfer+0x33c>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800664f 	.word	0x0800664f
 8006624:	08006671 	.word	0x08006671
 8006628:	08006693 	.word	0x08006693
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	4413      	add	r3, r2
 8006634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	69fa      	ldr	r2, [r7, #28]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	6a3a      	ldr	r2, [r7, #32]
 8006640:	440a      	add	r2, r1
 8006642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800664a:	6053      	str	r3, [r2, #4]
          break;
 800664c:	e03d      	b.n	80066ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	4413      	add	r3, r2
 8006656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	69fa      	ldr	r2, [r7, #28]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	6a3a      	ldr	r2, [r7, #32]
 8006662:	440a      	add	r2, r1
 8006664:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006668:	f043 030e 	orr.w	r3, r3, #14
 800666c:	6053      	str	r3, [r2, #4]
          break;
 800666e:	e02c      	b.n	80066ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800668a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800668e:	6053      	str	r3, [r2, #4]
          break;
 8006690:	e01b      	b.n	80066ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066b0:	6053      	str	r3, [r2, #4]
          break;
 80066b2:	e00a      	b.n	80066ca <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	6053      	str	r3, [r2, #4]
 80066c6:	e000      	b.n	80066ca <USB_HC_StartXfer+0x3ea>
          break;
 80066c8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066e0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	e003      	b.n	80066fc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066fa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006710:	461a      	mov	r2, r3
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e055      	b.n	80067cc <USB_HC_StartXfer+0x4ec>
 8006720:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	78db      	ldrb	r3, [r3, #3]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d14e      	bne.n	80067ca <USB_HC_StartXfer+0x4ea>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d04a      	beq.n	80067ca <USB_HC_StartXfer+0x4ea>
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	79db      	ldrb	r3, [r3, #7]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d146      	bne.n	80067ca <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	7c9b      	ldrb	r3, [r3, #18]
 8006740:	2b03      	cmp	r3, #3
 8006742:	d831      	bhi.n	80067a8 <USB_HC_StartXfer+0x4c8>
 8006744:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <USB_HC_StartXfer+0x46c>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	0800675d 	.word	0x0800675d
 8006750:	08006781 	.word	0x08006781
 8006754:	0800675d 	.word	0x0800675d
 8006758:	08006781 	.word	0x08006781
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	3303      	adds	r3, #3
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006766:	8afa      	ldrh	r2, [r7, #22]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676c:	b29b      	uxth	r3, r3
 800676e:	429a      	cmp	r2, r3
 8006770:	d91c      	bls.n	80067ac <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	f043 0220 	orr.w	r2, r3, #32
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	619a      	str	r2, [r3, #24]
        }
        break;
 800677e:	e015      	b.n	80067ac <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	3303      	adds	r3, #3
 8006786:	089b      	lsrs	r3, r3, #2
 8006788:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800678a:	8afa      	ldrh	r2, [r7, #22]
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	b29b      	uxth	r3, r3
 8006796:	429a      	cmp	r2, r3
 8006798:	d90a      	bls.n	80067b0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80067a6:	e003      	b.n	80067b0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80067a8:	bf00      	nop
 80067aa:	e002      	b.n	80067b2 <USB_HC_StartXfer+0x4d2>
        break;
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <USB_HC_StartXfer+0x4d2>
        break;
 80067b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	785a      	ldrb	r2, [r3, #1]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2000      	movs	r0, #0
 80067c2:	9000      	str	r0, [sp, #0]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff f9c9 	bl	8005b5c <USB_WritePacket>
  }

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	b29b      	uxth	r3, r3
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3714      	adds	r7, #20
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b089      	sub	sp, #36	@ 0x24
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	460b      	mov	r3, r1
 8006800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	0c9b      	lsrs	r3, r3, #18
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	0fdb      	lsrs	r3, r3, #31
 8006834:	f003 0301 	and.w	r3, r3, #1
 8006838:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	0fdb      	lsrs	r3, r3, #31
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b20      	cmp	r3, #32
 800685a:	d10d      	bne.n	8006878 <USB_HC_Halt+0x82>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <USB_HC_Halt+0x82>
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d002      	beq.n	8006874 <USB_HC_Halt+0x7e>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b03      	cmp	r3, #3
 8006872:	d101      	bne.n	8006878 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e0d8      	b.n	8006a2a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <USB_HC_Halt+0x8e>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d173      	bne.n	800696c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	440a      	add	r2, r1
 800689a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800689e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d14a      	bne.n	8006946 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d133      	bne.n	8006924 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	69fa      	ldr	r2, [r7, #28]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068da:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068fa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	3301      	adds	r3, #1
 8006900:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006908:	d82e      	bhi.n	8006968 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006920:	d0ec      	beq.n	80068fc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006922:	e081      	b.n	8006a28 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	440a      	add	r2, r1
 800693a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800693e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006942:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006944:	e070      	b.n	8006a28 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	440a      	add	r2, r1
 800695c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006960:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006964:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006966:	e05f      	b.n	8006a28 <USB_HC_Halt+0x232>
            break;
 8006968:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800696a:	e05d      	b.n	8006a28 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	440a      	add	r2, r1
 8006982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006986:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d133      	bne.n	8006a04 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	69fa      	ldr	r2, [r7, #28]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	0151      	lsls	r1, r2, #5
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	440a      	add	r2, r1
 80069d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3301      	adds	r3, #1
 80069e0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069e8:	d81d      	bhi.n	8006a26 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a00:	d0ec      	beq.n	80069dc <USB_HC_Halt+0x1e6>
 8006a02:	e011      	b.n	8006a28 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	e000      	b.n	8006a28 <USB_HC_Halt+0x232>
          break;
 8006a26:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3724      	adds	r7, #36	@ 0x24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	04da      	lsls	r2, r3, #19
 8006a54:	4b15      	ldr	r3, [pc, #84]	@ (8006aac <USB_DoPing+0x74>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	0151      	lsls	r1, r2, #5
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	440a      	add	r2, r1
 8006a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a68:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a80:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a88:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	1ff80000 	.word	0x1ff80000

08006ab0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fe ff8c 	bl	80059e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aca:	2110      	movs	r1, #16
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fe ffe5 	bl	8005a9c <USB_FlushTxFifo>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d001      	beq.n	8006adc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff f80f 	bl	8005b00 <USB_FlushRxFifo>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	e01f      	b.n	8006b32 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b26:	461a      	mov	r2, r3
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b0f      	cmp	r3, #15
 8006b36:	d9dc      	bls.n	8006af2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e034      	b.n	8006ba8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b72:	461a      	mov	r2, r3
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b84:	d80c      	bhi.n	8006ba0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b9c:	d0ec      	beq.n	8006b78 <USB_StopHost+0xc8>
 8006b9e:	e000      	b.n	8006ba2 <USB_StopHost+0xf2>
        break;
 8006ba0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	d9c7      	bls.n	8006b3e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bc2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fe fefb 	bl	80059c0 <USB_EnableGlobalInt>

  return ret;
 8006bca:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b089      	sub	sp, #36	@ 0x24
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bdc:	2301      	movs	r3, #1
 8006bde:	2202      	movs	r2, #2
 8006be0:	2102      	movs	r1, #2
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc85 	bl	80074f2 <USBH_FindInterface>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2bff      	cmp	r3, #255	@ 0xff
 8006bf0:	d002      	beq.n	8006bf8 <USBH_CDC_InterfaceInit+0x24>
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d901      	bls.n	8006bfc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e13d      	b.n	8006e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc5a 	bl	80074ba <USBH_SelectInterface>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c10:	2302      	movs	r3, #2
 8006c12:	e131      	b.n	8006e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c1a:	2050      	movs	r0, #80	@ 0x50
 8006c1c:	f002 fb64 	bl	80092e8 <malloc>
 8006c20:	4603      	mov	r3, r0
 8006c22:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	e11f      	b.n	8006e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c38:	2250      	movs	r2, #80	@ 0x50
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	68b8      	ldr	r0, [r7, #8]
 8006c3e:	f002 fc11 	bl	8009464 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	211a      	movs	r1, #26
 8006c48:	fb01 f303 	mul.w	r3, r1, r3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b25b      	sxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da15      	bge.n	8006c86 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	211a      	movs	r1, #26
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	211a      	movs	r1, #26
 8006c76:	fb01 f303 	mul.w	r3, r1, r3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c80:	881a      	ldrh	r2, [r3, #0]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 ffbe 	bl	8008c0e <USBH_AllocPipe>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461a      	mov	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	7819      	ldrb	r1, [r3, #0]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	7858      	ldrb	r0, [r3, #1]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	8952      	ldrh	r2, [r2, #10]
 8006cb2:	9202      	str	r2, [sp, #8]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	4623      	mov	r3, r4
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 ff76 	bl	8008bb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f002 fa85 	bl	80091dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	210a      	movs	r1, #10
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fc0a 	bl	80074f2 <USBH_FindInterface>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	2bff      	cmp	r3, #255	@ 0xff
 8006ce6:	d002      	beq.n	8006cee <USBH_CDC_InterfaceInit+0x11a>
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d901      	bls.n	8006cf2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e0c2      	b.n	8006e78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	211a      	movs	r1, #26
 8006cf8:	fb01 f303 	mul.w	r3, r1, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da16      	bge.n	8006d38 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	211a      	movs	r1, #26
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	211a      	movs	r1, #26
 8006d26:	fb01 f303 	mul.w	r3, r1, r3
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d30:	881a      	ldrh	r2, [r3, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	835a      	strh	r2, [r3, #26]
 8006d36:	e015      	b.n	8006d64 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	211a      	movs	r1, #26
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	211a      	movs	r1, #26
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	211a      	movs	r1, #26
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b25b      	sxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	da16      	bge.n	8006daa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	211a      	movs	r1, #26
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d8c:	781a      	ldrb	r2, [r3, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	211a      	movs	r1, #26
 8006d98:	fb01 f303 	mul.w	r3, r1, r3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006da2:	881a      	ldrh	r2, [r3, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	835a      	strh	r2, [r3, #26]
 8006da8:	e015      	b.n	8006dd6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	211a      	movs	r1, #26
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	4413      	add	r3, r2
 8006db6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	211a      	movs	r1, #26
 8006dc6:	fb01 f303 	mul.w	r3, r1, r3
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	7b9b      	ldrb	r3, [r3, #14]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 ff16 	bl	8008c0e <USBH_AllocPipe>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	7bdb      	ldrb	r3, [r3, #15]
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 ff0c 	bl	8008c0e <USBH_AllocPipe>
 8006df6:	4603      	mov	r3, r0
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	7b59      	ldrb	r1, [r3, #13]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	7b98      	ldrb	r0, [r3, #14]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	8b12      	ldrh	r2, [r2, #24]
 8006e16:	9202      	str	r2, [sp, #8]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	9201      	str	r2, [sp, #4]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	4623      	mov	r3, r4
 8006e20:	4602      	mov	r2, r0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 fec4 	bl	8008bb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	7b19      	ldrb	r1, [r3, #12]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	7bd8      	ldrb	r0, [r3, #15]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	8b52      	ldrh	r2, [r2, #26]
 8006e40:	9202      	str	r2, [sp, #8]
 8006e42:	2202      	movs	r2, #2
 8006e44:	9201      	str	r2, [sp, #4]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4623      	mov	r3, r4
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 feaf 	bl	8008bb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	7b5b      	ldrb	r3, [r3, #13]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f002 f9ba 	bl	80091dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	7b1b      	ldrb	r3, [r3, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 f9b3 	bl	80091dc <USBH_LL_SetToggle>

  return USBH_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd90      	pop	{r4, r7, pc}

08006e80 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00e      	beq.n	8006eb8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 fea4 	bl	8008bee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fecf 	bl	8008c50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	7b1b      	ldrb	r3, [r3, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	7b1b      	ldrb	r3, [r3, #12]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 fe91 	bl	8008bee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	7b1b      	ldrb	r3, [r3, #12]
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 febc 	bl	8008c50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	7b5b      	ldrb	r3, [r3, #13]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00e      	beq.n	8006f04 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	7b5b      	ldrb	r3, [r3, #13]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fe7e 	bl	8008bee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	7b5b      	ldrb	r3, [r3, #13]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fea9 	bl	8008c50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f002 f9ed 	bl	80092f8 <free>
    phost->pActiveClass->pData = 0U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f24:	2200      	movs	r2, #0
 8006f26:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3340      	adds	r3, #64	@ 0x40
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8b1 	bl	80070b2 <GetLineCoding>
 8006f50:	4603      	mov	r3, r0
 8006f52:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f60:	2102      	movs	r1, #2
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f66:	7afb      	ldrb	r3, [r7, #11]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d877      	bhi.n	8007084 <USBH_CDC_Process+0x114>
 8006f94:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <USBH_CDC_Process+0x2c>)
 8006f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9a:	bf00      	nop
 8006f9c:	08006fb1 	.word	0x08006fb1
 8006fa0:	08006fb7 	.word	0x08006fb7
 8006fa4:	08006fe7 	.word	0x08006fe7
 8006fa8:	0800705b 	.word	0x0800705b
 8006fac:	08007069 	.word	0x08007069
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb4:	e06d      	b.n	8007092 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f897 	bl	80070f0 <SetLineCoding>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fd4:	e058      	b.n	8007088 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d055      	beq.n	8007088 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2204      	movs	r2, #4
 8006fe0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006fe4:	e050      	b.n	8007088 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	3340      	adds	r3, #64	@ 0x40
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f860 	bl	80070b2 <GetLineCoding>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d126      	bne.n	800704a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d13b      	bne.n	800708c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800701e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007020:	429a      	cmp	r2, r3
 8007022:	d133      	bne.n	800708c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d12b      	bne.n	800708c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800703e:	429a      	cmp	r2, r3
 8007040:	d124      	bne.n	800708c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f958 	bl	80072f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007048:	e020      	b.n	800708c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d01d      	beq.n	800708c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2204      	movs	r2, #4
 8007054:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007058:	e018      	b.n	800708c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f867 	bl	800712e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f8da 	bl	800721a <CDC_ProcessReception>
      break;
 8007066:	e014      	b.n	8007092 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007068:	2100      	movs	r1, #0
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 f81a 	bl	80080a4 <USBH_ClrFeature>
 8007070:	4603      	mov	r3, r0
 8007072:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007082:	e005      	b.n	8007090 <USBH_CDC_Process+0x120>

    default:
      break;
 8007084:	bf00      	nop
 8007086:	e004      	b.n	8007092 <USBH_CDC_Process+0x122>
      break;
 8007088:	bf00      	nop
 800708a:	e002      	b.n	8007092 <USBH_CDC_Process+0x122>
      break;
 800708c:	bf00      	nop
 800708e:	e000      	b.n	8007092 <USBH_CDC_Process+0x122>
      break;
 8007090:	bf00      	nop

  }

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	22a1      	movs	r2, #161	@ 0xa1
 80070c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2221      	movs	r2, #33	@ 0x21
 80070c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2207      	movs	r2, #7
 80070d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2207      	movs	r2, #7
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 fb14 	bl	800870e <USBH_CtlReq>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2221      	movs	r2, #33	@ 0x21
 80070fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2207      	movs	r2, #7
 8007116:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2207      	movs	r2, #7
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 faf5 	bl	800870e <USBH_CtlReq>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b086      	sub	sp, #24
 8007132:	af02      	add	r7, sp, #8
 8007134:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007140:	2300      	movs	r3, #0
 8007142:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800714a:	2b01      	cmp	r3, #1
 800714c:	d002      	beq.n	8007154 <CDC_ProcessTransmission+0x26>
 800714e:	2b02      	cmp	r3, #2
 8007150:	d023      	beq.n	800719a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007152:	e05e      	b.n	8007212 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	8b12      	ldrh	r2, [r2, #24]
 800715c:	4293      	cmp	r3, r2
 800715e:	d90b      	bls.n	8007178 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	69d9      	ldr	r1, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8b1a      	ldrh	r2, [r3, #24]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	7b5b      	ldrb	r3, [r3, #13]
 800716c:	2001      	movs	r0, #1
 800716e:	9000      	str	r0, [sp, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fcda 	bl	8008b2a <USBH_BulkSendData>
 8007176:	e00b      	b.n	8007190 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	7b5b      	ldrb	r3, [r3, #13]
 8007186:	2001      	movs	r0, #1
 8007188:	9000      	str	r0, [sp, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fccd 	bl	8008b2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007198:	e03b      	b.n	8007212 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	7b5b      	ldrb	r3, [r3, #13]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fff1 	bl	8009188 <USBH_LL_GetURBState>
 80071a6:	4603      	mov	r3, r0
 80071a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071aa:	7afb      	ldrb	r3, [r7, #11]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d128      	bne.n	8007202 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	8b12      	ldrh	r2, [r2, #24]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d90e      	bls.n	80071da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	8b12      	ldrh	r2, [r2, #24]
 80071c4:	1a9a      	subs	r2, r3, r2
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	8b12      	ldrh	r2, [r2, #24]
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	61da      	str	r2, [r3, #28]
 80071d8:	e002      	b.n	80071e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071f0:	e00e      	b.n	8007210 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f868 	bl	80072d0 <USBH_CDC_TransmitCallback>
      break;
 8007200:	e006      	b.n	8007210 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	2b02      	cmp	r3, #2
 8007206:	d103      	bne.n	8007210 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007210:	bf00      	nop
  }
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b086      	sub	sp, #24
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800722c:	2300      	movs	r3, #0
 800722e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007236:	2b03      	cmp	r3, #3
 8007238:	d002      	beq.n	8007240 <CDC_ProcessReception+0x26>
 800723a:	2b04      	cmp	r3, #4
 800723c:	d00e      	beq.n	800725c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800723e:	e043      	b.n	80072c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6a19      	ldr	r1, [r3, #32]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	8b5a      	ldrh	r2, [r3, #26]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	7b1b      	ldrb	r3, [r3, #12]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 fc91 	bl	8008b74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2204      	movs	r2, #4
 8007256:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800725a:	e035      	b.n	80072c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	7b1b      	ldrb	r3, [r3, #12]
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 ff90 	bl	8009188 <USBH_LL_GetURBState>
 8007268:	4603      	mov	r3, r0
 800726a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800726c:	7cfb      	ldrb	r3, [r7, #19]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d129      	bne.n	80072c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	7b1b      	ldrb	r3, [r3, #12]
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fef3 	bl	8009064 <USBH_LL_GetLastXferSize>
 800727e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	429a      	cmp	r2, r3
 8007288:	d016      	beq.n	80072b8 <CDC_ProcessReception+0x9e>
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	8b5b      	ldrh	r3, [r3, #26]
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4293      	cmp	r3, r2
 8007294:	d110      	bne.n	80072b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1ad2      	subs	r2, r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	6a1a      	ldr	r2, [r3, #32]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	441a      	add	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2203      	movs	r2, #3
 80072b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80072b6:	e006      	b.n	80072c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f80f 	bl	80072e4 <USBH_CDC_ReceiveCallback>
      break;
 80072c6:	bf00      	nop
  }
}
 80072c8:	bf00      	nop
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	4613      	mov	r3, r2
 8007318:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d101      	bne.n	8007324 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007320:	2302      	movs	r3, #2
 8007322:	e029      	b.n	8007378 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	79fa      	ldrb	r2, [r7, #7]
 8007328:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f81f 	bl	8007380 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f001 fdc3 	bl	8008efc <USBH_LL_Init>

  return USBH_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	e009      	b.n	80073a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	33e0      	adds	r3, #224	@ 0xe0
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	2200      	movs	r2, #0
 800739e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b0f      	cmp	r3, #15
 80073aa:	d9f2      	bls.n	8007392 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e009      	b.n	80073c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3301      	adds	r3, #1
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073cc:	d3f1      	bcc.n	80073b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2240      	movs	r2, #64	@ 0x40
 80073f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	331c      	adds	r3, #28
 800741e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f002 f81d 	bl	8009464 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f002 f814 	bl	8009464 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007442:	2212      	movs	r2, #18
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f80c 	bl	8009464 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007452:	223e      	movs	r2, #62	@ 0x3e
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f002 f804 	bl	8009464 <memset>

  return USBH_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10e      	bne.n	80074a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800748a:	1c59      	adds	r1, r3, #1
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	33de      	adds	r3, #222	@ 0xde
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
 80074a0:	e004      	b.n	80074ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074a2:	2302      	movs	r3, #2
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e001      	b.n	80074ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074a8:	2302      	movs	r3, #2
 80074aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	460b      	mov	r3, r1
 80074c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d204      	bcs.n	80074e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074de:	e001      	b.n	80074e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074e0:	2302      	movs	r3, #2
 80074e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	461a      	mov	r2, r3
 8007500:	4603      	mov	r3, r0
 8007502:	70fb      	strb	r3, [r7, #3]
 8007504:	460b      	mov	r3, r1
 8007506:	70bb      	strb	r3, [r7, #2]
 8007508:	4613      	mov	r3, r2
 800750a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800750c:	2300      	movs	r3, #0
 800750e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800751a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800751c:	e025      	b.n	800756a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	221a      	movs	r2, #26
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	3308      	adds	r3, #8
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	3302      	adds	r3, #2
 800752e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	795b      	ldrb	r3, [r3, #5]
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	429a      	cmp	r2, r3
 8007538:	d002      	beq.n	8007540 <USBH_FindInterface+0x4e>
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	2bff      	cmp	r3, #255	@ 0xff
 800753e:	d111      	bne.n	8007564 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007544:	78ba      	ldrb	r2, [r7, #2]
 8007546:	429a      	cmp	r2, r3
 8007548:	d002      	beq.n	8007550 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800754a:	78bb      	ldrb	r3, [r7, #2]
 800754c:	2bff      	cmp	r3, #255	@ 0xff
 800754e:	d109      	bne.n	8007564 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007554:	787a      	ldrb	r2, [r7, #1]
 8007556:	429a      	cmp	r2, r3
 8007558:	d002      	beq.n	8007560 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800755a:	787b      	ldrb	r3, [r7, #1]
 800755c:	2bff      	cmp	r3, #255	@ 0xff
 800755e:	d101      	bne.n	8007564 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	e006      	b.n	8007572 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	3301      	adds	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d9d6      	bls.n	800751e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007570:	23ff      	movs	r3, #255	@ 0xff
}
 8007572:	4618      	mov	r0, r3
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fcf4 	bl	8008f74 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800758c:	2101      	movs	r1, #1
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f001 fe0d 	bl	80091ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
	...

080075a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b088      	sub	sp, #32
 80075a4:	af04      	add	r7, sp, #16
 80075a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075a8:	2302      	movs	r3, #2
 80075aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d102      	bne.n	80075c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2203      	movs	r2, #3
 80075c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b0b      	cmp	r3, #11
 80075ca:	f200 81bb 	bhi.w	8007944 <USBH_Process+0x3a4>
 80075ce:	a201      	add	r2, pc, #4	@ (adr r2, 80075d4 <USBH_Process+0x34>)
 80075d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d4:	08007605 	.word	0x08007605
 80075d8:	08007637 	.word	0x08007637
 80075dc:	0800769f 	.word	0x0800769f
 80075e0:	080078df 	.word	0x080078df
 80075e4:	08007945 	.word	0x08007945
 80075e8:	0800773f 	.word	0x0800773f
 80075ec:	08007885 	.word	0x08007885
 80075f0:	08007775 	.word	0x08007775
 80075f4:	08007795 	.word	0x08007795
 80075f8:	080077b3 	.word	0x080077b3
 80075fc:	080077f7 	.word	0x080077f7
 8007600:	080078c7 	.word	0x080078c7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 819b 	beq.w	8007948 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007618:	20c8      	movs	r0, #200	@ 0xc8
 800761a:	f001 fe12 	bl	8009242 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fd05 	bl	800902e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007634:	e188      	b.n	8007948 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800763c:	2b01      	cmp	r3, #1
 800763e:	d107      	bne.n	8007650 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800764e:	e18a      	b.n	8007966 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800765a:	d914      	bls.n	8007686 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007662:	3301      	adds	r3, #1
 8007664:	b2da      	uxtb	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007672:	2b03      	cmp	r3, #3
 8007674:	d903      	bls.n	800767e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	220d      	movs	r2, #13
 800767a:	701a      	strb	r2, [r3, #0]
      break;
 800767c:	e173      	b.n	8007966 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	701a      	strb	r2, [r3, #0]
      break;
 8007684:	e16f      	b.n	8007966 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800768c:	f103 020a 	add.w	r2, r3, #10
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007696:	200a      	movs	r0, #10
 8007698:	f001 fdd3 	bl	8009242 <USBH_Delay>
      break;
 800769c:	e163      	b.n	8007966 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076ae:	2104      	movs	r1, #4
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076b4:	2064      	movs	r0, #100	@ 0x64
 80076b6:	f001 fdc4 	bl	8009242 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 fc90 	bl	8008fe0 <USBH_LL_GetSpeed>
 80076c0:	4603      	mov	r3, r0
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2205      	movs	r2, #5
 80076ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f001 fa9b 	bl	8008c0e <USBH_AllocPipe>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076e0:	2180      	movs	r1, #128	@ 0x80
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fa93 	bl	8008c0e <USBH_AllocPipe>
 80076e8:	4603      	mov	r3, r0
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	7919      	ldrb	r1, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007704:	9202      	str	r2, [sp, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4603      	mov	r3, r0
 800770e:	2280      	movs	r2, #128	@ 0x80
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fa4d 	bl	8008bb0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7959      	ldrb	r1, [r3, #5]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800772a:	9202      	str	r2, [sp, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	9201      	str	r2, [sp, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	4603      	mov	r3, r0
 8007734:	2200      	movs	r2, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fa3a 	bl	8008bb0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800773c:	e113      	b.n	8007966 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f916 	bl	8007970 <USBH_HandleEnum>
 8007744:	4603      	mov	r3, r0
 8007746:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	f040 80fd 	bne.w	800794c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007760:	2b01      	cmp	r3, #1
 8007762:	d103      	bne.n	800776c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2208      	movs	r2, #8
 8007768:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800776a:	e0ef      	b.n	800794c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2207      	movs	r2, #7
 8007770:	701a      	strb	r2, [r3, #0]
      break;
 8007772:	e0eb      	b.n	800794c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80e8 	beq.w	8007950 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007786:	2101      	movs	r1, #1
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2208      	movs	r2, #8
 8007790:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007792:	e0dd      	b.n	8007950 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fc3a 	bl	8008016 <USBH_SetCfg>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 80d5 	bne.w	8007954 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2209      	movs	r2, #9
 80077ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077b0:	e0d0      	b.n	8007954 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d016      	beq.n	80077ee <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077c0:	2101      	movs	r1, #1
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc4a 	bl	800805c <USBH_SetFeature>
 80077c8:	4603      	mov	r3, r0
 80077ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220a      	movs	r2, #10
 80077d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077da:	e0bd      	b.n	8007958 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	f040 80b9 	bne.w	8007958 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220a      	movs	r2, #10
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e0b4      	b.n	8007958 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220a      	movs	r2, #10
 80077f2:	701a      	strb	r2, [r3, #0]
      break;
 80077f4:	e0b0      	b.n	8007958 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80ad 	beq.w	800795c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
 800780e:	e016      	b.n	800783e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007810:	7bfa      	ldrb	r2, [r7, #15]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32de      	adds	r2, #222	@ 0xde
 8007816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781a:	791a      	ldrb	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007822:	429a      	cmp	r2, r3
 8007824:	d108      	bne.n	8007838 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007826:	7bfa      	ldrb	r2, [r7, #15]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	32de      	adds	r2, #222	@ 0xde
 800782c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007836:	e005      	b.n	8007844 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	3301      	adds	r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0e5      	beq.n	8007810 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d016      	beq.n	800787c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2206      	movs	r2, #6
 8007864:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800786c:	2103      	movs	r1, #3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007872:	e073      	b.n	800795c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	220d      	movs	r2, #13
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e06f      	b.n	800795c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	220d      	movs	r2, #13
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e06b      	b.n	800795c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	220b      	movs	r2, #11
 80078aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078ac:	e058      	b.n	8007960 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d154      	bne.n	8007960 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220d      	movs	r2, #13
 80078ba:	701a      	strb	r2, [r3, #0]
      break;
 80078bc:	e050      	b.n	8007960 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	220d      	movs	r2, #13
 80078c2:	701a      	strb	r2, [r3, #0]
      break;
 80078c4:	e04c      	b.n	8007960 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d049      	beq.n	8007964 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
      }
      break;
 80078dc:	e042      	b.n	8007964 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fd4a 	bl	8007380 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d009      	beq.n	800790a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800791a:	2105      	movs	r1, #5
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d107      	bne.n	800793c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff fe22 	bl	800757e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800793a:	e014      	b.n	8007966 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fb19 	bl	8008f74 <USBH_LL_Start>
      break;
 8007942:	e010      	b.n	8007966 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007944:	bf00      	nop
 8007946:	e00e      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 8007948:	bf00      	nop
 800794a:	e00c      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 800794c:	bf00      	nop
 800794e:	e00a      	b.n	8007966 <USBH_Process+0x3c6>
    break;
 8007950:	bf00      	nop
 8007952:	e008      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 8007954:	bf00      	nop
 8007956:	e006      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 8007958:	bf00      	nop
 800795a:	e004      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 800795c:	bf00      	nop
 800795e:	e002      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <USBH_Process+0x3c6>
      break;
 8007964:	bf00      	nop
  }
  return USBH_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af04      	add	r7, sp, #16
 8007976:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007978:	2301      	movs	r3, #1
 800797a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b07      	cmp	r3, #7
 8007986:	f200 81bd 	bhi.w	8007d04 <USBH_HandleEnum+0x394>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <USBH_HandleEnum+0x20>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079b1 	.word	0x080079b1
 8007994:	08007a6b 	.word	0x08007a6b
 8007998:	08007ad5 	.word	0x08007ad5
 800799c:	08007b5f 	.word	0x08007b5f
 80079a0:	08007bc9 	.word	0x08007bc9
 80079a4:	08007c39 	.word	0x08007c39
 80079a8:	08007c7f 	.word	0x08007c7f
 80079ac:	08007cc5 	.word	0x08007cc5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079b0:	2108      	movs	r1, #8
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fa4c 	bl	8007e50 <USBH_Get_DevDesc>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d12e      	bne.n	8007a20 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	7919      	ldrb	r1, [r3, #4]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079e6:	9202      	str	r2, [sp, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4603      	mov	r3, r0
 80079f0:	2280      	movs	r2, #128	@ 0x80
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f8dc 	bl	8008bb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7959      	ldrb	r1, [r3, #5]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a0c:	9202      	str	r2, [sp, #8]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	9201      	str	r2, [sp, #4]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4603      	mov	r3, r0
 8007a16:	2200      	movs	r2, #0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f8c9 	bl	8008bb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a1e:	e173      	b.n	8007d08 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	f040 8170 	bne.w	8007d08 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d903      	bls.n	8007a4a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	220d      	movs	r2, #13
 8007a46:	701a      	strb	r2, [r3, #0]
      break;
 8007a48:	e15e      	b.n	8007d08 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	795b      	ldrb	r3, [r3, #5]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f001 f8fd 	bl	8008c50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	791b      	ldrb	r3, [r3, #4]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f8f7 	bl	8008c50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
      break;
 8007a68:	e14e      	b.n	8007d08 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a6a:	2112      	movs	r1, #18
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9ef 	bl	8007e50 <USBH_Get_DevDesc>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d103      	bne.n	8007a84 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a82:	e143      	b.n	8007d0c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	f040 8140 	bne.w	8007d0c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a92:	3301      	adds	r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d903      	bls.n	8007aae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	220d      	movs	r2, #13
 8007aaa:	701a      	strb	r2, [r3, #0]
      break;
 8007aac:	e12e      	b.n	8007d0c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	795b      	ldrb	r3, [r3, #5]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 f8cb 	bl	8008c50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	791b      	ldrb	r3, [r3, #4]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f8c5 	bl	8008c50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
      break;
 8007ad2:	e11b      	b.n	8007d0c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa79 	bl	8007fce <USBH_SetAddress>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d130      	bne.n	8007b48 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007ae6:	2002      	movs	r0, #2
 8007ae8:	f001 fbab 	bl	8009242 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2203      	movs	r2, #3
 8007af8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	7919      	ldrb	r1, [r3, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b0e:	9202      	str	r2, [sp, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	9201      	str	r2, [sp, #4]
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	4603      	mov	r3, r0
 8007b18:	2280      	movs	r2, #128	@ 0x80
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f848 	bl	8008bb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7959      	ldrb	r1, [r3, #5]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b34:	9202      	str	r2, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	9201      	str	r2, [sp, #4]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 f835 	bl	8008bb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b46:	e0e3      	b.n	8007d10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	f040 80e0 	bne.w	8007d10 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	220d      	movs	r2, #13
 8007b54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	705a      	strb	r2, [r3, #1]
      break;
 8007b5c:	e0d8      	b.n	8007d10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b5e:	2109      	movs	r1, #9
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f9a1 	bl	8007ea8 <USBH_Get_CfgDesc>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b76:	e0cd      	b.n	8007d14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	2b03      	cmp	r3, #3
 8007b7c:	f040 80ca 	bne.w	8007d14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b86:	3301      	adds	r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d903      	bls.n	8007ba2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	220d      	movs	r2, #13
 8007b9e:	701a      	strb	r2, [r3, #0]
      break;
 8007ba0:	e0b8      	b.n	8007d14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	795b      	ldrb	r3, [r3, #5]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f851 	bl	8008c50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f84b 	bl	8008c50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
      break;
 8007bc6:	e0a5      	b.n	8007d14 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f969 	bl	8007ea8 <USBH_Get_CfgDesc>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2205      	movs	r2, #5
 8007be4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007be6:	e097      	b.n	8007d18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	f040 8094 	bne.w	8007d18 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d903      	bls.n	8007c12 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220d      	movs	r2, #13
 8007c0e:	701a      	strb	r2, [r3, #0]
      break;
 8007c10:	e082      	b.n	8007d18 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	795b      	ldrb	r3, [r3, #5]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f819 	bl	8008c50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 f813 	bl	8008c50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
      break;
 8007c36:	e06f      	b.n	8007d18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d019      	beq.n	8007c76 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c4e:	23ff      	movs	r3, #255	@ 0xff
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f953 	bl	8007efc <USBH_Get_StringDesc>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d103      	bne.n	8007c68 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2206      	movs	r2, #6
 8007c64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c66:	e059      	b.n	8007d1c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d156      	bne.n	8007d1c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2206      	movs	r2, #6
 8007c72:	705a      	strb	r2, [r3, #1]
      break;
 8007c74:	e052      	b.n	8007d1c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2206      	movs	r2, #6
 8007c7a:	705a      	strb	r2, [r3, #1]
      break;
 8007c7c:	e04e      	b.n	8007d1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d019      	beq.n	8007cbc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c94:	23ff      	movs	r3, #255	@ 0xff
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f930 	bl	8007efc <USBH_Get_StringDesc>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d103      	bne.n	8007cae <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2207      	movs	r2, #7
 8007caa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cac:	e038      	b.n	8007d20 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d135      	bne.n	8007d20 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2207      	movs	r2, #7
 8007cb8:	705a      	strb	r2, [r3, #1]
      break;
 8007cba:	e031      	b.n	8007d20 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2207      	movs	r2, #7
 8007cc0:	705a      	strb	r2, [r3, #1]
      break;
 8007cc2:	e02d      	b.n	8007d20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d017      	beq.n	8007cfe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cda:	23ff      	movs	r3, #255	@ 0xff
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f90d 	bl	8007efc <USBH_Get_StringDesc>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d102      	bne.n	8007cf2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007cf0:	e018      	b.n	8007d24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cf2:	7bbb      	ldrb	r3, [r7, #14]
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d115      	bne.n	8007d24 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfc:	e012      	b.n	8007d24 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	73fb      	strb	r3, [r7, #15]
      break;
 8007d02:	e00f      	b.n	8007d24 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007d04:	bf00      	nop
 8007d06:	e00e      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e00c      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e00a      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d10:	bf00      	nop
 8007d12:	e008      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d14:	bf00      	nop
 8007d16:	e006      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e004      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e002      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <USBH_HandleEnum+0x3b6>
      break;
 8007d24:	bf00      	nop
  }
  return Status;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f804 	bl	8007d72 <USBH_HandleSof>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b0b      	cmp	r3, #11
 8007d82:	d10a      	bne.n	8007d9a <USBH_HandleSof+0x28>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d005      	beq.n	8007d9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	4798      	blx	r3
  }
}
 8007d9a:	bf00      	nop
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b083      	sub	sp, #12
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007db2:	bf00      	nop
}
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dce:	bf00      	nop
}
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f8be 	bl	8008faa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	791b      	ldrb	r3, [r3, #4]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 ff0b 	bl	8008c50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	795b      	ldrb	r3, [r3, #5]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff05 	bl	8008c50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e5c:	887b      	ldrh	r3, [r7, #2]
 8007e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e62:	d901      	bls.n	8007e68 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e01b      	b.n	8007ea0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e6e:	887b      	ldrh	r3, [r7, #2]
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	4613      	mov	r3, r2
 8007e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f872 	bl	8007f64 <USBH_GetDescriptor>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f929 	bl	80080ec <USBH_ParseDevDesc>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	331c      	adds	r3, #28
 8007eb8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007eba:	887b      	ldrh	r3, [r7, #2]
 8007ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec0:	d901      	bls.n	8007ec6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e016      	b.n	8007ef4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f846 	bl	8007f64 <USBH_GetDescriptor>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ee2:	887b      	ldrh	r3, [r7, #2]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68b9      	ldr	r1, [r7, #8]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f9af 	bl	800824c <USBH_ParseCfgDesc>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	607a      	str	r2, [r7, #4]
 8007f06:	461a      	mov	r2, r3
 8007f08:	460b      	mov	r3, r1
 8007f0a:	72fb      	strb	r3, [r7, #11]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007f10:	893b      	ldrh	r3, [r7, #8]
 8007f12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f16:	d802      	bhi.n	8007f1e <USBH_Get_StringDesc+0x22>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e01c      	b.n	8007f5c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007f22:	7afb      	ldrb	r3, [r7, #11]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f2a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f32:	893b      	ldrh	r3, [r7, #8]
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	460b      	mov	r3, r1
 8007f38:	2100      	movs	r1, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 f812 	bl	8007f64 <USBH_GetDescriptor>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d107      	bne.n	8007f5a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f50:	893a      	ldrh	r2, [r7, #8]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fb8d 	bl	8008674 <USBH_ParseStringDesc>
  }

  return status;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	607b      	str	r3, [r7, #4]
 8007f6e:	460b      	mov	r3, r1
 8007f70:	72fb      	strb	r3, [r7, #11]
 8007f72:	4613      	mov	r3, r2
 8007f74:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d11c      	bne.n	8007fb8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2206      	movs	r2, #6
 8007f8e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	893a      	ldrh	r2, [r7, #8]
 8007f94:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f96:	893b      	ldrh	r3, [r7, #8]
 8007f98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fa0:	d104      	bne.n	8007fac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f240 4209 	movw	r2, #1033	@ 0x409
 8007fa8:	829a      	strh	r2, [r3, #20]
 8007faa:	e002      	b.n	8007fb2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	8b3a      	ldrh	r2, [r7, #24]
 8007fb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fb8:	8b3b      	ldrh	r3, [r7, #24]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fba5 	bl	800870e <USBH_CtlReq>
 8007fc4:	4603      	mov	r3, r0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	789b      	ldrb	r3, [r3, #2]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d10f      	bne.n	8008002 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2205      	movs	r2, #5
 8007fec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008002:	2200      	movs	r2, #0
 8008004:	2100      	movs	r1, #0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fb81 	bl	800870e <USBH_CtlReq>
 800800c:	4603      	mov	r3, r0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	789b      	ldrb	r3, [r3, #2]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d10e      	bne.n	8008048 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2209      	movs	r2, #9
 8008034:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	887a      	ldrh	r2, [r7, #2]
 800803a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fb5e 	bl	800870e <USBH_CtlReq>
 8008052:	4603      	mov	r3, r0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	789b      	ldrb	r3, [r3, #2]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d10f      	bne.n	8008090 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2203      	movs	r2, #3
 800807a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008090:	2200      	movs	r2, #0
 8008092:	2100      	movs	r1, #0
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fb3a 	bl	800870e <USBH_CtlReq>
 800809a:	4603      	mov	r3, r0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	789b      	ldrb	r3, [r3, #2]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d10f      	bne.n	80080d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080d8:	2200      	movs	r2, #0
 80080da:	2100      	movs	r1, #0
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 fb16 	bl	800870e <USBH_CtlReq>
 80080e2:	4603      	mov	r3, r0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008100:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800810c:	2302      	movs	r3, #2
 800810e:	e094      	b.n	800823a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	781a      	ldrb	r2, [r3, #0]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	785a      	ldrb	r2, [r3, #1]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3302      	adds	r3, #2
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3303      	adds	r3, #3
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	b29b      	uxth	r3, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	b29a      	uxth	r2, r3
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	791a      	ldrb	r2, [r3, #4]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	795a      	ldrb	r2, [r3, #5]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	799a      	ldrb	r2, [r3, #6]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	79da      	ldrb	r2, [r3, #7]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008160:	2b00      	cmp	r3, #0
 8008162:	d004      	beq.n	800816e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800816a:	2b01      	cmp	r3, #1
 800816c:	d11b      	bne.n	80081a6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	79db      	ldrb	r3, [r3, #7]
 8008172:	2b20      	cmp	r3, #32
 8008174:	dc0f      	bgt.n	8008196 <USBH_ParseDevDesc+0xaa>
 8008176:	2b08      	cmp	r3, #8
 8008178:	db0f      	blt.n	800819a <USBH_ParseDevDesc+0xae>
 800817a:	3b08      	subs	r3, #8
 800817c:	4a32      	ldr	r2, [pc, #200]	@ (8008248 <USBH_ParseDevDesc+0x15c>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	bf14      	ite	ne
 800818a:	2301      	movne	r3, #1
 800818c:	2300      	moveq	r3, #0
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <USBH_ParseDevDesc+0xb6>
 8008194:	e001      	b.n	800819a <USBH_ParseDevDesc+0xae>
 8008196:	2b40      	cmp	r3, #64	@ 0x40
 8008198:	d003      	beq.n	80081a2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2208      	movs	r2, #8
 800819e:	71da      	strb	r2, [r3, #7]
        break;
 80081a0:	e000      	b.n	80081a4 <USBH_ParseDevDesc+0xb8>
        break;
 80081a2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80081a4:	e00e      	b.n	80081c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d107      	bne.n	80081c0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	79db      	ldrb	r3, [r3, #7]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d005      	beq.n	80081c4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2208      	movs	r2, #8
 80081bc:	71da      	strb	r2, [r3, #7]
 80081be:	e001      	b.n	80081c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80081c0:	2303      	movs	r3, #3
 80081c2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d936      	bls.n	8008238 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3308      	adds	r3, #8
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3309      	adds	r3, #9
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4313      	orrs	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	330a      	adds	r3, #10
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	330b      	adds	r3, #11
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	330c      	adds	r3, #12
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	330d      	adds	r3, #13
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b29b      	uxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b29a      	uxth	r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	7b9a      	ldrb	r2, [r3, #14]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	7bda      	ldrb	r2, [r3, #15]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7c1a      	ldrb	r2, [r3, #16]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7c5a      	ldrb	r2, [r3, #17]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	01000101 	.word	0x01000101

0800824c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	@ 0x30
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008260:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800827a:	2302      	movs	r3, #2
 800827c:	e0da      	b.n	8008434 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b09      	cmp	r3, #9
 8008288:	d002      	beq.n	8008290 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	2209      	movs	r2, #9
 800828e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	785a      	ldrb	r2, [r3, #1]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	3302      	adds	r3, #2
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	3303      	adds	r3, #3
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ba:	bf28      	it	cs
 80082bc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	791a      	ldrb	r2, [r3, #4]
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	795a      	ldrb	r2, [r3, #5]
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	799a      	ldrb	r2, [r3, #6]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	79da      	ldrb	r2, [r3, #7]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	7a1a      	ldrb	r2, [r3, #8]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	2b09      	cmp	r3, #9
 80082f2:	f240 809d 	bls.w	8008430 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80082f6:	2309      	movs	r3, #9
 80082f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082fe:	e081      	b.n	8008404 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008300:	f107 0316 	add.w	r3, r7, #22
 8008304:	4619      	mov	r1, r3
 8008306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008308:	f000 f9e7 	bl	80086da <USBH_GetNextDesc>
 800830c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	785b      	ldrb	r3, [r3, #1]
 8008312:	2b04      	cmp	r3, #4
 8008314:	d176      	bne.n	8008404 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b09      	cmp	r3, #9
 800831c:	d002      	beq.n	8008324 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	2209      	movs	r2, #9
 8008322:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008328:	221a      	movs	r2, #26
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	3308      	adds	r3, #8
 8008330:	6a3a      	ldr	r2, [r7, #32]
 8008332:	4413      	add	r3, r2
 8008334:	3302      	adds	r3, #2
 8008336:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800833a:	69f8      	ldr	r0, [r7, #28]
 800833c:	f000 f87e 	bl	800843c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800834a:	e043      	b.n	80083d4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800834c:	f107 0316 	add.w	r3, r7, #22
 8008350:	4619      	mov	r1, r3
 8008352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008354:	f000 f9c1 	bl	80086da <USBH_GetNextDesc>
 8008358:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800835a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	2b05      	cmp	r3, #5
 8008360:	d138      	bne.n	80083d4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d113      	bne.n	8008392 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800836e:	2b02      	cmp	r3, #2
 8008370:	d003      	beq.n	800837a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	799b      	ldrb	r3, [r3, #6]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d10b      	bne.n	8008392 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	79db      	ldrb	r3, [r3, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <USBH_ParseCfgDesc+0x14e>
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b09      	cmp	r3, #9
 8008388:	d007      	beq.n	800839a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	2209      	movs	r2, #9
 800838e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008390:	e003      	b.n	800839a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	2207      	movs	r2, #7
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e000      	b.n	800839c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800839a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800839c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083a4:	3201      	adds	r2, #1
 80083a6:	00d2      	lsls	r2, r2, #3
 80083a8:	211a      	movs	r1, #26
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	4413      	add	r3, r2
 80083b0:	3308      	adds	r3, #8
 80083b2:	6a3a      	ldr	r2, [r7, #32]
 80083b4:	4413      	add	r3, r2
 80083b6:	3304      	adds	r3, #4
 80083b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083bc:	69b9      	ldr	r1, [r7, #24]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 f870 	bl	80084a4 <USBH_ParseEPDesc>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083ce:	3301      	adds	r3, #1
 80083d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	791b      	ldrb	r3, [r3, #4]
 80083d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083dc:	429a      	cmp	r2, r3
 80083de:	d204      	bcs.n	80083ea <USBH_ParseCfgDesc+0x19e>
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	885a      	ldrh	r2, [r3, #2]
 80083e4:	8afb      	ldrh	r3, [r7, #22]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d8b0      	bhi.n	800834c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d201      	bcs.n	80083fa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e01c      	b.n	8008434 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80083fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083fe:	3301      	adds	r3, #1
 8008400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008408:	2b01      	cmp	r3, #1
 800840a:	d805      	bhi.n	8008418 <USBH_ParseCfgDesc+0x1cc>
 800840c:	6a3b      	ldr	r3, [r7, #32]
 800840e:	885a      	ldrh	r2, [r3, #2]
 8008410:	8afb      	ldrh	r3, [r7, #22]
 8008412:	429a      	cmp	r2, r3
 8008414:	f63f af74 	bhi.w	8008300 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	791b      	ldrb	r3, [r3, #4]
 800841c:	2b02      	cmp	r3, #2
 800841e:	bf28      	it	cs
 8008420:	2302      	movcs	r3, #2
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008428:	429a      	cmp	r2, r3
 800842a:	d201      	bcs.n	8008430 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800842c:	2303      	movs	r3, #3
 800842e:	e001      	b.n	8008434 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008434:	4618      	mov	r0, r3
 8008436:	3730      	adds	r7, #48	@ 0x30
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	789a      	ldrb	r2, [r3, #2]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	78da      	ldrb	r2, [r3, #3]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	3304      	adds	r3, #4
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b02      	cmp	r3, #2
 800846e:	bf28      	it	cs
 8008470:	2302      	movcs	r3, #2
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	795a      	ldrb	r2, [r3, #5]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	799a      	ldrb	r2, [r3, #6]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	79da      	ldrb	r2, [r3, #7]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	7a1a      	ldrb	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	721a      	strb	r2, [r3, #8]
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	781a      	ldrb	r2, [r3, #0]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	785a      	ldrb	r2, [r3, #1]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	789a      	ldrb	r2, [r3, #2]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	78da      	ldrb	r2, [r3, #3]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3304      	adds	r3, #4
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3305      	adds	r3, #5
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	799a      	ldrb	r2, [r3, #6]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	889b      	ldrh	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008506:	d804      	bhi.n	8008512 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800850c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008510:	d901      	bls.n	8008516 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008512:	2303      	movs	r3, #3
 8008514:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800851c:	2b00      	cmp	r3, #0
 800851e:	d136      	bne.n	800858e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	78db      	ldrb	r3, [r3, #3]
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d108      	bne.n	800853e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	889b      	ldrh	r3, [r3, #4]
 8008530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008534:	f240 8097 	bls.w	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008538:	2303      	movs	r3, #3
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	e093      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	78db      	ldrb	r3, [r3, #3]
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	889b      	ldrh	r3, [r3, #4]
 800854e:	2b40      	cmp	r3, #64	@ 0x40
 8008550:	f240 8089 	bls.w	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008554:	2303      	movs	r3, #3
 8008556:	75fb      	strb	r3, [r7, #23]
 8008558:	e085      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	78db      	ldrb	r3, [r3, #3]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b01      	cmp	r3, #1
 8008564:	d005      	beq.n	8008572 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	78db      	ldrb	r3, [r3, #3]
 800856a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800856e:	2b03      	cmp	r3, #3
 8008570:	d10a      	bne.n	8008588 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	799b      	ldrb	r3, [r3, #6]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <USBH_ParseEPDesc+0xde>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	799b      	ldrb	r3, [r3, #6]
 800857e:	2b10      	cmp	r3, #16
 8008580:	d970      	bls.n	8008664 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008582:	2303      	movs	r3, #3
 8008584:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008586:	e06d      	b.n	8008664 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008588:	2303      	movs	r3, #3
 800858a:	75fb      	strb	r3, [r7, #23]
 800858c:	e06b      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008594:	2b01      	cmp	r3, #1
 8008596:	d13c      	bne.n	8008612 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	78db      	ldrb	r3, [r3, #3]
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d005      	beq.n	80085b0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	78db      	ldrb	r3, [r3, #3]
 80085a8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	889b      	ldrh	r3, [r3, #4]
 80085b4:	2b40      	cmp	r3, #64	@ 0x40
 80085b6:	d956      	bls.n	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085b8:	2303      	movs	r3, #3
 80085ba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085bc:	e053      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	78db      	ldrb	r3, [r3, #3]
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d10e      	bne.n	80085e8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	799b      	ldrb	r3, [r3, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d007      	beq.n	80085e2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085d6:	2b10      	cmp	r3, #16
 80085d8:	d803      	bhi.n	80085e2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085de:	2b40      	cmp	r3, #64	@ 0x40
 80085e0:	d941      	bls.n	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e2:	2303      	movs	r3, #3
 80085e4:	75fb      	strb	r3, [r7, #23]
 80085e6:	e03e      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	78db      	ldrb	r3, [r3, #3]
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d10b      	bne.n	800860c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	799b      	ldrb	r3, [r3, #6]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <USBH_ParseEPDesc+0x162>
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	889b      	ldrh	r3, [r3, #4]
 8008600:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008604:	d32f      	bcc.n	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008606:	2303      	movs	r3, #3
 8008608:	75fb      	strb	r3, [r7, #23]
 800860a:	e02c      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800860c:	2303      	movs	r3, #3
 800860e:	75fb      	strb	r3, [r7, #23]
 8008610:	e029      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008618:	2b02      	cmp	r3, #2
 800861a:	d120      	bne.n	800865e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	78db      	ldrb	r3, [r3, #3]
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	889b      	ldrh	r3, [r3, #4]
 800862c:	2b08      	cmp	r3, #8
 800862e:	d01a      	beq.n	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008630:	2303      	movs	r3, #3
 8008632:	75fb      	strb	r3, [r7, #23]
 8008634:	e017      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	78db      	ldrb	r3, [r3, #3]
 800863a:	f003 0303 	and.w	r3, r3, #3
 800863e:	2b03      	cmp	r3, #3
 8008640:	d10a      	bne.n	8008658 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	799b      	ldrb	r3, [r3, #6]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <USBH_ParseEPDesc+0x1ae>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	2b08      	cmp	r3, #8
 8008650:	d909      	bls.n	8008666 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008652:	2303      	movs	r3, #3
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	e006      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008658:	2303      	movs	r3, #3
 800865a:	75fb      	strb	r3, [r7, #23]
 800865c:	e003      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800865e:	2303      	movs	r3, #3
 8008660:	75fb      	strb	r3, [r7, #23]
 8008662:	e000      	b.n	8008666 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008664:	bf00      	nop
  }

  return status;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
}
 8008668:	4618      	mov	r0, r3
 800866a:	371c      	adds	r7, #28
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d120      	bne.n	80086ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	1e9a      	subs	r2, r3, #2
 8008692:	88fb      	ldrh	r3, [r7, #6]
 8008694:	4293      	cmp	r3, r2
 8008696:	bf28      	it	cs
 8008698:	4613      	movcs	r3, r2
 800869a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3302      	adds	r3, #2
 80086a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086a2:	2300      	movs	r3, #0
 80086a4:	82fb      	strh	r3, [r7, #22]
 80086a6:	e00b      	b.n	80086c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086a8:	8afb      	ldrh	r3, [r7, #22]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	4413      	add	r3, r2
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086ba:	8afb      	ldrh	r3, [r7, #22]
 80086bc:	3302      	adds	r3, #2
 80086be:	82fb      	strh	r3, [r7, #22]
 80086c0:	8afa      	ldrh	r2, [r7, #22]
 80086c2:	8abb      	ldrh	r3, [r7, #20]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d3ef      	bcc.n	80086a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
  }
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086da:	b480      	push	{r7}
 80086dc:	b085      	sub	sp, #20
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7812      	ldrb	r2, [r2, #0]
 80086ec:	4413      	add	r3, r2
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008700:	68fb      	ldr	r3, [r7, #12]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b086      	sub	sp, #24
 8008712:	af00      	add	r7, sp, #0
 8008714:	60f8      	str	r0, [r7, #12]
 8008716:	60b9      	str	r1, [r7, #8]
 8008718:	4613      	mov	r3, r2
 800871a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800871c:	2301      	movs	r3, #1
 800871e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d002      	beq.n	800872e <USBH_CtlReq+0x20>
 8008728:	2b02      	cmp	r3, #2
 800872a:	d00f      	beq.n	800874c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800872c:	e027      	b.n	800877e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2202      	movs	r2, #2
 8008744:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
      break;
 800874a:	e018      	b.n	800877e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 f81b 	bl	8008788 <USBH_HandleControl>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <USBH_CtlReq+0x54>
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	2b03      	cmp	r3, #3
 8008760:	d106      	bne.n	8008770 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	761a      	strb	r2, [r3, #24]
      break;
 800876e:	e005      	b.n	800877c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d102      	bne.n	800877c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	709a      	strb	r2, [r3, #2]
      break;
 800877c:	bf00      	nop
  }
  return status;
 800877e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af02      	add	r7, sp, #8
 800878e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008794:	2300      	movs	r3, #0
 8008796:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7e1b      	ldrb	r3, [r3, #24]
 800879c:	3b01      	subs	r3, #1
 800879e:	2b0a      	cmp	r3, #10
 80087a0:	f200 8156 	bhi.w	8008a50 <USBH_HandleControl+0x2c8>
 80087a4:	a201      	add	r2, pc, #4	@ (adr r2, 80087ac <USBH_HandleControl+0x24>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	080087f3 	.word	0x080087f3
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	08008883 	.word	0x08008883
 80087bc:	080088bb 	.word	0x080088bb
 80087c0:	080088e5 	.word	0x080088e5
 80087c4:	08008937 	.word	0x08008937
 80087c8:	08008959 	.word	0x08008959
 80087cc:	08008995 	.word	0x08008995
 80087d0:	080089bb 	.word	0x080089bb
 80087d4:	080089f9 	.word	0x080089f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f103 0110 	add.w	r1, r3, #16
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	795b      	ldrb	r3, [r3, #5]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f943 	bl	8008a70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	761a      	strb	r2, [r3, #24]
      break;
 80087f0:	e139      	b.n	8008a66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	795b      	ldrb	r3, [r3, #5]
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fcc5 	bl	8009188 <USBH_LL_GetURBState>
 80087fe:	4603      	mov	r3, r0
 8008800:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d11e      	bne.n	8008846 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7c1b      	ldrb	r3, [r3, #16]
 800880c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008810:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	8adb      	ldrh	r3, [r3, #22]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800881a:	7b7b      	ldrb	r3, [r7, #13]
 800881c:	2b80      	cmp	r3, #128	@ 0x80
 800881e:	d103      	bne.n	8008828 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2203      	movs	r2, #3
 8008824:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008826:	e115      	b.n	8008a54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2205      	movs	r2, #5
 800882c:	761a      	strb	r2, [r3, #24]
      break;
 800882e:	e111      	b.n	8008a54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008830:	7b7b      	ldrb	r3, [r7, #13]
 8008832:	2b80      	cmp	r3, #128	@ 0x80
 8008834:	d103      	bne.n	800883e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2209      	movs	r2, #9
 800883a:	761a      	strb	r2, [r3, #24]
      break;
 800883c:	e10a      	b.n	8008a54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2207      	movs	r2, #7
 8008842:	761a      	strb	r2, [r3, #24]
      break;
 8008844:	e106      	b.n	8008a54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	2b04      	cmp	r3, #4
 800884a:	d003      	beq.n	8008854 <USBH_HandleControl+0xcc>
 800884c:	7bbb      	ldrb	r3, [r7, #14]
 800884e:	2b02      	cmp	r3, #2
 8008850:	f040 8100 	bne.w	8008a54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	220b      	movs	r2, #11
 8008858:	761a      	strb	r2, [r3, #24]
      break;
 800885a:	e0fb      	b.n	8008a54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6899      	ldr	r1, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	899a      	ldrh	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f93a 	bl	8008aee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2204      	movs	r2, #4
 800887e:	761a      	strb	r2, [r3, #24]
      break;
 8008880:	e0f1      	b.n	8008a66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	791b      	ldrb	r3, [r3, #4]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc7d 	bl	8009188 <USBH_LL_GetURBState>
 800888e:	4603      	mov	r3, r0
 8008890:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008892:	7bbb      	ldrb	r3, [r7, #14]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d102      	bne.n	800889e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2209      	movs	r2, #9
 800889c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b05      	cmp	r3, #5
 80088a2:	d102      	bne.n	80088aa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088a4:	2303      	movs	r3, #3
 80088a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088a8:	e0d6      	b.n	8008a58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	f040 80d3 	bne.w	8008a58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	220b      	movs	r2, #11
 80088b6:	761a      	strb	r2, [r3, #24]
      break;
 80088b8:	e0ce      	b.n	8008a58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6899      	ldr	r1, [r3, #8]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	899a      	ldrh	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	795b      	ldrb	r3, [r3, #5]
 80088c6:	2001      	movs	r0, #1
 80088c8:	9000      	str	r0, [sp, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f8ea 	bl	8008aa4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2206      	movs	r2, #6
 80088e0:	761a      	strb	r2, [r3, #24]
      break;
 80088e2:	e0c0      	b.n	8008a66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	795b      	ldrb	r3, [r3, #5]
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fc4c 	bl	8009188 <USBH_LL_GetURBState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d103      	bne.n	8008902 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2207      	movs	r2, #7
 80088fe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008900:	e0ac      	b.n	8008a5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b05      	cmp	r3, #5
 8008906:	d105      	bne.n	8008914 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	220c      	movs	r2, #12
 800890c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800890e:	2303      	movs	r3, #3
 8008910:	73fb      	strb	r3, [r7, #15]
      break;
 8008912:	e0a3      	b.n	8008a5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d103      	bne.n	8008922 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2205      	movs	r2, #5
 800891e:	761a      	strb	r2, [r3, #24]
      break;
 8008920:	e09c      	b.n	8008a5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	2b04      	cmp	r3, #4
 8008926:	f040 8099 	bne.w	8008a5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	220b      	movs	r2, #11
 800892e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008930:	2302      	movs	r3, #2
 8008932:	73fb      	strb	r3, [r7, #15]
      break;
 8008934:	e092      	b.n	8008a5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8d5 	bl	8008aee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800894a:	b29a      	uxth	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2208      	movs	r2, #8
 8008954:	761a      	strb	r2, [r3, #24]

      break;
 8008956:	e086      	b.n	8008a66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	791b      	ldrb	r3, [r3, #4]
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fc12 	bl	8009188 <USBH_LL_GetURBState>
 8008964:	4603      	mov	r3, r0
 8008966:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d105      	bne.n	800897a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	220d      	movs	r2, #13
 8008972:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008978:	e072      	b.n	8008a60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b04      	cmp	r3, #4
 800897e:	d103      	bne.n	8008988 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	220b      	movs	r2, #11
 8008984:	761a      	strb	r2, [r3, #24]
      break;
 8008986:	e06b      	b.n	8008a60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b05      	cmp	r3, #5
 800898c:	d168      	bne.n	8008a60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800898e:	2303      	movs	r3, #3
 8008990:	73fb      	strb	r3, [r7, #15]
      break;
 8008992:	e065      	b.n	8008a60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	795b      	ldrb	r3, [r3, #5]
 8008998:	2201      	movs	r2, #1
 800899a:	9200      	str	r2, [sp, #0]
 800899c:	2200      	movs	r2, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f87f 	bl	8008aa4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	220a      	movs	r2, #10
 80089b6:	761a      	strb	r2, [r3, #24]
      break;
 80089b8:	e055      	b.n	8008a66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	795b      	ldrb	r3, [r3, #5]
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fbe1 	bl	8009188 <USBH_LL_GetURBState>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d105      	bne.n	80089dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220d      	movs	r2, #13
 80089d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089da:	e043      	b.n	8008a64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d103      	bne.n	80089ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2209      	movs	r2, #9
 80089e6:	761a      	strb	r2, [r3, #24]
      break;
 80089e8:	e03c      	b.n	8008a64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d139      	bne.n	8008a64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	220b      	movs	r2, #11
 80089f4:	761a      	strb	r2, [r3, #24]
      break;
 80089f6:	e035      	b.n	8008a64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7e5b      	ldrb	r3, [r3, #25]
 80089fc:	3301      	adds	r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	765a      	strb	r2, [r3, #25]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7e5b      	ldrb	r3, [r3, #25]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d806      	bhi.n	8008a1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a18:	e025      	b.n	8008a66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a20:	2106      	movs	r1, #6
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	795b      	ldrb	r3, [r3, #5]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f90c 	bl	8008c50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f906 	bl	8008c50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4e:	e00a      	b.n	8008a66 <USBH_HandleControl+0x2de>

    default:
      break;
 8008a50:	bf00      	nop
 8008a52:	e008      	b.n	8008a66 <USBH_HandleControl+0x2de>
      break;
 8008a54:	bf00      	nop
 8008a56:	e006      	b.n	8008a66 <USBH_HandleControl+0x2de>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e004      	b.n	8008a66 <USBH_HandleControl+0x2de>
      break;
 8008a5c:	bf00      	nop
 8008a5e:	e002      	b.n	8008a66 <USBH_HandleControl+0x2de>
      break;
 8008a60:	bf00      	nop
 8008a62:	e000      	b.n	8008a66 <USBH_HandleControl+0x2de>
      break;
 8008a64:	bf00      	nop
  }

  return status;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a7e:	79f9      	ldrb	r1, [r7, #7]
 8008a80:	2300      	movs	r3, #0
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	2308      	movs	r3, #8
 8008a86:	9302      	str	r3, [sp, #8]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	2300      	movs	r3, #0
 8008a92:	2200      	movs	r2, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fb46 	bl	8009126 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af04      	add	r7, sp, #16
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4611      	mov	r1, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	80fb      	strh	r3, [r7, #6]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ac8:	7979      	ldrb	r1, [r7, #5]
 8008aca:	7e3b      	ldrb	r3, [r7, #24]
 8008acc:	9303      	str	r3, [sp, #12]
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	9302      	str	r3, [sp, #8]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	2300      	movs	r3, #0
 8008adc:	2200      	movs	r2, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fb21 	bl	8009126 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b088      	sub	sp, #32
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	4611      	mov	r1, r2
 8008afa:	461a      	mov	r2, r3
 8008afc:	460b      	mov	r3, r1
 8008afe:	80fb      	strh	r3, [r7, #6]
 8008b00:	4613      	mov	r3, r2
 8008b02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b04:	7979      	ldrb	r1, [r7, #5]
 8008b06:	2300      	movs	r3, #0
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	2301      	movs	r3, #1
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	2300      	movs	r3, #0
 8008b18:	2201      	movs	r2, #1
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 fb03 	bl	8009126 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b20:	2300      	movs	r3, #0

}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	4611      	mov	r1, r2
 8008b36:	461a      	mov	r2, r3
 8008b38:	460b      	mov	r3, r1
 8008b3a:	80fb      	strh	r3, [r7, #6]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b4e:	7979      	ldrb	r1, [r7, #5]
 8008b50:	7e3b      	ldrb	r3, [r7, #24]
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	2302      	movs	r3, #2
 8008b62:	2200      	movs	r2, #0
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 fade 	bl	8009126 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	460b      	mov	r3, r1
 8008b84:	80fb      	strh	r3, [r7, #6]
 8008b86:	4613      	mov	r3, r2
 8008b88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b8a:	7979      	ldrb	r1, [r7, #5]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9303      	str	r3, [sp, #12]
 8008b90:	88fb      	ldrh	r3, [r7, #6]
 8008b92:	9302      	str	r3, [sp, #8]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fac0 	bl	8009126 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	4608      	mov	r0, r1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	70fb      	strb	r3, [r7, #3]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70bb      	strb	r3, [r7, #2]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bca:	7878      	ldrb	r0, [r7, #1]
 8008bcc:	78ba      	ldrb	r2, [r7, #2]
 8008bce:	78f9      	ldrb	r1, [r7, #3]
 8008bd0:	8b3b      	ldrh	r3, [r7, #24]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	7d3b      	ldrb	r3, [r7, #20]
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	7c3b      	ldrb	r3, [r7, #16]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	4603      	mov	r3, r0
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa53 	bl	800908a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa72 	bl	80090e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 f836 	bl	8008c8c <USBH_GetFreePipe>
 8008c20:	4603      	mov	r3, r0
 8008c22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c24:	89fb      	ldrh	r3, [r7, #14]
 8008c26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00a      	beq.n	8008c44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c2e:	78fa      	ldrb	r2, [r7, #3]
 8008c30:	89fb      	ldrh	r3, [r7, #14]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c3a:	6879      	ldr	r1, [r7, #4]
 8008c3c:	33e0      	adds	r3, #224	@ 0xe0
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c44:	89fb      	ldrh	r3, [r7, #14]
 8008c46:	b2db      	uxtb	r3, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	2b0f      	cmp	r3, #15
 8008c60:	d80d      	bhi.n	8008c7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	33e0      	adds	r3, #224	@ 0xe0
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	33e0      	adds	r3, #224	@ 0xe0
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	440b      	add	r3, r1
 8008c7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
 8008c9c:	e00f      	b.n	8008cbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	33e0      	adds	r3, #224	@ 0xe0
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d102      	bne.n	8008cb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	e007      	b.n	8008cc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	73fb      	strb	r3, [r7, #15]
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	2b0f      	cmp	r3, #15
 8008cc2:	d9ec      	bls.n	8008c9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	490e      	ldr	r1, [pc, #56]	@ (8008d14 <MX_USB_HOST_Init+0x40>)
 8008cdc:	480e      	ldr	r0, [pc, #56]	@ (8008d18 <MX_USB_HOST_Init+0x44>)
 8008cde:	f7fe fb15 	bl	800730c <USBH_Init>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ce8:	f7f7 feb2 	bl	8000a50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cec:	490b      	ldr	r1, [pc, #44]	@ (8008d1c <MX_USB_HOST_Init+0x48>)
 8008cee:	480a      	ldr	r0, [pc, #40]	@ (8008d18 <MX_USB_HOST_Init+0x44>)
 8008cf0:	f7fe fbb9 	bl	8007466 <USBH_RegisterClass>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cfa:	f7f7 fea9 	bl	8000a50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cfe:	4806      	ldr	r0, [pc, #24]	@ (8008d18 <MX_USB_HOST_Init+0x44>)
 8008d00:	f7fe fc3d 	bl	800757e <USBH_Start>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d0a:	f7f7 fea1 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d0e:	bf00      	nop
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	08008d35 	.word	0x08008d35
 8008d18:	200001e8 	.word	0x200001e8
 8008d1c:	2000000c 	.word	0x2000000c

08008d20 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d24:	4802      	ldr	r0, [pc, #8]	@ (8008d30 <MX_USB_HOST_Process+0x10>)
 8008d26:	f7fe fc3b 	bl	80075a0 <USBH_Process>
}
 8008d2a:	bf00      	nop
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200001e8 	.word	0x200001e8

08008d34 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	3b01      	subs	r3, #1
 8008d44:	2b04      	cmp	r3, #4
 8008d46:	d819      	bhi.n	8008d7c <USBH_UserProcess+0x48>
 8008d48:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <USBH_UserProcess+0x1c>)
 8008d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4e:	bf00      	nop
 8008d50:	08008d7d 	.word	0x08008d7d
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008d7d 	.word	0x08008d7d
 8008d5c:	08008d75 	.word	0x08008d75
 8008d60:	08008d65 	.word	0x08008d65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d64:	4b09      	ldr	r3, [pc, #36]	@ (8008d8c <USBH_UserProcess+0x58>)
 8008d66:	2203      	movs	r2, #3
 8008d68:	701a      	strb	r2, [r3, #0]
  break;
 8008d6a:	e008      	b.n	8008d7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d6c:	4b07      	ldr	r3, [pc, #28]	@ (8008d8c <USBH_UserProcess+0x58>)
 8008d6e:	2202      	movs	r2, #2
 8008d70:	701a      	strb	r2, [r3, #0]
  break;
 8008d72:	e004      	b.n	8008d7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d74:	4b05      	ldr	r3, [pc, #20]	@ (8008d8c <USBH_UserProcess+0x58>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	701a      	strb	r2, [r3, #0]
  break;
 8008d7a:	e000      	b.n	8008d7e <USBH_UserProcess+0x4a>

  default:
  break;
 8008d7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	200005c0 	.word	0x200005c0

08008d90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	@ 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d98:	f107 0314 	add.w	r3, r7, #20
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	605a      	str	r2, [r3, #4]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008db0:	d147      	bne.n	8008e42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008db2:	2300      	movs	r3, #0
 8008db4:	613b      	str	r3, [r7, #16]
 8008db6:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dba:	4a24      	ldr	r2, [pc, #144]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008dbc:	f043 0301 	orr.w	r3, r3, #1
 8008dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dc2:	4b22      	ldr	r3, [pc, #136]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ddc:	f107 0314 	add.w	r3, r7, #20
 8008de0:	4619      	mov	r1, r3
 8008de2:	481b      	ldr	r0, [pc, #108]	@ (8008e50 <HAL_HCD_MspInit+0xc0>)
 8008de4:	f7f8 f9f6 	bl	80011d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008de8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dee:	2302      	movs	r3, #2
 8008df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008df6:	2300      	movs	r3, #0
 8008df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dfe:	f107 0314 	add.w	r3, r7, #20
 8008e02:	4619      	mov	r1, r3
 8008e04:	4812      	ldr	r0, [pc, #72]	@ (8008e50 <HAL_HCD_MspInit+0xc0>)
 8008e06:	f7f8 f9e5 	bl	80011d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e0a:	4b10      	ldr	r3, [pc, #64]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e14:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e26:	4b09      	ldr	r3, [pc, #36]	@ (8008e4c <HAL_HCD_MspInit+0xbc>)
 8008e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e2e:	60fb      	str	r3, [r7, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e32:	2200      	movs	r2, #0
 8008e34:	2100      	movs	r1, #0
 8008e36:	2043      	movs	r0, #67	@ 0x43
 8008e38:	f7f8 f995 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e3c:	2043      	movs	r0, #67	@ 0x43
 8008e3e:	f7f8 f9ae 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e42:	bf00      	nop
 8008e44:	3728      	adds	r7, #40	@ 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	40020000 	.word	0x40020000

08008e54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe ff73 	bl	8007d4e <USBH_LL_IncTimer>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe ffab 	bl	8007dda <USBH_LL_Connect>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe ffb4 	bl	8007e08 <USBH_LL_Disconnect>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	70fb      	strb	r3, [r7, #3]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008eb8:	bf00      	nop
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe ff65 	bl	8007da2 <USBH_LL_PortEnabled>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe ff65 	bl	8007dbe <USBH_LL_PortDisabled>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d12a      	bne.n	8008f64 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f0e:	4a18      	ldr	r2, [pc, #96]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a15      	ldr	r2, [pc, #84]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f1a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f1e:	4b14      	ldr	r3, [pc, #80]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f20:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f24:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f26:	4b12      	ldr	r3, [pc, #72]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f28:	2208      	movs	r2, #8
 8008f2a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f2c:	4b10      	ldr	r3, [pc, #64]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f2e:	2201      	movs	r2, #1
 8008f30:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f32:	4b0f      	ldr	r3, [pc, #60]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f38:	4b0d      	ldr	r3, [pc, #52]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f44:	480a      	ldr	r0, [pc, #40]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f46:	f7f8 fafa 	bl	800153e <HAL_HCD_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f50:	f7f7 fd7e 	bl	8000a50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f54:	4806      	ldr	r0, [pc, #24]	@ (8008f70 <USBH_LL_Init+0x74>)
 8008f56:	f7f8 ff5b 	bl	8001e10 <HAL_HCD_GetCurrentFrame>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f7fe fee6 	bl	8007d30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	200005c4 	.word	0x200005c4

08008f74 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7f8 fec8 	bl	8001d20 <HAL_HCD_Start>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f95e 	bl	8009258 <USBH_Get_USB_Status>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f8 fed0 	bl	8001d66 <HAL_HCD_Stop>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f943 	bl	8009258 <USBH_Get_USB_Status>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7f8 ff1a 	bl	8001e2c <HAL_HCD_GetCurrentSpeed>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d00c      	beq.n	8009018 <USBH_LL_GetSpeed+0x38>
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d80d      	bhi.n	800901e <USBH_LL_GetSpeed+0x3e>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <USBH_LL_GetSpeed+0x2c>
 8009006:	2b01      	cmp	r3, #1
 8009008:	d003      	beq.n	8009012 <USBH_LL_GetSpeed+0x32>
 800900a:	e008      	b.n	800901e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
    break;
 8009010:	e008      	b.n	8009024 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009012:	2301      	movs	r3, #1
 8009014:	73fb      	strb	r3, [r7, #15]
    break;
 8009016:	e005      	b.n	8009024 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009018:	2302      	movs	r3, #2
 800901a:	73fb      	strb	r3, [r7, #15]
    break;
 800901c:	e002      	b.n	8009024 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
    break;
 8009022:	bf00      	nop
  }
  return  speed;
 8009024:	7bfb      	ldrb	r3, [r7, #15]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009044:	4618      	mov	r0, r3
 8009046:	f7f8 feab 	bl	8001da0 <HAL_HCD_ResetPort>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f901 	bl	8009258 <USBH_Get_USB_Status>
 8009056:	4603      	mov	r3, r0
 8009058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800905a:	7bbb      	ldrb	r3, [r7, #14]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	4611      	mov	r1, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f7f8 feb3 	bl	8001de6 <HAL_HCD_HC_GetXferCount>
 8009080:	4603      	mov	r3, r0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800908a:	b590      	push	{r4, r7, lr}
 800908c:	b089      	sub	sp, #36	@ 0x24
 800908e:	af04      	add	r7, sp, #16
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	4608      	mov	r0, r1
 8009094:	4611      	mov	r1, r2
 8009096:	461a      	mov	r2, r3
 8009098:	4603      	mov	r3, r0
 800909a:	70fb      	strb	r3, [r7, #3]
 800909c:	460b      	mov	r3, r1
 800909e:	70bb      	strb	r3, [r7, #2]
 80090a0:	4613      	mov	r3, r2
 80090a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090b2:	787c      	ldrb	r4, [r7, #1]
 80090b4:	78ba      	ldrb	r2, [r7, #2]
 80090b6:	78f9      	ldrb	r1, [r7, #3]
 80090b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090ba:	9302      	str	r3, [sp, #8]
 80090bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	4623      	mov	r3, r4
 80090ca:	f7f8 fa9f 	bl	800160c <HAL_HCD_HC_Init>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bf 	bl	8009258 <USBH_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd90      	pop	{r4, r7, pc}

080090e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7f8 fb38 	bl	800177c <HAL_HCD_HC_Halt>
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f8a0 	bl	8009258 <USBH_Get_USB_Status>
 8009118:	4603      	mov	r3, r0
 800911a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911c:	7bbb      	ldrb	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009126:	b590      	push	{r4, r7, lr}
 8009128:	b089      	sub	sp, #36	@ 0x24
 800912a:	af04      	add	r7, sp, #16
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	461a      	mov	r2, r3
 8009134:	4603      	mov	r3, r0
 8009136:	70fb      	strb	r3, [r7, #3]
 8009138:	460b      	mov	r3, r1
 800913a:	70bb      	strb	r3, [r7, #2]
 800913c:	4613      	mov	r3, r2
 800913e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800914e:	787c      	ldrb	r4, [r7, #1]
 8009150:	78ba      	ldrb	r2, [r7, #2]
 8009152:	78f9      	ldrb	r1, [r7, #3]
 8009154:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009158:	9303      	str	r3, [sp, #12]
 800915a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800915c:	9302      	str	r3, [sp, #8]
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	4623      	mov	r3, r4
 800916a:	f7f8 fb2b 	bl	80017c4 <HAL_HCD_HC_SubmitRequest>
 800916e:	4603      	mov	r3, r0
 8009170:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 f86f 	bl	8009258 <USBH_Get_USB_Status>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800917e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3714      	adds	r7, #20
 8009184:	46bd      	mov	sp, r7
 8009186:	bd90      	pop	{r4, r7, pc}

08009188 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	460b      	mov	r3, r1
 8009192:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800919a:	78fa      	ldrb	r2, [r7, #3]
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f8 fe0c 	bl	8001dbc <HAL_HCD_HC_GetURBState>
 80091a4:	4603      	mov	r3, r0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d103      	bne.n	80091cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f872 	bl	80092b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091cc:	20c8      	movs	r0, #200	@ 0xc8
 80091ce:	f7f7 fecb 	bl	8000f68 <HAL_Delay>
  return USBH_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
 80091e8:	4613      	mov	r3, r2
 80091ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	4613      	mov	r3, r2
 80091fa:	011b      	lsls	r3, r3, #4
 80091fc:	1a9b      	subs	r3, r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	3317      	adds	r3, #23
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800920a:	78fa      	ldrb	r2, [r7, #3]
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	4613      	mov	r3, r2
 8009210:	011b      	lsls	r3, r3, #4
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	440b      	add	r3, r1
 8009218:	333c      	adds	r3, #60	@ 0x3c
 800921a:	78ba      	ldrb	r2, [r7, #2]
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e009      	b.n	8009234 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	4613      	mov	r3, r2
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	1a9b      	subs	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	440b      	add	r3, r1
 800922e:	333d      	adds	r3, #61	@ 0x3d
 8009230:	78ba      	ldrb	r2, [r7, #2]
 8009232:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7f7 fe8c 	bl	8000f68 <HAL_Delay>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d817      	bhi.n	800929c <USBH_Get_USB_Status+0x44>
 800926c:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <USBH_Get_USB_Status+0x1c>)
 800926e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009272:	bf00      	nop
 8009274:	08009285 	.word	0x08009285
 8009278:	0800928b 	.word	0x0800928b
 800927c:	08009291 	.word	0x08009291
 8009280:	08009297 	.word	0x08009297
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	73fb      	strb	r3, [r7, #15]
    break;
 8009288:	e00b      	b.n	80092a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800928a:	2302      	movs	r3, #2
 800928c:	73fb      	strb	r3, [r7, #15]
    break;
 800928e:	e008      	b.n	80092a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
    break;
 8009294:	e005      	b.n	80092a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009296:	2302      	movs	r3, #2
 8009298:	73fb      	strb	r3, [r7, #15]
    break;
 800929a:	e002      	b.n	80092a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800929c:	2302      	movs	r3, #2
 800929e:	73fb      	strb	r3, [r7, #15]
    break;
 80092a0:	bf00      	nop
  }
  return usb_status;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d102      	bne.n	80092ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092c4:	2300      	movs	r3, #0
 80092c6:	73fb      	strb	r3, [r7, #15]
 80092c8:	e001      	b.n	80092ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092ca:	2301      	movs	r3, #1
 80092cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	461a      	mov	r2, r3
 80092d2:	2101      	movs	r1, #1
 80092d4:	4803      	ldr	r0, [pc, #12]	@ (80092e4 <MX_DriverVbusFS+0x34>)
 80092d6:	f7f8 f919 	bl	800150c <HAL_GPIO_WritePin>
}
 80092da:	bf00      	nop
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40020800 	.word	0x40020800

080092e8 <malloc>:
 80092e8:	4b02      	ldr	r3, [pc, #8]	@ (80092f4 <malloc+0xc>)
 80092ea:	4601      	mov	r1, r0
 80092ec:	6818      	ldr	r0, [r3, #0]
 80092ee:	f000 b82d 	b.w	800934c <_malloc_r>
 80092f2:	bf00      	nop
 80092f4:	2000002c 	.word	0x2000002c

080092f8 <free>:
 80092f8:	4b02      	ldr	r3, [pc, #8]	@ (8009304 <free+0xc>)
 80092fa:	4601      	mov	r1, r0
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f000 b8f5 	b.w	80094ec <_free_r>
 8009302:	bf00      	nop
 8009304:	2000002c 	.word	0x2000002c

08009308 <sbrk_aligned>:
 8009308:	b570      	push	{r4, r5, r6, lr}
 800930a:	4e0f      	ldr	r6, [pc, #60]	@ (8009348 <sbrk_aligned+0x40>)
 800930c:	460c      	mov	r4, r1
 800930e:	6831      	ldr	r1, [r6, #0]
 8009310:	4605      	mov	r5, r0
 8009312:	b911      	cbnz	r1, 800931a <sbrk_aligned+0x12>
 8009314:	f000 f8ae 	bl	8009474 <_sbrk_r>
 8009318:	6030      	str	r0, [r6, #0]
 800931a:	4621      	mov	r1, r4
 800931c:	4628      	mov	r0, r5
 800931e:	f000 f8a9 	bl	8009474 <_sbrk_r>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	d103      	bne.n	800932e <sbrk_aligned+0x26>
 8009326:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800932a:	4620      	mov	r0, r4
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	1cc4      	adds	r4, r0, #3
 8009330:	f024 0403 	bic.w	r4, r4, #3
 8009334:	42a0      	cmp	r0, r4
 8009336:	d0f8      	beq.n	800932a <sbrk_aligned+0x22>
 8009338:	1a21      	subs	r1, r4, r0
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f89a 	bl	8009474 <_sbrk_r>
 8009340:	3001      	adds	r0, #1
 8009342:	d1f2      	bne.n	800932a <sbrk_aligned+0x22>
 8009344:	e7ef      	b.n	8009326 <sbrk_aligned+0x1e>
 8009346:	bf00      	nop
 8009348:	200009a4 	.word	0x200009a4

0800934c <_malloc_r>:
 800934c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009350:	1ccd      	adds	r5, r1, #3
 8009352:	f025 0503 	bic.w	r5, r5, #3
 8009356:	3508      	adds	r5, #8
 8009358:	2d0c      	cmp	r5, #12
 800935a:	bf38      	it	cc
 800935c:	250c      	movcc	r5, #12
 800935e:	2d00      	cmp	r5, #0
 8009360:	4606      	mov	r6, r0
 8009362:	db01      	blt.n	8009368 <_malloc_r+0x1c>
 8009364:	42a9      	cmp	r1, r5
 8009366:	d904      	bls.n	8009372 <_malloc_r+0x26>
 8009368:	230c      	movs	r3, #12
 800936a:	6033      	str	r3, [r6, #0]
 800936c:	2000      	movs	r0, #0
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009448 <_malloc_r+0xfc>
 8009376:	f000 f869 	bl	800944c <__malloc_lock>
 800937a:	f8d8 3000 	ldr.w	r3, [r8]
 800937e:	461c      	mov	r4, r3
 8009380:	bb44      	cbnz	r4, 80093d4 <_malloc_r+0x88>
 8009382:	4629      	mov	r1, r5
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff ffbf 	bl	8009308 <sbrk_aligned>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	4604      	mov	r4, r0
 800938e:	d158      	bne.n	8009442 <_malloc_r+0xf6>
 8009390:	f8d8 4000 	ldr.w	r4, [r8]
 8009394:	4627      	mov	r7, r4
 8009396:	2f00      	cmp	r7, #0
 8009398:	d143      	bne.n	8009422 <_malloc_r+0xd6>
 800939a:	2c00      	cmp	r4, #0
 800939c:	d04b      	beq.n	8009436 <_malloc_r+0xea>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	4639      	mov	r1, r7
 80093a2:	4630      	mov	r0, r6
 80093a4:	eb04 0903 	add.w	r9, r4, r3
 80093a8:	f000 f864 	bl	8009474 <_sbrk_r>
 80093ac:	4581      	cmp	r9, r0
 80093ae:	d142      	bne.n	8009436 <_malloc_r+0xea>
 80093b0:	6821      	ldr	r1, [r4, #0]
 80093b2:	1a6d      	subs	r5, r5, r1
 80093b4:	4629      	mov	r1, r5
 80093b6:	4630      	mov	r0, r6
 80093b8:	f7ff ffa6 	bl	8009308 <sbrk_aligned>
 80093bc:	3001      	adds	r0, #1
 80093be:	d03a      	beq.n	8009436 <_malloc_r+0xea>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	442b      	add	r3, r5
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	f8d8 3000 	ldr.w	r3, [r8]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	bb62      	cbnz	r2, 8009428 <_malloc_r+0xdc>
 80093ce:	f8c8 7000 	str.w	r7, [r8]
 80093d2:	e00f      	b.n	80093f4 <_malloc_r+0xa8>
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	1b52      	subs	r2, r2, r5
 80093d8:	d420      	bmi.n	800941c <_malloc_r+0xd0>
 80093da:	2a0b      	cmp	r2, #11
 80093dc:	d917      	bls.n	800940e <_malloc_r+0xc2>
 80093de:	1961      	adds	r1, r4, r5
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	6025      	str	r5, [r4, #0]
 80093e4:	bf18      	it	ne
 80093e6:	6059      	strne	r1, [r3, #4]
 80093e8:	6863      	ldr	r3, [r4, #4]
 80093ea:	bf08      	it	eq
 80093ec:	f8c8 1000 	streq.w	r1, [r8]
 80093f0:	5162      	str	r2, [r4, r5]
 80093f2:	604b      	str	r3, [r1, #4]
 80093f4:	4630      	mov	r0, r6
 80093f6:	f000 f82f 	bl	8009458 <__malloc_unlock>
 80093fa:	f104 000b 	add.w	r0, r4, #11
 80093fe:	1d23      	adds	r3, r4, #4
 8009400:	f020 0007 	bic.w	r0, r0, #7
 8009404:	1ac2      	subs	r2, r0, r3
 8009406:	bf1c      	itt	ne
 8009408:	1a1b      	subne	r3, r3, r0
 800940a:	50a3      	strne	r3, [r4, r2]
 800940c:	e7af      	b.n	800936e <_malloc_r+0x22>
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	42a3      	cmp	r3, r4
 8009412:	bf0c      	ite	eq
 8009414:	f8c8 2000 	streq.w	r2, [r8]
 8009418:	605a      	strne	r2, [r3, #4]
 800941a:	e7eb      	b.n	80093f4 <_malloc_r+0xa8>
 800941c:	4623      	mov	r3, r4
 800941e:	6864      	ldr	r4, [r4, #4]
 8009420:	e7ae      	b.n	8009380 <_malloc_r+0x34>
 8009422:	463c      	mov	r4, r7
 8009424:	687f      	ldr	r7, [r7, #4]
 8009426:	e7b6      	b.n	8009396 <_malloc_r+0x4a>
 8009428:	461a      	mov	r2, r3
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	42a3      	cmp	r3, r4
 800942e:	d1fb      	bne.n	8009428 <_malloc_r+0xdc>
 8009430:	2300      	movs	r3, #0
 8009432:	6053      	str	r3, [r2, #4]
 8009434:	e7de      	b.n	80093f4 <_malloc_r+0xa8>
 8009436:	230c      	movs	r3, #12
 8009438:	6033      	str	r3, [r6, #0]
 800943a:	4630      	mov	r0, r6
 800943c:	f000 f80c 	bl	8009458 <__malloc_unlock>
 8009440:	e794      	b.n	800936c <_malloc_r+0x20>
 8009442:	6005      	str	r5, [r0, #0]
 8009444:	e7d6      	b.n	80093f4 <_malloc_r+0xa8>
 8009446:	bf00      	nop
 8009448:	200009a8 	.word	0x200009a8

0800944c <__malloc_lock>:
 800944c:	4801      	ldr	r0, [pc, #4]	@ (8009454 <__malloc_lock+0x8>)
 800944e:	f000 b84b 	b.w	80094e8 <__retarget_lock_acquire_recursive>
 8009452:	bf00      	nop
 8009454:	20000ae4 	.word	0x20000ae4

08009458 <__malloc_unlock>:
 8009458:	4801      	ldr	r0, [pc, #4]	@ (8009460 <__malloc_unlock+0x8>)
 800945a:	f000 b846 	b.w	80094ea <__retarget_lock_release_recursive>
 800945e:	bf00      	nop
 8009460:	20000ae4 	.word	0x20000ae4

08009464 <memset>:
 8009464:	4402      	add	r2, r0
 8009466:	4603      	mov	r3, r0
 8009468:	4293      	cmp	r3, r2
 800946a:	d100      	bne.n	800946e <memset+0xa>
 800946c:	4770      	bx	lr
 800946e:	f803 1b01 	strb.w	r1, [r3], #1
 8009472:	e7f9      	b.n	8009468 <memset+0x4>

08009474 <_sbrk_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d06      	ldr	r5, [pc, #24]	@ (8009490 <_sbrk_r+0x1c>)
 8009478:	2300      	movs	r3, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	f7f7 fc8e 	bl	8000da0 <_sbrk>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_sbrk_r+0x1a>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_sbrk_r+0x1a>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	20000ae8 	.word	0x20000ae8

08009494 <__errno>:
 8009494:	4b01      	ldr	r3, [pc, #4]	@ (800949c <__errno+0x8>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	2000002c 	.word	0x2000002c

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	4d0d      	ldr	r5, [pc, #52]	@ (80094d8 <__libc_init_array+0x38>)
 80094a4:	4c0d      	ldr	r4, [pc, #52]	@ (80094dc <__libc_init_array+0x3c>)
 80094a6:	1b64      	subs	r4, r4, r5
 80094a8:	10a4      	asrs	r4, r4, #2
 80094aa:	2600      	movs	r6, #0
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	4d0b      	ldr	r5, [pc, #44]	@ (80094e0 <__libc_init_array+0x40>)
 80094b2:	4c0c      	ldr	r4, [pc, #48]	@ (80094e4 <__libc_init_array+0x44>)
 80094b4:	f000 f864 	bl	8009580 <_init>
 80094b8:	1b64      	subs	r4, r4, r5
 80094ba:	10a4      	asrs	r4, r4, #2
 80094bc:	2600      	movs	r6, #0
 80094be:	42a6      	cmp	r6, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c8:	4798      	blx	r3
 80094ca:	3601      	adds	r6, #1
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d2:	4798      	blx	r3
 80094d4:	3601      	adds	r6, #1
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	080095bc 	.word	0x080095bc
 80094dc:	080095bc 	.word	0x080095bc
 80094e0:	080095bc 	.word	0x080095bc
 80094e4:	080095c0 	.word	0x080095c0

080094e8 <__retarget_lock_acquire_recursive>:
 80094e8:	4770      	bx	lr

080094ea <__retarget_lock_release_recursive>:
 80094ea:	4770      	bx	lr

080094ec <_free_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d041      	beq.n	8009578 <_free_r+0x8c>
 80094f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f8:	1f0c      	subs	r4, r1, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfb8      	it	lt
 80094fe:	18e4      	addlt	r4, r4, r3
 8009500:	f7ff ffa4 	bl	800944c <__malloc_lock>
 8009504:	4a1d      	ldr	r2, [pc, #116]	@ (800957c <_free_r+0x90>)
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	b933      	cbnz	r3, 8009518 <_free_r+0x2c>
 800950a:	6063      	str	r3, [r4, #4]
 800950c:	6014      	str	r4, [r2, #0]
 800950e:	4628      	mov	r0, r5
 8009510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009514:	f7ff bfa0 	b.w	8009458 <__malloc_unlock>
 8009518:	42a3      	cmp	r3, r4
 800951a:	d908      	bls.n	800952e <_free_r+0x42>
 800951c:	6820      	ldr	r0, [r4, #0]
 800951e:	1821      	adds	r1, r4, r0
 8009520:	428b      	cmp	r3, r1
 8009522:	bf01      	itttt	eq
 8009524:	6819      	ldreq	r1, [r3, #0]
 8009526:	685b      	ldreq	r3, [r3, #4]
 8009528:	1809      	addeq	r1, r1, r0
 800952a:	6021      	streq	r1, [r4, #0]
 800952c:	e7ed      	b.n	800950a <_free_r+0x1e>
 800952e:	461a      	mov	r2, r3
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	b10b      	cbz	r3, 8009538 <_free_r+0x4c>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d9fa      	bls.n	800952e <_free_r+0x42>
 8009538:	6811      	ldr	r1, [r2, #0]
 800953a:	1850      	adds	r0, r2, r1
 800953c:	42a0      	cmp	r0, r4
 800953e:	d10b      	bne.n	8009558 <_free_r+0x6c>
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	4401      	add	r1, r0
 8009544:	1850      	adds	r0, r2, r1
 8009546:	4283      	cmp	r3, r0
 8009548:	6011      	str	r1, [r2, #0]
 800954a:	d1e0      	bne.n	800950e <_free_r+0x22>
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	6053      	str	r3, [r2, #4]
 8009552:	4408      	add	r0, r1
 8009554:	6010      	str	r0, [r2, #0]
 8009556:	e7da      	b.n	800950e <_free_r+0x22>
 8009558:	d902      	bls.n	8009560 <_free_r+0x74>
 800955a:	230c      	movs	r3, #12
 800955c:	602b      	str	r3, [r5, #0]
 800955e:	e7d6      	b.n	800950e <_free_r+0x22>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428b      	cmp	r3, r1
 8009566:	bf04      	itt	eq
 8009568:	6819      	ldreq	r1, [r3, #0]
 800956a:	685b      	ldreq	r3, [r3, #4]
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	bf04      	itt	eq
 8009570:	1809      	addeq	r1, r1, r0
 8009572:	6021      	streq	r1, [r4, #0]
 8009574:	6054      	str	r4, [r2, #4]
 8009576:	e7ca      	b.n	800950e <_free_r+0x22>
 8009578:	bd38      	pop	{r3, r4, r5, pc}
 800957a:	bf00      	nop
 800957c:	200009a8 	.word	0x200009a8

08009580 <_init>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	bf00      	nop
 8009584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009586:	bc08      	pop	{r3}
 8009588:	469e      	mov	lr, r3
 800958a:	4770      	bx	lr

0800958c <_fini>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr
